// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicletelemetry_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicletelemetry_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicletelemetry_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "vehicletelemetry.pb.h"
#include "common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicletelemetry_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicletelemetry_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace bosch {
namespace itrams_gen2e {
class TelemetryMessage;
class TelemetryMessageDefaultTypeInternal;
extern TelemetryMessageDefaultTypeInternal _TelemetryMessage_default_instance_;
}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::bosch::itrams_gen2e::TelemetryMessage* Arena::CreateMaybeMessage<::com::bosch::itrams_gen2e::TelemetryMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace bosch {
namespace itrams_gen2e {

enum eTcuMessageSubType : int {
  Telemetry = 0,
  eTcuMessageSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eTcuMessageSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eTcuMessageSubType_IsValid(int value);
constexpr eTcuMessageSubType eTcuMessageSubType_MIN = Telemetry;
constexpr eTcuMessageSubType eTcuMessageSubType_MAX = Telemetry;
constexpr int eTcuMessageSubType_ARRAYSIZE = eTcuMessageSubType_MAX + 1;

const std::string& eTcuMessageSubType_Name(eTcuMessageSubType value);
template<typename T>
inline const std::string& eTcuMessageSubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eTcuMessageSubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eTcuMessageSubType_Name.");
  return eTcuMessageSubType_Name(static_cast<eTcuMessageSubType>(enum_t_value));
}
bool eTcuMessageSubType_Parse(
    const std::string& name, eTcuMessageSubType* value);
// ===================================================================

class TelemetryMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.bosch.itrams_gen2e.TelemetryMessage) */ {
 public:
  inline TelemetryMessage() : TelemetryMessage(nullptr) {};
  virtual ~TelemetryMessage();

  TelemetryMessage(const TelemetryMessage& from);
  TelemetryMessage(TelemetryMessage&& from) noexcept
    : TelemetryMessage() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage& operator=(const TelemetryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage& operator=(TelemetryMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TelemetryMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryMessage* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage*>(
               &_TelemetryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TelemetryMessage& a, TelemetryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryMessage* New() const final {
    return CreateMaybeMessage<TelemetryMessage>(nullptr);
  }

  TelemetryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TelemetryMessage& from);
  void MergeFrom(const TelemetryMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelemetryMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bosch.itrams_gen2e.TelemetryMessage";
  }
  protected:
  explicit TelemetryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kToFieldNumber = 2,
    kCorrelationIdFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kVehicleIdFieldNumber = 5,
    kPriorityFieldNumber = 8,
    kVersionFieldNumber = 11,
    kTimeStampFieldNumber = 12,
    kTelemetryPayloadFieldNumber = 13,
    kTypeFieldNumber = 6,
    kSubtypeFieldNumber = 7,
    kOperatingStateFieldNumber = 9,
    kProvisioningStateFieldNumber = 10,
    kPacketTypeFieldNumber = 14,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_to();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_to(
      std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // string correlation_id = 3;
  void clear_correlation_id();
  const std::string& correlation_id() const;
  void set_correlation_id(const std::string& value);
  void set_correlation_id(std::string&& value);
  void set_correlation_id(const char* value);
  void set_correlation_id(const char* value, size_t size);
  std::string* mutable_correlation_id();
  std::string* release_correlation_id();
  void set_allocated_correlation_id(std::string* correlation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_correlation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_correlation_id(
      std::string* correlation_id);
  private:
  const std::string& _internal_correlation_id() const;
  void _internal_set_correlation_id(const std::string& value);
  std::string* _internal_mutable_correlation_id();
  public:

  // string user_id = 4;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_id(
      std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string vehicle_id = 5;
  void clear_vehicle_id();
  const std::string& vehicle_id() const;
  void set_vehicle_id(const std::string& value);
  void set_vehicle_id(std::string&& value);
  void set_vehicle_id(const char* value);
  void set_vehicle_id(const char* value, size_t size);
  std::string* mutable_vehicle_id();
  std::string* release_vehicle_id();
  void set_allocated_vehicle_id(std::string* vehicle_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vehicle_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vehicle_id(
      std::string* vehicle_id);
  private:
  const std::string& _internal_vehicle_id() const;
  void _internal_set_vehicle_id(const std::string& value);
  std::string* _internal_mutable_vehicle_id();
  public:

  // string priority = 8;
  void clear_priority();
  const std::string& priority() const;
  void set_priority(const std::string& value);
  void set_priority(std::string&& value);
  void set_priority(const char* value);
  void set_priority(const char* value, size_t size);
  std::string* mutable_priority();
  std::string* release_priority();
  void set_allocated_priority(std::string* priority);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_priority();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_priority(
      std::string* priority);
  private:
  const std::string& _internal_priority() const;
  void _internal_set_priority(const std::string& value);
  std::string* _internal_mutable_priority();
  public:

  // string version = 11;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.protobuf.Timestamp time_stamp = 12;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time_stamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_stamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_stamp();

  // .com.bosch.itrams_gen2e.TelemetryPayload telemetryPayload = 13;
  bool has_telemetrypayload() const;
  private:
  bool _internal_has_telemetrypayload() const;
  public:
  void clear_telemetrypayload();
  const ::com::bosch::itrams_gen2e::TelemetryPayload& telemetrypayload() const;
  ::com::bosch::itrams_gen2e::TelemetryPayload* release_telemetrypayload();
  ::com::bosch::itrams_gen2e::TelemetryPayload* mutable_telemetrypayload();
  void set_allocated_telemetrypayload(::com::bosch::itrams_gen2e::TelemetryPayload* telemetrypayload);
  private:
  const ::com::bosch::itrams_gen2e::TelemetryPayload& _internal_telemetrypayload() const;
  ::com::bosch::itrams_gen2e::TelemetryPayload* _internal_mutable_telemetrypayload();
  public:
  void unsafe_arena_set_allocated_telemetrypayload(
      ::com::bosch::itrams_gen2e::TelemetryPayload* telemetrypayload);
  ::com::bosch::itrams_gen2e::TelemetryPayload* unsafe_arena_release_telemetrypayload();

  // .com.bosch.itrams_gen2e.eTcuMessageType type = 6;
  void clear_type();
  ::com::bosch::itrams_gen2e::eTcuMessageType type() const;
  void set_type(::com::bosch::itrams_gen2e::eTcuMessageType value);
  private:
  ::com::bosch::itrams_gen2e::eTcuMessageType _internal_type() const;
  void _internal_set_type(::com::bosch::itrams_gen2e::eTcuMessageType value);
  public:

  // .com.bosch.itrams_gen2e.eTcuMessageSubType subtype = 7;
  void clear_subtype();
  ::com::bosch::itrams_gen2e::eTcuMessageSubType subtype() const;
  void set_subtype(::com::bosch::itrams_gen2e::eTcuMessageSubType value);
  private:
  ::com::bosch::itrams_gen2e::eTcuMessageSubType _internal_subtype() const;
  void _internal_set_subtype(::com::bosch::itrams_gen2e::eTcuMessageSubType value);
  public:

  // .com.bosch.itrams_gen2e.eOperatingState operating_state = 9;
  void clear_operating_state();
  ::com::bosch::itrams_gen2e::eOperatingState operating_state() const;
  void set_operating_state(::com::bosch::itrams_gen2e::eOperatingState value);
  private:
  ::com::bosch::itrams_gen2e::eOperatingState _internal_operating_state() const;
  void _internal_set_operating_state(::com::bosch::itrams_gen2e::eOperatingState value);
  public:

  // .com.bosch.itrams_gen2e.eProvisioningState provisioning_state = 10;
  void clear_provisioning_state();
  ::com::bosch::itrams_gen2e::eProvisioningState provisioning_state() const;
  void set_provisioning_state(::com::bosch::itrams_gen2e::eProvisioningState value);
  private:
  ::com::bosch::itrams_gen2e::eProvisioningState _internal_provisioning_state() const;
  void _internal_set_provisioning_state(::com::bosch::itrams_gen2e::eProvisioningState value);
  public:

  // int32 packetType = 14;
  void clear_packettype();
  ::PROTOBUF_NAMESPACE_ID::int32 packettype() const;
  void set_packettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_packettype() const;
  void _internal_set_packettype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.bosch.itrams_gen2e.TelemetryMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr correlation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr priority_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp_;
  ::com::bosch::itrams_gen2e::TelemetryPayload* telemetrypayload_;
  int type_;
  int subtype_;
  int operating_state_;
  int provisioning_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 packettype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicletelemetry_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TelemetryMessage

// string message_id = 1;
inline void TelemetryMessage::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::message_id() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
  return _internal_message_id();
}
inline void TelemetryMessage::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
}
inline std::string* TelemetryMessage::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& TelemetryMessage::_internal_message_id() const {
  return message_id_.Get();
}
inline void TelemetryMessage::_internal_set_message_id(const std::string& value) {
  
  message_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_message_id(std::string&& value) {
  
  message_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
}
inline void TelemetryMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
}
inline void TelemetryMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
}
inline std::string* TelemetryMessage::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
}
inline std::string* TelemetryMessage::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_message_id(
    std::string* message_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.message_id)
}

// string to = 2;
inline void TelemetryMessage::clear_to() {
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::to() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.to)
  return _internal_to();
}
inline void TelemetryMessage::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.to)
}
inline std::string* TelemetryMessage::mutable_to() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.to)
  return _internal_mutable_to();
}
inline const std::string& TelemetryMessage::_internal_to() const {
  return to_.Get();
}
inline void TelemetryMessage::_internal_set_to(const std::string& value) {
  
  to_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_to(std::string&& value) {
  
  to_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.to)
}
inline void TelemetryMessage::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.to)
}
inline void TelemetryMessage::set_to(const char* value,
    size_t size) {
  
  to_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.to)
}
inline std::string* TelemetryMessage::_internal_mutable_to() {
  
  return to_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_to() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.to)
}
inline std::string* TelemetryMessage::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.to)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return to_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_to(
    std::string* to) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (to != nullptr) {
    
  } else {
    
  }
  to_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      to, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.to)
}

// string correlation_id = 3;
inline void TelemetryMessage::clear_correlation_id() {
  correlation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::correlation_id() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
  return _internal_correlation_id();
}
inline void TelemetryMessage::set_correlation_id(const std::string& value) {
  _internal_set_correlation_id(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
}
inline std::string* TelemetryMessage::mutable_correlation_id() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
  return _internal_mutable_correlation_id();
}
inline const std::string& TelemetryMessage::_internal_correlation_id() const {
  return correlation_id_.Get();
}
inline void TelemetryMessage::_internal_set_correlation_id(const std::string& value) {
  
  correlation_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_correlation_id(std::string&& value) {
  
  correlation_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
}
inline void TelemetryMessage::set_correlation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  correlation_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
}
inline void TelemetryMessage::set_correlation_id(const char* value,
    size_t size) {
  
  correlation_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
}
inline std::string* TelemetryMessage::_internal_mutable_correlation_id() {
  
  return correlation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_correlation_id() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
  return correlation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_correlation_id(std::string* correlation_id) {
  if (correlation_id != nullptr) {
    
  } else {
    
  }
  correlation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), correlation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
}
inline std::string* TelemetryMessage::unsafe_arena_release_correlation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return correlation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_correlation_id(
    std::string* correlation_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (correlation_id != nullptr) {
    
  } else {
    
  }
  correlation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      correlation_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.correlation_id)
}

// string user_id = 4;
inline void TelemetryMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::user_id() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
  return _internal_user_id();
}
inline void TelemetryMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
}
inline std::string* TelemetryMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TelemetryMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void TelemetryMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_user_id(std::string&& value) {
  
  user_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
}
inline void TelemetryMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
}
inline void TelemetryMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
}
inline std::string* TelemetryMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
}
inline std::string* TelemetryMessage::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_user_id(
    std::string* user_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.user_id)
}

// string vehicle_id = 5;
inline void TelemetryMessage::clear_vehicle_id() {
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::vehicle_id() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
  return _internal_vehicle_id();
}
inline void TelemetryMessage::set_vehicle_id(const std::string& value) {
  _internal_set_vehicle_id(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
}
inline std::string* TelemetryMessage::mutable_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
  return _internal_mutable_vehicle_id();
}
inline const std::string& TelemetryMessage::_internal_vehicle_id() const {
  return vehicle_id_.Get();
}
inline void TelemetryMessage::_internal_set_vehicle_id(const std::string& value) {
  
  vehicle_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_vehicle_id(std::string&& value) {
  
  vehicle_id_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
}
inline void TelemetryMessage::set_vehicle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
}
inline void TelemetryMessage::set_vehicle_id(const char* value,
    size_t size) {
  
  vehicle_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
}
inline std::string* TelemetryMessage::_internal_mutable_vehicle_id() {
  
  return vehicle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_vehicle_id() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
  return vehicle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_vehicle_id(std::string* vehicle_id) {
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
}
inline std::string* TelemetryMessage::unsafe_arena_release_vehicle_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vehicle_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_vehicle_id(
    std::string* vehicle_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vehicle_id != nullptr) {
    
  } else {
    
  }
  vehicle_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vehicle_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id)
}

// .com.bosch.itrams_gen2e.eTcuMessageType type = 6;
inline void TelemetryMessage::clear_type() {
  type_ = 0;
}
inline ::com::bosch::itrams_gen2e::eTcuMessageType TelemetryMessage::_internal_type() const {
  return static_cast< ::com::bosch::itrams_gen2e::eTcuMessageType >(type_);
}
inline ::com::bosch::itrams_gen2e::eTcuMessageType TelemetryMessage::type() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.type)
  return _internal_type();
}
inline void TelemetryMessage::_internal_set_type(::com::bosch::itrams_gen2e::eTcuMessageType value) {
  
  type_ = value;
}
inline void TelemetryMessage::set_type(::com::bosch::itrams_gen2e::eTcuMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.type)
}

// .com.bosch.itrams_gen2e.eTcuMessageSubType subtype = 7;
inline void TelemetryMessage::clear_subtype() {
  subtype_ = 0;
}
inline ::com::bosch::itrams_gen2e::eTcuMessageSubType TelemetryMessage::_internal_subtype() const {
  return static_cast< ::com::bosch::itrams_gen2e::eTcuMessageSubType >(subtype_);
}
inline ::com::bosch::itrams_gen2e::eTcuMessageSubType TelemetryMessage::subtype() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.subtype)
  return _internal_subtype();
}
inline void TelemetryMessage::_internal_set_subtype(::com::bosch::itrams_gen2e::eTcuMessageSubType value) {
  
  subtype_ = value;
}
inline void TelemetryMessage::set_subtype(::com::bosch::itrams_gen2e::eTcuMessageSubType value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.subtype)
}

// string priority = 8;
inline void TelemetryMessage::clear_priority() {
  priority_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::priority() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.priority)
  return _internal_priority();
}
inline void TelemetryMessage::set_priority(const std::string& value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.priority)
}
inline std::string* TelemetryMessage::mutable_priority() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.priority)
  return _internal_mutable_priority();
}
inline const std::string& TelemetryMessage::_internal_priority() const {
  return priority_.Get();
}
inline void TelemetryMessage::_internal_set_priority(const std::string& value) {
  
  priority_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_priority(std::string&& value) {
  
  priority_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.priority)
}
inline void TelemetryMessage::set_priority(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  priority_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.priority)
}
inline void TelemetryMessage::set_priority(const char* value,
    size_t size) {
  
  priority_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.priority)
}
inline std::string* TelemetryMessage::_internal_mutable_priority() {
  
  return priority_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_priority() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.priority)
  return priority_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_priority(std::string* priority) {
  if (priority != nullptr) {
    
  } else {
    
  }
  priority_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), priority,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.priority)
}
inline std::string* TelemetryMessage::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.priority)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return priority_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_priority(
    std::string* priority) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (priority != nullptr) {
    
  } else {
    
  }
  priority_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      priority, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.priority)
}

// .com.bosch.itrams_gen2e.eOperatingState operating_state = 9;
inline void TelemetryMessage::clear_operating_state() {
  operating_state_ = 0;
}
inline ::com::bosch::itrams_gen2e::eOperatingState TelemetryMessage::_internal_operating_state() const {
  return static_cast< ::com::bosch::itrams_gen2e::eOperatingState >(operating_state_);
}
inline ::com::bosch::itrams_gen2e::eOperatingState TelemetryMessage::operating_state() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.operating_state)
  return _internal_operating_state();
}
inline void TelemetryMessage::_internal_set_operating_state(::com::bosch::itrams_gen2e::eOperatingState value) {
  
  operating_state_ = value;
}
inline void TelemetryMessage::set_operating_state(::com::bosch::itrams_gen2e::eOperatingState value) {
  _internal_set_operating_state(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.operating_state)
}

// .com.bosch.itrams_gen2e.eProvisioningState provisioning_state = 10;
inline void TelemetryMessage::clear_provisioning_state() {
  provisioning_state_ = 0;
}
inline ::com::bosch::itrams_gen2e::eProvisioningState TelemetryMessage::_internal_provisioning_state() const {
  return static_cast< ::com::bosch::itrams_gen2e::eProvisioningState >(provisioning_state_);
}
inline ::com::bosch::itrams_gen2e::eProvisioningState TelemetryMessage::provisioning_state() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.provisioning_state)
  return _internal_provisioning_state();
}
inline void TelemetryMessage::_internal_set_provisioning_state(::com::bosch::itrams_gen2e::eProvisioningState value) {
  
  provisioning_state_ = value;
}
inline void TelemetryMessage::set_provisioning_state(::com::bosch::itrams_gen2e::eProvisioningState value) {
  _internal_set_provisioning_state(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.provisioning_state)
}

// string version = 11;
inline void TelemetryMessage::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TelemetryMessage::version() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.version)
  return _internal_version();
}
inline void TelemetryMessage::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.version)
}
inline std::string* TelemetryMessage::mutable_version() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.version)
  return _internal_mutable_version();
}
inline const std::string& TelemetryMessage::_internal_version() const {
  return version_.Get();
}
inline void TelemetryMessage::_internal_set_version(const std::string& value) {
  
  version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TelemetryMessage::set_version(std::string&& value) {
  
  version_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.bosch.itrams_gen2e.TelemetryMessage.version)
}
inline void TelemetryMessage::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.bosch.itrams_gen2e.TelemetryMessage.version)
}
inline void TelemetryMessage::set_version(const char* value,
    size_t size) {
  
  version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.bosch.itrams_gen2e.TelemetryMessage.version)
}
inline std::string* TelemetryMessage::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TelemetryMessage::release_version() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TelemetryMessage::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.version)
}
inline std::string* TelemetryMessage::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.bosch.itrams_gen2e.TelemetryMessage.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TelemetryMessage::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.version)
}

// .google.protobuf.Timestamp time_stamp = 12;
inline bool TelemetryMessage::_internal_has_time_stamp() const {
  return this != internal_default_instance() && time_stamp_ != nullptr;
}
inline bool TelemetryMessage::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TelemetryMessage::_internal_time_stamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TelemetryMessage::time_stamp() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.time_stamp)
  return _internal_time_stamp();
}
inline void TelemetryMessage::unsafe_arena_set_allocated_time_stamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.time_stamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::release_time_stamp() {
  auto temp = unsafe_arena_release_time_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.time_stamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_stamp_;
  time_stamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::_internal_mutable_time_stamp() {
  
  if (time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_stamp_ = p;
  }
  return time_stamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::mutable_time_stamp() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.time_stamp)
  return _internal_mutable_time_stamp();
}
inline void TelemetryMessage::set_allocated_time_stamp(PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp)->GetArena();
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.time_stamp)
}

// .com.bosch.itrams_gen2e.TelemetryPayload telemetryPayload = 13;
inline bool TelemetryMessage::_internal_has_telemetrypayload() const {
  return this != internal_default_instance() && telemetrypayload_ != nullptr;
}
inline bool TelemetryMessage::has_telemetrypayload() const {
  return _internal_has_telemetrypayload();
}
inline const ::com::bosch::itrams_gen2e::TelemetryPayload& TelemetryMessage::_internal_telemetrypayload() const {
  const ::com::bosch::itrams_gen2e::TelemetryPayload* p = telemetrypayload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::bosch::itrams_gen2e::TelemetryPayload*>(
      &::com::bosch::itrams_gen2e::_TelemetryPayload_default_instance_);
}
inline const ::com::bosch::itrams_gen2e::TelemetryPayload& TelemetryMessage::telemetrypayload() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.telemetryPayload)
  return _internal_telemetrypayload();
}
inline void TelemetryMessage::unsafe_arena_set_allocated_telemetrypayload(
    ::com::bosch::itrams_gen2e::TelemetryPayload* telemetrypayload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetrypayload_);
  }
  telemetrypayload_ = telemetrypayload;
  if (telemetrypayload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.telemetryPayload)
}
inline ::com::bosch::itrams_gen2e::TelemetryPayload* TelemetryMessage::release_telemetrypayload() {
  auto temp = unsafe_arena_release_telemetrypayload();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::bosch::itrams_gen2e::TelemetryPayload* TelemetryMessage::unsafe_arena_release_telemetrypayload() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryMessage.telemetryPayload)
  
  ::com::bosch::itrams_gen2e::TelemetryPayload* temp = telemetrypayload_;
  telemetrypayload_ = nullptr;
  return temp;
}
inline ::com::bosch::itrams_gen2e::TelemetryPayload* TelemetryMessage::_internal_mutable_telemetrypayload() {
  
  if (telemetrypayload_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::bosch::itrams_gen2e::TelemetryPayload>(GetArena());
    telemetrypayload_ = p;
  }
  return telemetrypayload_;
}
inline ::com::bosch::itrams_gen2e::TelemetryPayload* TelemetryMessage::mutable_telemetrypayload() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryMessage.telemetryPayload)
  return _internal_mutable_telemetrypayload();
}
inline void TelemetryMessage::set_allocated_telemetrypayload(::com::bosch::itrams_gen2e::TelemetryPayload* telemetrypayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetrypayload_);
  }
  if (telemetrypayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetrypayload)->GetArena();
    if (message_arena != submessage_arena) {
      telemetrypayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetrypayload, submessage_arena);
    }
    
  } else {
    
  }
  telemetrypayload_ = telemetrypayload;
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryMessage.telemetryPayload)
}

// int32 packetType = 14;
inline void TelemetryMessage::clear_packettype() {
  packettype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryMessage::_internal_packettype() const {
  return packettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryMessage::packettype() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryMessage.packetType)
  return _internal_packettype();
}
inline void TelemetryMessage::_internal_set_packettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packettype_ = value;
}
inline void TelemetryMessage::set_packettype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_packettype(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryMessage.packetType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::eTcuMessageSubType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicletelemetry_5fmessage_2eproto
