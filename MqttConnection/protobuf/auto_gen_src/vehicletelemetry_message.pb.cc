// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicletelemetry_message.proto

#include "vehicletelemetry_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vehicletelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TelemetryPayload_vehicletelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace com {
namespace bosch {
namespace itrams_gen2e {
class TelemetryMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryMessage> _instance;
} _TelemetryMessage_default_instance_;
}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com
static void InitDefaultsscc_info_TelemetryMessage_vehicletelemetry_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::bosch::itrams_gen2e::_TelemetryMessage_default_instance_;
    new (ptr) ::com::bosch::itrams_gen2e::TelemetryMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::bosch::itrams_gen2e::TelemetryMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TelemetryMessage_vehicletelemetry_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TelemetryMessage_vehicletelemetry_5fmessage_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_TelemetryPayload_vehicletelemetry_2eproto.base,}};

namespace com {
namespace bosch {
namespace itrams_gen2e {
bool eTcuMessageSubType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> eTcuMessageSubType_strings[1] = {};

static const char eTcuMessageSubType_names[] =
  "Telemetry";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry eTcuMessageSubType_entries[] = {
  { {eTcuMessageSubType_names + 0, 9}, 0 },
};

static const int eTcuMessageSubType_entries_by_number[] = {
  0, // 0 -> Telemetry
};

const std::string& eTcuMessageSubType_Name(
    eTcuMessageSubType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          eTcuMessageSubType_entries,
          eTcuMessageSubType_entries_by_number,
          1, eTcuMessageSubType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      eTcuMessageSubType_entries,
      eTcuMessageSubType_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     eTcuMessageSubType_strings[idx].get();
}
bool eTcuMessageSubType_Parse(
    const std::string& name, eTcuMessageSubType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      eTcuMessageSubType_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<eTcuMessageSubType>(int_value);
  }
  return success;
}

// ===================================================================

void TelemetryMessage::InitAsDefaultInstance() {
  ::com::bosch::itrams_gen2e::_TelemetryMessage_default_instance_._instance.get_mutable()->time_stamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::com::bosch::itrams_gen2e::_TelemetryMessage_default_instance_._instance.get_mutable()->telemetrypayload_ = const_cast< ::com::bosch::itrams_gen2e::TelemetryPayload*>(
      ::com::bosch::itrams_gen2e::TelemetryPayload::internal_default_instance());
}
class TelemetryMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time_stamp(const TelemetryMessage* msg);
  static const ::com::bosch::itrams_gen2e::TelemetryPayload& telemetrypayload(const TelemetryMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TelemetryMessage::_Internal::time_stamp(const TelemetryMessage* msg) {
  return *msg->time_stamp_;
}
const ::com::bosch::itrams_gen2e::TelemetryPayload&
TelemetryMessage::_Internal::telemetrypayload(const TelemetryMessage* msg) {
  return *msg->telemetrypayload_;
}
void TelemetryMessage::clear_time_stamp() {
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
}
void TelemetryMessage::clear_telemetrypayload() {
  if (GetArena() == nullptr && telemetrypayload_ != nullptr) {
    delete telemetrypayload_;
  }
  telemetrypayload_ = nullptr;
}
TelemetryMessage::TelemetryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bosch.itrams_gen2e.TelemetryMessage)
}
TelemetryMessage::TelemetryMessage(const TelemetryMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_correlation_id().empty()) {
    correlation_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_correlation_id(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vehicle_id().empty()) {
    vehicle_id_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vehicle_id(),
      GetArena());
  }
  priority_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_priority().empty()) {
    priority_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_priority(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  if (from._internal_has_time_stamp()) {
    time_stamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_stamp_);
  } else {
    time_stamp_ = nullptr;
  }
  if (from._internal_has_telemetrypayload()) {
    telemetrypayload_ = new ::com::bosch::itrams_gen2e::TelemetryPayload(*from.telemetrypayload_);
  } else {
    telemetrypayload_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&packettype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(packettype_));
  // @@protoc_insertion_point(copy_constructor:com.bosch.itrams_gen2e.TelemetryMessage)
}

void TelemetryMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryMessage_vehicletelemetry_5fmessage_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packettype_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(packettype_));
}

TelemetryMessage::~TelemetryMessage() {
  // @@protoc_insertion_point(destructor:com.bosch.itrams_gen2e.TelemetryMessage)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TelemetryMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  correlation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vehicle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  priority_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_stamp_;
  if (this != internal_default_instance()) delete telemetrypayload_;
}

void TelemetryMessage::ArenaDtor(void* object) {
  TelemetryMessage* _this = reinterpret_cast< TelemetryMessage* >(object);
  (void)_this;
}
void TelemetryMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryMessage& TelemetryMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryMessage_vehicletelemetry_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void TelemetryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bosch.itrams_gen2e.TelemetryMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  correlation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  priority_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_stamp_ != nullptr) {
    delete time_stamp_;
  }
  time_stamp_ = nullptr;
  if (GetArena() == nullptr && telemetrypayload_ != nullptr) {
    delete telemetrypayload_;
  }
  telemetrypayload_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packettype_) -
      reinterpret_cast<char*>(&type_)) + sizeof(packettype_));
  _internal_metadata_.Clear<std::string>();
}

const char* TelemetryMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string correlation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_correlation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vehicle_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_vehicle_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.eTcuMessageType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::com::bosch::itrams_gen2e::eTcuMessageType>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.eTcuMessageSubType subtype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subtype(static_cast<::com::bosch::itrams_gen2e::eTcuMessageSubType>(val));
        } else goto handle_unusual;
        continue;
      // string priority = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_priority();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.eOperatingState operating_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operating_state(static_cast<::com::bosch::itrams_gen2e::eOperatingState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.eProvisioningState provisioning_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provisioning_state(static_cast<::com::bosch::itrams_gen2e::eProvisioningState>(val));
        } else goto handle_unusual;
        continue;
      // string version = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_stamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.TelemetryPayload telemetryPayload = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetrypayload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 packetType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          packettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bosch.itrams_gen2e.TelemetryMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // string correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_correlation_id().data(), static_cast<int>(this->_internal_correlation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.correlation_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_correlation_id(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_id(), target);
  }

  // string vehicle_id = 5;
  if (this->vehicle_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vehicle_id().data(), static_cast<int>(this->_internal_vehicle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.vehicle_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_vehicle_id(), target);
  }

  // .com.bosch.itrams_gen2e.eTcuMessageType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // .com.bosch.itrams_gen2e.eTcuMessageSubType subtype = 7;
  if (this->subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_subtype(), target);
  }

  // string priority = 8;
  if (this->priority().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_priority().data(), static_cast<int>(this->_internal_priority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.priority");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_priority(), target);
  }

  // .com.bosch.itrams_gen2e.eOperatingState operating_state = 9;
  if (this->operating_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_operating_state(), target);
  }

  // .com.bosch.itrams_gen2e.eProvisioningState provisioning_state = 10;
  if (this->provisioning_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_provisioning_state(), target);
  }

  // string version = 11;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.bosch.itrams_gen2e.TelemetryMessage.version");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_version(), target);
  }

  // .google.protobuf.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::time_stamp(this), target, stream);
  }

  // .com.bosch.itrams_gen2e.TelemetryPayload telemetryPayload = 13;
  if (this->has_telemetrypayload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::telemetrypayload(this), target, stream);
  }

  // int32 packetType = 14;
  if (this->packettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_packettype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bosch.itrams_gen2e.TelemetryMessage)
  return target;
}

size_t TelemetryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bosch.itrams_gen2e.TelemetryMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string correlation_id = 3;
  if (this->correlation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_correlation_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string vehicle_id = 5;
  if (this->vehicle_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vehicle_id());
  }

  // string priority = 8;
  if (this->priority().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_priority());
  }

  // string version = 11;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Timestamp time_stamp = 12;
  if (this->has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_stamp_);
  }

  // .com.bosch.itrams_gen2e.TelemetryPayload telemetryPayload = 13;
  if (this->has_telemetrypayload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetrypayload_);
  }

  // .com.bosch.itrams_gen2e.eTcuMessageType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .com.bosch.itrams_gen2e.eTcuMessageSubType subtype = 7;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subtype());
  }

  // .com.bosch.itrams_gen2e.eOperatingState operating_state = 9;
  if (this->operating_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operating_state());
  }

  // .com.bosch.itrams_gen2e.eProvisioningState provisioning_state = 10;
  if (this->provisioning_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provisioning_state());
  }

  // int32 packetType = 14;
  if (this->packettype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_packettype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TelemetryMessage*>(
      &from));
}

void TelemetryMessage::MergeFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bosch.itrams_gen2e.TelemetryMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.correlation_id().size() > 0) {
    _internal_set_correlation_id(from._internal_correlation_id());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.vehicle_id().size() > 0) {
    _internal_set_vehicle_id(from._internal_vehicle_id());
  }
  if (from.priority().size() > 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_time_stamp()) {
    _internal_mutable_time_stamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_stamp());
  }
  if (from.has_telemetrypayload()) {
    _internal_mutable_telemetrypayload()->::com::bosch::itrams_gen2e::TelemetryPayload::MergeFrom(from._internal_telemetrypayload());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (from.operating_state() != 0) {
    _internal_set_operating_state(from._internal_operating_state());
  }
  if (from.provisioning_state() != 0) {
    _internal_set_provisioning_state(from._internal_provisioning_state());
  }
  if (from.packettype() != 0) {
    _internal_set_packettype(from._internal_packettype());
  }
}

void TelemetryMessage::CopyFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bosch.itrams_gen2e.TelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage::IsInitialized() const {
  return true;
}

void TelemetryMessage::InternalSwap(TelemetryMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  correlation_id_.Swap(&other->correlation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vehicle_id_.Swap(&other->vehicle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  priority_.Swap(&other->priority_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage, packettype_)
      + sizeof(TelemetryMessage::packettype_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

std::string TelemetryMessage::GetTypeName() const {
  return "com.bosch.itrams_gen2e.TelemetryMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::bosch::itrams_gen2e::TelemetryMessage* Arena::CreateMaybeMessage< ::com::bosch::itrams_gen2e::TelemetryMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bosch::itrams_gen2e::TelemetryMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
