// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace bosch {
namespace itrams_gen2e {
class TelemetryReading;
class TelemetryReadingDefaultTypeInternal;
extern TelemetryReadingDefaultTypeInternal _TelemetryReading_default_instance_;
}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::bosch::itrams_gen2e::TelemetryReading* Arena::CreateMaybeMessage<::com::bosch::itrams_gen2e::TelemetryReading>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace bosch {
namespace itrams_gen2e {

enum eOperatingState : int {
  normal = 0,
  closure = 1,
  offline = 2,
  eOperatingState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eOperatingState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eOperatingState_IsValid(int value);
constexpr eOperatingState eOperatingState_MIN = normal;
constexpr eOperatingState eOperatingState_MAX = offline;
constexpr int eOperatingState_ARRAYSIZE = eOperatingState_MAX + 1;

const std::string& eOperatingState_Name(eOperatingState value);
template<typename T>
inline const std::string& eOperatingState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eOperatingState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eOperatingState_Name.");
  return eOperatingState_Name(static_cast<eOperatingState>(enum_t_value));
}
bool eOperatingState_Parse(
    const std::string& name, eOperatingState* value);
enum eProvisioningState : int {
  factory = 0,
  provisioned = 1,
  authorized = 2,
  eProvisioningState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eProvisioningState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eProvisioningState_IsValid(int value);
constexpr eProvisioningState eProvisioningState_MIN = factory;
constexpr eProvisioningState eProvisioningState_MAX = authorized;
constexpr int eProvisioningState_ARRAYSIZE = eProvisioningState_MAX + 1;

const std::string& eProvisioningState_Name(eProvisioningState value);
template<typename T>
inline const std::string& eProvisioningState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eProvisioningState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eProvisioningState_Name.");
  return eProvisioningState_Name(static_cast<eProvisioningState>(enum_t_value));
}
bool eProvisioningState_Parse(
    const std::string& name, eProvisioningState* value);
enum eTcuMessageType : int {
  telemetry = 0,
  chargingTelemetry = 1,
  vehicleHealth = 2,
  diagnostics = 3,
  alert = 4,
  vehicleEvent = 5,
  commandResponse = 6,
  command = 7,
  canData = 8,
  fileUpload = 9,
  vehicleStateOfHealth = 10,
  fileUploadRequest = 11,
  fileUploadResponse = 12,
  fileUploadStatus = 13,
  fileUploadAck = 14,
  request = 15,
  response = 16,
  pvgenericCAN = 17,
  pvdiagnosticCAN = 18,
  pvDTCCAN = 19,
  eTcuMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eTcuMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eTcuMessageType_IsValid(int value);
constexpr eTcuMessageType eTcuMessageType_MIN = telemetry;
constexpr eTcuMessageType eTcuMessageType_MAX = pvDTCCAN;
constexpr int eTcuMessageType_ARRAYSIZE = eTcuMessageType_MAX + 1;

const std::string& eTcuMessageType_Name(eTcuMessageType value);
template<typename T>
inline const std::string& eTcuMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eTcuMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eTcuMessageType_Name.");
  return eTcuMessageType_Name(static_cast<eTcuMessageType>(enum_t_value));
}
bool eTcuMessageType_Parse(
    const std::string& name, eTcuMessageType* value);
enum IgnitionOn : int {
  ignitionOff = 0,
  ignitionOn = 1,
  Reserve31 = 2,
  Reserve32 = 3,
  ignitionDefault = 4,
  IgnitionOn_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IgnitionOn_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IgnitionOn_IsValid(int value);
constexpr IgnitionOn IgnitionOn_MIN = ignitionOff;
constexpr IgnitionOn IgnitionOn_MAX = ignitionDefault;
constexpr int IgnitionOn_ARRAYSIZE = IgnitionOn_MAX + 1;

const std::string& IgnitionOn_Name(IgnitionOn value);
template<typename T>
inline const std::string& IgnitionOn_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IgnitionOn>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IgnitionOn_Name.");
  return IgnitionOn_Name(static_cast<IgnitionOn>(enum_t_value));
}
bool IgnitionOn_Parse(
    const std::string& name, IgnitionOn* value);
enum CrankOn : int {
  crankOff = 0,
  crankOn = 1,
  Reserve33 = 2,
  Reserve34 = 3,
  crankDefault = 4,
  CrankOn_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CrankOn_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CrankOn_IsValid(int value);
constexpr CrankOn CrankOn_MIN = crankOff;
constexpr CrankOn CrankOn_MAX = crankDefault;
constexpr int CrankOn_ARRAYSIZE = CrankOn_MAX + 1;

const std::string& CrankOn_Name(CrankOn value);
template<typename T>
inline const std::string& CrankOn_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CrankOn>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CrankOn_Name.");
  return CrankOn_Name(static_cast<CrankOn>(enum_t_value));
}
bool CrankOn_Parse(
    const std::string& name, CrankOn* value);
enum SteeringDirection : int {
  SteeringDirectionClockwise = 0,
  SteeringDirectionAnticlockwise = 1,
  Reserve107 = 2,
  Reserver108 = 3,
  SteeringDirectionDefault = 4,
  SteeringDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SteeringDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SteeringDirection_IsValid(int value);
constexpr SteeringDirection SteeringDirection_MIN = SteeringDirectionClockwise;
constexpr SteeringDirection SteeringDirection_MAX = SteeringDirectionDefault;
constexpr int SteeringDirection_ARRAYSIZE = SteeringDirection_MAX + 1;

const std::string& SteeringDirection_Name(SteeringDirection value);
template<typename T>
inline const std::string& SteeringDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SteeringDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SteeringDirection_Name.");
  return SteeringDirection_Name(static_cast<SteeringDirection>(enum_t_value));
}
bool SteeringDirection_Parse(
    const std::string& name, SteeringDirection* value);
enum EVGearState : int {
  gsdNeutral = 0,
  gsdSport = 1,
  gsdReverse = 2,
  gsdForwardDrive = 3,
  gsdLosMode = 4,
  gsdPark = 5,
  Reserve5 = 6,
  Reserve6 = 7,
  gsdDefault = 8,
  EVGearState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EVGearState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EVGearState_IsValid(int value);
constexpr EVGearState EVGearState_MIN = gsdNeutral;
constexpr EVGearState EVGearState_MAX = gsdDefault;
constexpr int EVGearState_ARRAYSIZE = EVGearState_MAX + 1;

const std::string& EVGearState_Name(EVGearState value);
template<typename T>
inline const std::string& EVGearState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EVGearState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EVGearState_Name.");
  return EVGearState_Name(static_cast<EVGearState>(enum_t_value));
}
bool EVGearState_Parse(
    const std::string& name, EVGearState* value);
enum VCUPowerMode : int {
  vpmAwake = 0,
  vpmActive = 1,
  vpmCrank = 2,
  vpmNormalRun = 3,
  vpmEnergyRecuperation = 4,
  vpmChargingMode = 5,
  vpmLimitedPowerMode = 6,
  reserveVCU1 = 7,
  reserveVCU2 = 8,
  vpmDefault = 9,
  VCUPowerMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VCUPowerMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VCUPowerMode_IsValid(int value);
constexpr VCUPowerMode VCUPowerMode_MIN = vpmAwake;
constexpr VCUPowerMode VCUPowerMode_MAX = vpmDefault;
constexpr int VCUPowerMode_ARRAYSIZE = VCUPowerMode_MAX + 1;

const std::string& VCUPowerMode_Name(VCUPowerMode value);
template<typename T>
inline const std::string& VCUPowerMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VCUPowerMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VCUPowerMode_Name.");
  return VCUPowerMode_Name(static_cast<VCUPowerMode>(enum_t_value));
}
bool VCUPowerMode_Parse(
    const std::string& name, VCUPowerMode* value);
enum GearState : int {
  gsNeutral = 0,
  gsFirstGear = 1,
  gsSecondGear = 2,
  gsThirdGear = 3,
  gsFourthGear = 4,
  gsFifthGear = 5,
  gsSixthGear = 6,
  gsReverseGear = 7,
  gsSeventhGear = 8,
  Reserve3 = 9,
  Reserve4 = 10,
  gsInvalid = 14,
  gsFault = 15,
  gsDefault = 16,
  GearState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GearState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GearState_IsValid(int value);
constexpr GearState GearState_MIN = gsNeutral;
constexpr GearState GearState_MAX = gsDefault;
constexpr int GearState_ARRAYSIZE = GearState_MAX + 1;

const std::string& GearState_Name(GearState value);
template<typename T>
inline const std::string& GearState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GearState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GearState_Name.");
  return GearState_Name(static_cast<GearState>(enum_t_value));
}
bool GearState_Parse(
    const std::string& name, GearState* value);
enum BlowerSpeed : int {
  gsdSpeed0 = 0,
  gsdSpeed1 = 1,
  gsdSpeed2 = 2,
  gsdSpeed3 = 3,
  gsdSpeed4 = 4,
  gsdSpeed5 = 5,
  gsdSpeed6 = 6,
  gsdSpeed7 = 7,
  Reserve13 = 8,
  Reserve14 = 9,
  gsdSpeedDefault = 10,
  BlowerSpeed_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlowerSpeed_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlowerSpeed_IsValid(int value);
constexpr BlowerSpeed BlowerSpeed_MIN = gsdSpeed0;
constexpr BlowerSpeed BlowerSpeed_MAX = gsdSpeedDefault;
constexpr int BlowerSpeed_ARRAYSIZE = BlowerSpeed_MAX + 1;

const std::string& BlowerSpeed_Name(BlowerSpeed value);
template<typename T>
inline const std::string& BlowerSpeed_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlowerSpeed>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlowerSpeed_Name.");
  return BlowerSpeed_Name(static_cast<BlowerSpeed>(enum_t_value));
}
bool BlowerSpeed_Parse(
    const std::string& name, BlowerSpeed* value);
enum VehicleDriveMode : int {
  vDriveCity = 0,
  vDriveSport = 1,
  vDriveEco = 2,
  vDriveRough = 3,
  vDriveGrassSnow = 4,
  vDriveMudGravel = 5,
  vDriveSand = 6,
  vDriveWet = 7,
  Reserve29 = 8,
  Reserve30 = 9,
  vDriveDefault = 10,
  VehicleDriveMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleDriveMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleDriveMode_IsValid(int value);
constexpr VehicleDriveMode VehicleDriveMode_MIN = vDriveCity;
constexpr VehicleDriveMode VehicleDriveMode_MAX = vDriveDefault;
constexpr int VehicleDriveMode_ARRAYSIZE = VehicleDriveMode_MAX + 1;

const std::string& VehicleDriveMode_Name(VehicleDriveMode value);
template<typename T>
inline const std::string& VehicleDriveMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleDriveMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleDriveMode_Name.");
  return VehicleDriveMode_Name(static_cast<VehicleDriveMode>(enum_t_value));
}
bool VehicleDriveMode_Parse(
    const std::string& name, VehicleDriveMode* value);
enum ClutchState : int {
  ClutchNotPressed = 0,
  ClutchHalfPressed = 1,
  ClutchFullPressed = 2,
  Reserve = 3,
  ClutchStateDefault = 4,
  ClutchState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClutchState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClutchState_IsValid(int value);
constexpr ClutchState ClutchState_MIN = ClutchNotPressed;
constexpr ClutchState ClutchState_MAX = ClutchStateDefault;
constexpr int ClutchState_ARRAYSIZE = ClutchState_MAX + 1;

const std::string& ClutchState_Name(ClutchState value);
template<typename T>
inline const std::string& ClutchState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClutchState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClutchState_Name.");
  return ClutchState_Name(static_cast<ClutchState>(enum_t_value));
}
bool ClutchState_Parse(
    const std::string& name, ClutchState* value);
enum AcState : int {
  AcOff = 0,
  AcOn = 1,
  Reserve105 = 2,
  Reserve106 = 3,
  AcStateDefault = 4,
  AcState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcState_IsValid(int value);
constexpr AcState AcState_MIN = AcOff;
constexpr AcState AcState_MAX = AcStateDefault;
constexpr int AcState_ARRAYSIZE = AcState_MAX + 1;

const std::string& AcState_Name(AcState value);
template<typename T>
inline const std::string& AcState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcState_Name.");
  return AcState_Name(static_cast<AcState>(enum_t_value));
}
bool AcState_Parse(
    const std::string& name, AcState* value);
enum GPsFixStatus : int {
  GpsNoFix = 0,
  Gps2dFIx = 1,
  Gps3dFix = 2,
  GpsFixStatusDefault = 5,
  GPsFixStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GPsFixStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GPsFixStatus_IsValid(int value);
constexpr GPsFixStatus GPsFixStatus_MIN = GpsNoFix;
constexpr GPsFixStatus GPsFixStatus_MAX = GpsFixStatusDefault;
constexpr int GPsFixStatus_ARRAYSIZE = GPsFixStatus_MAX + 1;

const std::string& GPsFixStatus_Name(GPsFixStatus value);
template<typename T>
inline const std::string& GPsFixStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GPsFixStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GPsFixStatus_Name.");
  return GPsFixStatus_Name(static_cast<GPsFixStatus>(enum_t_value));
}
bool GPsFixStatus_Parse(
    const std::string& name, GPsFixStatus* value);
enum PowerModeState : int {
  PreStandBy = 0,
  Awake = 1,
  TransportPark = 2,
  KeyIn = 3,
  Accessory = 4,
  AccessoryDelay = 5,
  Ignition = 6,
  TransportDrive = 7,
  Run = 8,
  Crank = 9,
  TransportCrank = 10,
  TransportRun = 11,
  PowerModeStateDefault = 16,
  PowerModeState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PowerModeState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PowerModeState_IsValid(int value);
constexpr PowerModeState PowerModeState_MIN = PreStandBy;
constexpr PowerModeState PowerModeState_MAX = PowerModeStateDefault;
constexpr int PowerModeState_ARRAYSIZE = PowerModeState_MAX + 1;

const std::string& PowerModeState_Name(PowerModeState value);
template<typename T>
inline const std::string& PowerModeState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerModeState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerModeState_Name.");
  return PowerModeState_Name(static_cast<PowerModeState>(enum_t_value));
}
bool PowerModeState_Parse(
    const std::string& name, PowerModeState* value);
enum HornState : int {
  HornNotActive = 0,
  HornActive = 1,
  HornStateDefault = 4,
  HornState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HornState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HornState_IsValid(int value);
constexpr HornState HornState_MIN = HornNotActive;
constexpr HornState HornState_MAX = HornStateDefault;
constexpr int HornState_ARRAYSIZE = HornState_MAX + 1;

const std::string& HornState_Name(HornState value);
template<typename T>
inline const std::string& HornState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HornState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HornState_Name.");
  return HornState_Name(static_cast<HornState>(enum_t_value));
}
bool HornState_Parse(
    const std::string& name, HornState* value);
enum HighBeamLampOnFlag : int {
  HighBeamLampOff = 0,
  HighBeamLampOn = 1,
  Reserve57 = 2,
  Reserve58 = 3,
  HighBeamLampOnDefault = 4,
  HighBeamLampOnFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HighBeamLampOnFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HighBeamLampOnFlag_IsValid(int value);
constexpr HighBeamLampOnFlag HighBeamLampOnFlag_MIN = HighBeamLampOff;
constexpr HighBeamLampOnFlag HighBeamLampOnFlag_MAX = HighBeamLampOnDefault;
constexpr int HighBeamLampOnFlag_ARRAYSIZE = HighBeamLampOnFlag_MAX + 1;

const std::string& HighBeamLampOnFlag_Name(HighBeamLampOnFlag value);
template<typename T>
inline const std::string& HighBeamLampOnFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HighBeamLampOnFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HighBeamLampOnFlag_Name.");
  return HighBeamLampOnFlag_Name(static_cast<HighBeamLampOnFlag>(enum_t_value));
}
bool HighBeamLampOnFlag_Parse(
    const std::string& name, HighBeamLampOnFlag* value);
enum LowBeamLampOnFlag : int {
  lowBeamLampOff = 0,
  lowBeamLampOn = 1,
  Reserve97 = 2,
  Reserve98 = 3,
  lowBeamLampOnDefault = 4,
  LowBeamLampOnFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LowBeamLampOnFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LowBeamLampOnFlag_IsValid(int value);
constexpr LowBeamLampOnFlag LowBeamLampOnFlag_MIN = lowBeamLampOff;
constexpr LowBeamLampOnFlag LowBeamLampOnFlag_MAX = lowBeamLampOnDefault;
constexpr int LowBeamLampOnFlag_ARRAYSIZE = LowBeamLampOnFlag_MAX + 1;

const std::string& LowBeamLampOnFlag_Name(LowBeamLampOnFlag value);
template<typename T>
inline const std::string& LowBeamLampOnFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LowBeamLampOnFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LowBeamLampOnFlag_Name.");
  return LowBeamLampOnFlag_Name(static_cast<LowBeamLampOnFlag>(enum_t_value));
}
bool LowBeamLampOnFlag_Parse(
    const std::string& name, LowBeamLampOnFlag* value);
enum VehicleARmState : int {
  VehicleNotArmed = 0,
  VehicleArmed = 1,
  VehicleARmStateDefault = 4,
  VehicleARmState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleARmState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleARmState_IsValid(int value);
constexpr VehicleARmState VehicleARmState_MIN = VehicleNotArmed;
constexpr VehicleARmState VehicleARmState_MAX = VehicleARmStateDefault;
constexpr int VehicleARmState_ARRAYSIZE = VehicleARmState_MAX + 1;

const std::string& VehicleARmState_Name(VehicleARmState value);
template<typename T>
inline const std::string& VehicleARmState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleARmState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleARmState_Name.");
  return VehicleARmState_Name(static_cast<VehicleARmState>(enum_t_value));
}
bool VehicleARmState_Parse(
    const std::string& name, VehicleARmState* value);
enum CabinCoolingSolValveState : int {
  CabinColSvOFF = 0,
  CabinColSvON = 2,
  CabinCoolingSolValveStateDefault = 4,
  CabinCoolingSolValveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CabinCoolingSolValveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CabinCoolingSolValveState_IsValid(int value);
constexpr CabinCoolingSolValveState CabinCoolingSolValveState_MIN = CabinColSvOFF;
constexpr CabinCoolingSolValveState CabinCoolingSolValveState_MAX = CabinCoolingSolValveStateDefault;
constexpr int CabinCoolingSolValveState_ARRAYSIZE = CabinCoolingSolValveState_MAX + 1;

const std::string& CabinCoolingSolValveState_Name(CabinCoolingSolValveState value);
template<typename T>
inline const std::string& CabinCoolingSolValveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CabinCoolingSolValveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CabinCoolingSolValveState_Name.");
  return CabinCoolingSolValveState_Name(static_cast<CabinCoolingSolValveState>(enum_t_value));
}
bool CabinCoolingSolValveState_Parse(
    const std::string& name, CabinCoolingSolValveState* value);
enum AcReqDrvr : int {
  AcNotRequested = 0,
  AcRequested = 1,
  AcReqDrvrDefault = 4,
  AcReqDrvr_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcReqDrvr_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcReqDrvr_IsValid(int value);
constexpr AcReqDrvr AcReqDrvr_MIN = AcNotRequested;
constexpr AcReqDrvr AcReqDrvr_MAX = AcReqDrvrDefault;
constexpr int AcReqDrvr_ARRAYSIZE = AcReqDrvr_MAX + 1;

const std::string& AcReqDrvr_Name(AcReqDrvr value);
template<typename T>
inline const std::string& AcReqDrvr_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcReqDrvr>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcReqDrvr_Name.");
  return AcReqDrvr_Name(static_cast<AcReqDrvr>(enum_t_value));
}
bool AcReqDrvr_Parse(
    const std::string& name, AcReqDrvr* value);
enum AcSetTemperature : int {
  Ac_LO = 0,
  Ac_16_Deg_C = 1,
  Ac_16_5_Deg_C = 2,
  Ac_17_Deg_C = 3,
  Ac_17_5_Deg_C = 4,
  Ac_18_Deg_C = 5,
  Ac_18_5_Deg_C = 6,
  Ac_19_Deg_C = 7,
  Ac_19_5_Deg_C = 8,
  Ac_20_Deg_C = 9,
  Ac_20_5_Deg_C = 10,
  Ac_21_Deg_C = 11,
  Ac_21_5_Deg_C = 12,
  Ac_22_Deg_C = 13,
  Ac_22_5_Deg_C = 14,
  Ac_23_Deg_C = 15,
  Ac_23_5_Deg_C = 16,
  Ac_24_Deg_C = 17,
  Ac_24_5_Deg_C = 18,
  Ac_25_Deg_C = 19,
  Ac_25_5_Deg_C = 20,
  Ac_26_Deg_C = 21,
  Ac_26_5_Deg_C = 22,
  Ac_27_Deg_C = 23,
  Ac_27_5_Deg_C = 24,
  Ac_28_Deg_C = 25,
  Ac_28_5_Deg_C = 26,
  Ac_29_Deg_C = 27,
  Ac_29_5_Deg_C = 28,
  Ac_30_Deg_C = 29,
  Ac_HI = 30,
  AcSetTemperatureDefault = 35,
  AcSetTemperature_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcSetTemperature_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcSetTemperature_IsValid(int value);
constexpr AcSetTemperature AcSetTemperature_MIN = Ac_LO;
constexpr AcSetTemperature AcSetTemperature_MAX = AcSetTemperatureDefault;
constexpr int AcSetTemperature_ARRAYSIZE = AcSetTemperature_MAX + 1;

const std::string& AcSetTemperature_Name(AcSetTemperature value);
template<typename T>
inline const std::string& AcSetTemperature_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcSetTemperature>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcSetTemperature_Name.");
  return AcSetTemperature_Name(static_cast<AcSetTemperature>(enum_t_value));
}
bool AcSetTemperature_Parse(
    const std::string& name, AcSetTemperature* value);
enum BatteryCoolingSolValveState : int {
  BatteryColSvOFF = 0,
  BatteryColSvON = 2,
  BatteryColSolValveStateDefault = 4,
  BatteryCoolingSolValveState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BatteryCoolingSolValveState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BatteryCoolingSolValveState_IsValid(int value);
constexpr BatteryCoolingSolValveState BatteryCoolingSolValveState_MIN = BatteryColSvOFF;
constexpr BatteryCoolingSolValveState BatteryCoolingSolValveState_MAX = BatteryColSolValveStateDefault;
constexpr int BatteryCoolingSolValveState_ARRAYSIZE = BatteryCoolingSolValveState_MAX + 1;

const std::string& BatteryCoolingSolValveState_Name(BatteryCoolingSolValveState value);
template<typename T>
inline const std::string& BatteryCoolingSolValveState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteryCoolingSolValveState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteryCoolingSolValveState_Name.");
  return BatteryCoolingSolValveState_Name(static_cast<BatteryCoolingSolValveState>(enum_t_value));
}
bool BatteryCoolingSolValveState_Parse(
    const std::string& name, BatteryCoolingSolValveState* value);
enum BrakePressState : int {
  BrakePressed = 0,
  BrakeNotPressed = 1,
  Reserve35 = 2,
  Reserve36 = 3,
  BrakeStateDefault = 4,
  BrakePressState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BrakePressState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BrakePressState_IsValid(int value);
constexpr BrakePressState BrakePressState_MIN = BrakePressed;
constexpr BrakePressState BrakePressState_MAX = BrakeStateDefault;
constexpr int BrakePressState_ARRAYSIZE = BrakePressState_MAX + 1;

const std::string& BrakePressState_Name(BrakePressState value);
template<typename T>
inline const std::string& BrakePressState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BrakePressState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BrakePressState_Name.");
  return BrakePressState_Name(static_cast<BrakePressState>(enum_t_value));
}
bool BrakePressState_Parse(
    const std::string& name, BrakePressState* value);
enum ParkBrakePressStateFlag : int {
  ParkBrakeNotPressed = 0,
  ParkBrakePressed = 1,
  Reserve85 = 2,
  Reserve86 = 3,
  ParkBrakePressStateDefault = 4,
  ParkBrakePressStateFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParkBrakePressStateFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParkBrakePressStateFlag_IsValid(int value);
constexpr ParkBrakePressStateFlag ParkBrakePressStateFlag_MIN = ParkBrakeNotPressed;
constexpr ParkBrakePressStateFlag ParkBrakePressStateFlag_MAX = ParkBrakePressStateDefault;
constexpr int ParkBrakePressStateFlag_ARRAYSIZE = ParkBrakePressStateFlag_MAX + 1;

const std::string& ParkBrakePressStateFlag_Name(ParkBrakePressStateFlag value);
template<typename T>
inline const std::string& ParkBrakePressStateFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParkBrakePressStateFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParkBrakePressStateFlag_Name.");
  return ParkBrakePressStateFlag_Name(static_cast<ParkBrakePressStateFlag>(enum_t_value));
}
bool ParkBrakePressStateFlag_Parse(
    const std::string& name, ParkBrakePressStateFlag* value);
enum DriverSeatBeltFlag : int {
  DriverSeatBeltBuckled = 0,
  DriverSeatBeltUnbuckled = 1,
  Reserve87 = 2,
  Reserve88 = 3,
  DriverSeatBeltDefault = 4,
  DriverSeatBeltFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DriverSeatBeltFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DriverSeatBeltFlag_IsValid(int value);
constexpr DriverSeatBeltFlag DriverSeatBeltFlag_MIN = DriverSeatBeltBuckled;
constexpr DriverSeatBeltFlag DriverSeatBeltFlag_MAX = DriverSeatBeltDefault;
constexpr int DriverSeatBeltFlag_ARRAYSIZE = DriverSeatBeltFlag_MAX + 1;

const std::string& DriverSeatBeltFlag_Name(DriverSeatBeltFlag value);
template<typename T>
inline const std::string& DriverSeatBeltFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DriverSeatBeltFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DriverSeatBeltFlag_Name.");
  return DriverSeatBeltFlag_Name(static_cast<DriverSeatBeltFlag>(enum_t_value));
}
bool DriverSeatBeltFlag_Parse(
    const std::string& name, DriverSeatBeltFlag* value);
enum CoDriverSeatBeltFlag : int {
  CoDriverSeatBeltBuckled = 0,
  CoDriverSeatBeltUnbuckled = 1,
  Reserve89 = 2,
  Reserve90 = 3,
  CoDriverSeatBeltDefault = 4,
  CoDriverSeatBeltFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CoDriverSeatBeltFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CoDriverSeatBeltFlag_IsValid(int value);
constexpr CoDriverSeatBeltFlag CoDriverSeatBeltFlag_MIN = CoDriverSeatBeltBuckled;
constexpr CoDriverSeatBeltFlag CoDriverSeatBeltFlag_MAX = CoDriverSeatBeltDefault;
constexpr int CoDriverSeatBeltFlag_ARRAYSIZE = CoDriverSeatBeltFlag_MAX + 1;

const std::string& CoDriverSeatBeltFlag_Name(CoDriverSeatBeltFlag value);
template<typename T>
inline const std::string& CoDriverSeatBeltFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CoDriverSeatBeltFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CoDriverSeatBeltFlag_Name.");
  return CoDriverSeatBeltFlag_Name(static_cast<CoDriverSeatBeltFlag>(enum_t_value));
}
bool CoDriverSeatBeltFlag_Parse(
    const std::string& name, CoDriverSeatBeltFlag* value);
enum CruiseControlStatus : int {
  CruiseDisabled = 0,
  CruiseEnabledActive = 1,
  CruiseEnabledInactive = 2,
  CrusieNotPresent = 3,
  CruiseControlStatusDefault = 6,
  CruiseControlStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CruiseControlStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CruiseControlStatus_IsValid(int value);
constexpr CruiseControlStatus CruiseControlStatus_MIN = CruiseDisabled;
constexpr CruiseControlStatus CruiseControlStatus_MAX = CruiseControlStatusDefault;
constexpr int CruiseControlStatus_ARRAYSIZE = CruiseControlStatus_MAX + 1;

const std::string& CruiseControlStatus_Name(CruiseControlStatus value);
template<typename T>
inline const std::string& CruiseControlStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CruiseControlStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CruiseControlStatus_Name.");
  return CruiseControlStatus_Name(static_cast<CruiseControlStatus>(enum_t_value));
}
bool CruiseControlStatus_Parse(
    const std::string& name, CruiseControlStatus* value);
enum DRlState : int {
  DRlOff = 0,
  DRlOn = 1,
  DRlStateDefault = 4,
  DRlState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DRlState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DRlState_IsValid(int value);
constexpr DRlState DRlState_MIN = DRlOff;
constexpr DRlState DRlState_MAX = DRlStateDefault;
constexpr int DRlState_ARRAYSIZE = DRlState_MAX + 1;

const std::string& DRlState_Name(DRlState value);
template<typename T>
inline const std::string& DRlState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DRlState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DRlState_Name.");
  return DRlState_Name(static_cast<DRlState>(enum_t_value));
}
bool DRlState_Parse(
    const std::string& name, DRlState* value);
enum WiperState : int {
  WiperOff = 0,
  WiperOn = 1,
  WiperStateDefault = 4,
  WiperState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WiperState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WiperState_IsValid(int value);
constexpr WiperState WiperState_MIN = WiperOff;
constexpr WiperState WiperState_MAX = WiperStateDefault;
constexpr int WiperState_ARRAYSIZE = WiperState_MAX + 1;

const std::string& WiperState_Name(WiperState value);
template<typename T>
inline const std::string& WiperState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WiperState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WiperState_Name.");
  return WiperState_Name(static_cast<WiperState>(enum_t_value));
}
bool WiperState_Parse(
    const std::string& name, WiperState* value);
enum BiFuelMode : int {
  Gasoline = 0,
  CNG = 1,
  BiFuelModeDefault = 4,
  BiFuelMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BiFuelMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BiFuelMode_IsValid(int value);
constexpr BiFuelMode BiFuelMode_MIN = Gasoline;
constexpr BiFuelMode BiFuelMode_MAX = BiFuelModeDefault;
constexpr int BiFuelMode_ARRAYSIZE = BiFuelMode_MAX + 1;

const std::string& BiFuelMode_Name(BiFuelMode value);
template<typename T>
inline const std::string& BiFuelMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BiFuelMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BiFuelMode_Name.");
  return BiFuelMode_Name(static_cast<BiFuelMode>(enum_t_value));
}
bool BiFuelMode_Parse(
    const std::string& name, BiFuelMode* value);
enum AcMode : int {
  Manual = 0,
  Auto = 1,
  Economy = 2,
  AcModeDefault = 4,
  AcMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AcMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AcMode_IsValid(int value);
constexpr AcMode AcMode_MIN = Manual;
constexpr AcMode AcMode_MAX = AcModeDefault;
constexpr int AcMode_ARRAYSIZE = AcMode_MAX + 1;

const std::string& AcMode_Name(AcMode value);
template<typename T>
inline const std::string& AcMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AcMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AcMode_Name.");
  return AcMode_Name(static_cast<AcMode>(enum_t_value));
}
bool AcMode_Parse(
    const std::string& name, AcMode* value);
enum LeftFrontDoorOpenFlag : int {
  LeftFrontDoorClosed = 0,
  LeftFrontDoorOpen = 1,
  Reserve45 = 2,
  Reserve46 = 3,
  LeftFrontDoorOpenDefault = 4,
  LeftFrontDoorOpenFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LeftFrontDoorOpenFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LeftFrontDoorOpenFlag_IsValid(int value);
constexpr LeftFrontDoorOpenFlag LeftFrontDoorOpenFlag_MIN = LeftFrontDoorClosed;
constexpr LeftFrontDoorOpenFlag LeftFrontDoorOpenFlag_MAX = LeftFrontDoorOpenDefault;
constexpr int LeftFrontDoorOpenFlag_ARRAYSIZE = LeftFrontDoorOpenFlag_MAX + 1;

const std::string& LeftFrontDoorOpenFlag_Name(LeftFrontDoorOpenFlag value);
template<typename T>
inline const std::string& LeftFrontDoorOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LeftFrontDoorOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LeftFrontDoorOpenFlag_Name.");
  return LeftFrontDoorOpenFlag_Name(static_cast<LeftFrontDoorOpenFlag>(enum_t_value));
}
bool LeftFrontDoorOpenFlag_Parse(
    const std::string& name, LeftFrontDoorOpenFlag* value);
enum RightFrontDoorOpenFlag : int {
  RightFrontDoorClosed = 0,
  RightFrontDoorOpen = 1,
  Reserve47 = 2,
  Reserve48 = 3,
  RightFrontDoorOpenDefault = 4,
  RightFrontDoorOpenFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RightFrontDoorOpenFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RightFrontDoorOpenFlag_IsValid(int value);
constexpr RightFrontDoorOpenFlag RightFrontDoorOpenFlag_MIN = RightFrontDoorClosed;
constexpr RightFrontDoorOpenFlag RightFrontDoorOpenFlag_MAX = RightFrontDoorOpenDefault;
constexpr int RightFrontDoorOpenFlag_ARRAYSIZE = RightFrontDoorOpenFlag_MAX + 1;

const std::string& RightFrontDoorOpenFlag_Name(RightFrontDoorOpenFlag value);
template<typename T>
inline const std::string& RightFrontDoorOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RightFrontDoorOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RightFrontDoorOpenFlag_Name.");
  return RightFrontDoorOpenFlag_Name(static_cast<RightFrontDoorOpenFlag>(enum_t_value));
}
bool RightFrontDoorOpenFlag_Parse(
    const std::string& name, RightFrontDoorOpenFlag* value);
enum LeftRearDoorOpenFlag : int {
  LeftRearDoorClosed = 0,
  LeftRearDoorOpen = 1,
  Reserve49 = 2,
  Reserve50 = 3,
  LeftRearDoorOpenDefault = 4,
  LeftRearDoorOpenFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LeftRearDoorOpenFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LeftRearDoorOpenFlag_IsValid(int value);
constexpr LeftRearDoorOpenFlag LeftRearDoorOpenFlag_MIN = LeftRearDoorClosed;
constexpr LeftRearDoorOpenFlag LeftRearDoorOpenFlag_MAX = LeftRearDoorOpenDefault;
constexpr int LeftRearDoorOpenFlag_ARRAYSIZE = LeftRearDoorOpenFlag_MAX + 1;

const std::string& LeftRearDoorOpenFlag_Name(LeftRearDoorOpenFlag value);
template<typename T>
inline const std::string& LeftRearDoorOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LeftRearDoorOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LeftRearDoorOpenFlag_Name.");
  return LeftRearDoorOpenFlag_Name(static_cast<LeftRearDoorOpenFlag>(enum_t_value));
}
bool LeftRearDoorOpenFlag_Parse(
    const std::string& name, LeftRearDoorOpenFlag* value);
enum RightRearDoorOpenFlag : int {
  RightRearDoorClosed = 0,
  RightRearDoorOpen = 1,
  Reserve51 = 2,
  Reserve52 = 3,
  RightRearDoorOpenDefault = 4,
  RightRearDoorOpenFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RightRearDoorOpenFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RightRearDoorOpenFlag_IsValid(int value);
constexpr RightRearDoorOpenFlag RightRearDoorOpenFlag_MIN = RightRearDoorClosed;
constexpr RightRearDoorOpenFlag RightRearDoorOpenFlag_MAX = RightRearDoorOpenDefault;
constexpr int RightRearDoorOpenFlag_ARRAYSIZE = RightRearDoorOpenFlag_MAX + 1;

const std::string& RightRearDoorOpenFlag_Name(RightRearDoorOpenFlag value);
template<typename T>
inline const std::string& RightRearDoorOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RightRearDoorOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RightRearDoorOpenFlag_Name.");
  return RightRearDoorOpenFlag_Name(static_cast<RightRearDoorOpenFlag>(enum_t_value));
}
bool RightRearDoorOpenFlag_Parse(
    const std::string& name, RightRearDoorOpenFlag* value);
enum TailGateOpenFlag : int {
  TailGateClosed = 0,
  TailGateOpen = 1,
  Reserve53 = 2,
  Reserve54 = 3,
  TailGateOpenDefault = 4,
  TailGateOpenFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TailGateOpenFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TailGateOpenFlag_IsValid(int value);
constexpr TailGateOpenFlag TailGateOpenFlag_MIN = TailGateClosed;
constexpr TailGateOpenFlag TailGateOpenFlag_MAX = TailGateOpenDefault;
constexpr int TailGateOpenFlag_ARRAYSIZE = TailGateOpenFlag_MAX + 1;

const std::string& TailGateOpenFlag_Name(TailGateOpenFlag value);
template<typename T>
inline const std::string& TailGateOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TailGateOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TailGateOpenFlag_Name.");
  return TailGateOpenFlag_Name(static_cast<TailGateOpenFlag>(enum_t_value));
}
bool TailGateOpenFlag_Parse(
    const std::string& name, TailGateOpenFlag* value);
enum BonnetOpenFlag : int {
  BonnetClosed = 0,
  BonnetOpen = 1,
  Reserve59 = 2,
  Reserve60 = 3,
  BonnetOpenDefault = 4,
  BonnetOpenFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BonnetOpenFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BonnetOpenFlag_IsValid(int value);
constexpr BonnetOpenFlag BonnetOpenFlag_MIN = BonnetClosed;
constexpr BonnetOpenFlag BonnetOpenFlag_MAX = BonnetOpenDefault;
constexpr int BonnetOpenFlag_ARRAYSIZE = BonnetOpenFlag_MAX + 1;

const std::string& BonnetOpenFlag_Name(BonnetOpenFlag value);
template<typename T>
inline const std::string& BonnetOpenFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BonnetOpenFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BonnetOpenFlag_Name.");
  return BonnetOpenFlag_Name(static_cast<BonnetOpenFlag>(enum_t_value));
}
bool BonnetOpenFlag_Parse(
    const std::string& name, BonnetOpenFlag* value);
// ===================================================================

class TelemetryReading PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.bosch.itrams_gen2e.TelemetryReading) */ {
 public:
  inline TelemetryReading() : TelemetryReading(nullptr) {};
  virtual ~TelemetryReading();

  TelemetryReading(const TelemetryReading& from);
  TelemetryReading(TelemetryReading&& from) noexcept
    : TelemetryReading() {
    *this = ::std::move(from);
  }

  inline TelemetryReading& operator=(const TelemetryReading& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryReading& operator=(TelemetryReading&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TelemetryReading& default_instance();

  enum GpsLatPropertyCase {
    kGpsLat = 2,
    GPSLATPROPERTY_NOT_SET = 0,
  };

  enum GpsLongPropertyCase {
    kGpsLong = 3,
    GPSLONGPROPERTY_NOT_SET = 0,
  };

  enum GpsAltPropertyCase {
    kGpsAlt = 4,
    GPSALTPROPERTY_NOT_SET = 0,
  };

  enum GpsCourseAnglePropertyCase {
    kGpsCourseAngle = 5,
    GPSCOURSEANGLEPROPERTY_NOT_SET = 0,
  };

  enum AccelXPropertyCase {
    kAccelX = 6,
    ACCELXPROPERTY_NOT_SET = 0,
  };

  enum AccelYPropertyCase {
    kAccelY = 7,
    ACCELYPROPERTY_NOT_SET = 0,
  };

  enum AccelZPropertyCase {
    kAccelZ = 8,
    ACCELZPROPERTY_NOT_SET = 0,
  };

  enum GpsSignalQualityPropertyCase {
    kGpsSignalQuality = 9,
    GPSSIGNALQUALITYPROPERTY_NOT_SET = 0,
  };

  enum GpsAccuracyLatPropertyCase {
    kGpsAccuracyLat = 10,
    GPSACCURACYLATPROPERTY_NOT_SET = 0,
  };

  enum GpsAccuracyLongPropertyCase {
    kGpsAccuracyLong = 11,
    GPSACCURACYLONGPROPERTY_NOT_SET = 0,
  };

  enum GpsAccuracyAltPropertyCase {
    kGpsAccuracyAlt = 12,
    GPSACCURACYALTPROPERTY_NOT_SET = 0,
  };

  enum GsmSignalStrengthPropertyCase {
    kGsmSignalStrength = 13,
    GSMSIGNALSTRENGTHPROPERTY_NOT_SET = 0,
  };

  enum GsmMccPropertyCase {
    kGsmMcc = 14,
    GSMMCCPROPERTY_NOT_SET = 0,
  };

  enum GsmMncPropertyCase {
    kGsmMnc = 15,
    GSMMNCPROPERTY_NOT_SET = 0,
  };

  enum IgnitionOnPropertyCase {
    kIgnitionOn = 16,
    IGNITIONONPROPERTY_NOT_SET = 0,
  };

  enum CrankOnPropertyCase {
    kCrankOn = 17,
    CRANKONPROPERTY_NOT_SET = 0,
  };

  enum VehicleSpeedPropertyCase {
    kVehicleSpeed = 18,
    VEHICLESPEEDPROPERTY_NOT_SET = 0,
  };

  enum EngineRpmPropertyCase {
    kEngineRpm = 19,
    ENGINERPMPROPERTY_NOT_SET = 0,
  };

  enum SteeringAnglePropertyCase {
    kSteeringAngle = 20,
    STEERINGANGLEPROPERTY_NOT_SET = 0,
  };

  enum DistanceTravelledPropertyCase {
    kDistanceTravelled = 21,
    DISTANCETRAVELLEDPROPERTY_NOT_SET = 0,
  };

  enum OutsideAmbientTemperaturePropertyCase {
    kOutsideAmbientTemperature = 22,
    OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET = 0,
  };

  enum VehicleInteriorTemperaturePropertyCase {
    kVehicleInteriorTemperature = 23,
    VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET = 0,
  };

  enum SteeringDirectionPropertyCase {
    kSteeringDirection = 24,
    STEERINGDIRECTIONPROPERTY_NOT_SET = 0,
  };

  enum AcCompressorPressurePropertyCase {
    kAcCompressorPressure = 25,
    ACCOMPRESSORPRESSUREPROPERTY_NOT_SET = 0,
  };

  enum AcceleratorPedalPositionPropertyCase {
    kAcceleratorPedalPosition = 26,
    ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET = 0,
  };

  enum AtmosphericPressurePropertyCase {
    kAtmosphericPressure = 27,
    ATMOSPHERICPRESSUREPROPERTY_NOT_SET = 0,
  };

  enum TransmissionOilTemperaturePropertyCase {
    kTransmissionOilTemperature = 28,
    TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET = 0,
  };

  enum EvGearInfoPropertyCase {
    kEvGearInfo = 29,
    EVGEARINFOPROPERTY_NOT_SET = 0,
  };

  enum VcuPowerModePropertyCase {
    kVcuPowerMode = 30,
    VCUPOWERMODEPROPERTY_NOT_SET = 0,
  };

  enum GearInfoPropertyCase {
    kGearInfo = 31,
    GEAR_INFOPROPERTY_NOT_SET = 0,
  };

  enum FuelRemainingPropertyCase {
    kFuelRemaining = 32,
    FUELREMAININGPROPERTY_NOT_SET = 0,
  };

  enum CumulativeFuelConsumptionRatePropertyCase {
    kCumulativeFuelConsumptionRate = 33,
    CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET = 0,
  };

  enum EngineIdleSpeedTargetPropertyCase {
    kEngineIdleSpeedTarget = 34,
    ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET = 0,
  };

  enum EngineCoolantTemperaturePropertyCase {
    kEngineCoolantTemperature = 35,
    ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET = 0,
  };

  enum GyroscopeXPropertyCase {
    kGyroscopeX = 36,
    GYROSCOPEXPROPERTY_NOT_SET = 0,
  };

  enum GyroscopeYPropertyCase {
    kGyroscopeY = 37,
    GYROSCOPEYPROPERTY_NOT_SET = 0,
  };

  enum GyroscopeZPropertyCase {
    kGyroscopeZ = 38,
    GYROSCOPEZPROPERTY_NOT_SET = 0,
  };

  enum BlowerSpeedPropertyCase {
    kBlowerSpeed = 39,
    BLOWERSPEEDPROPERTY_NOT_SET = 0,
  };

  enum HvAmpHrPropertyCase {
    kHvAmpHr = 40,
    HVAMPHRPROPERTY_NOT_SET = 0,
  };

  enum HvAmpHrRegenPropertyCase {
    kHvAmpHrRegen = 41,
    HVAMPHRREGENPROPERTY_NOT_SET = 0,
  };

  enum HvBattMaxCellVoltagePropertyCase {
    kHvBattMaxCellVoltage = 42,
    HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET = 0,
  };

  enum HvBattMinCellVoltagePropertyCase {
    kHvBattMinCellVoltage = 43,
    HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET = 0,
  };

  enum HvBattMaxCellTempPropertyCase {
    kHvBattMaxCellTemp = 44,
    HVBATTMAXCELLTEMPPROPERTY_NOT_SET = 0,
  };

  enum HvBattMinCellTempPropertyCase {
    kHvBattMinCellTemp = 45,
    HVBATTMINCELLTEMPPROPERTY_NOT_SET = 0,
  };

  enum HvBattPackVoltagePropertyCase {
    kHvBattPackVoltage = 46,
    HVBATTPACKVOLTAGEPROPERTY_NOT_SET = 0,
  };

  enum BrkPressStatePropertyCase {
    kBrkPressState = 47,
    BRKPRESSSTATEPROPERTY_NOT_SET = 0,
  };

  enum VehicleSpeedTwoPropertyCase {
    kVehicleSpeedTwo = 48,
    VEHICLESPEEDTWOPROPERTY_NOT_SET = 0,
  };

  enum VehicleDriveModePropertyCase {
    kVehicleDriveMode = 49,
    VEHICLEDRIVEMODEPROPERTY_NOT_SET = 0,
  };

  enum ClutchStatePropertyCase {
    kClutchState = 50,
    CLUTCHSTATEPROPERTY_NOT_SET = 0,
  };

  enum AcStatePropertyCase {
    kAcState = 51,
    ACSTATEPROPERTY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryReading* internal_default_instance() {
    return reinterpret_cast<const TelemetryReading*>(
               &_TelemetryReading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TelemetryReading& a, TelemetryReading& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryReading* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryReading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryReading* New() const final {
    return CreateMaybeMessage<TelemetryReading>(nullptr);
  }

  TelemetryReading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryReading>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TelemetryReading& from);
  void MergeFrom(const TelemetryReading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TelemetryReading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.bosch.itrams_gen2e.TelemetryReading";
  }
  protected:
  explicit TelemetryReading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kGpsFixStatusFieldNumber = 52,
    kPowerModeStateFieldNumber = 53,
    kHornStateFieldNumber = 54,
    kHighBeamLampOnFlagFieldNumber = 55,
    kLowBeamLampOnFlagFieldNumber = 56,
    kLeftFrontDoorOpenFlagFieldNumber = 57,
    kRightFrontDoorOpenFlagFieldNumber = 58,
    kLeftRearDoorOpenFlagFieldNumber = 59,
    kRightRearDoorOpenFlagFieldNumber = 60,
    kTailGateOpenFlagFieldNumber = 61,
    kBonnetOpenFlagFieldNumber = 62,
    kVehicleARmStateFieldNumber = 63,
    kCabinCoolingSolValveStateFieldNumber = 64,
    kAcReqDrvrFieldNumber = 65,
    kCoolingPwrVCUFieldNumber = 66,
    kCoolingPwrFATCFieldNumber = 67,
    kHeatingPwrVCUFieldNumber = 68,
    kHeatingPwrFATCFieldNumber = 69,
    kAcCmprSpdFieldNumber = 70,
    kSolarLoadFieldNumber = 71,
    kAcSetTemperatureFieldNumber = 72,
    kBatteryCoolingSolValveStateFieldNumber = 73,
    kBrakePedalPosPercenFieldNumber = 74,
    kParkBrakeStateFieldNumber = 75,
    kElectricMotorTorqueFieldNumber = 76,
    kDriverSeatBeltFlagFieldNumber = 77,
    kCoDriverSeatBeltFlagFieldNumber = 78,
    kEnerConsumptionDriveFieldNumber = 79,
    kEnerConsumptionAuxFieldNumber = 80,
    kEnerConsumptionCoolingFieldNumber = 81,
    kRegenPowerConsumptionFieldNumber = 82,
    kCruiseControlStatusFieldNumber = 83,
    kCruiseControlSpeedFieldNumber = 84,
    kFuelLevelPercentageFieldNumber = 85,
    kEngineTorqueFieldNumber = 86,
    kDrlStateFieldNumber = 87,
    kWiperStateFieldNumber = 88,
    kInstantFEFieldNumber = 89,
    kThrottleBodyPositionFieldNumber = 90,
    kIntakeManifoldTempFieldNumber = 91,
    kBiFuelModeFieldNumber = 92,
    kHvBattSocPercentageFieldNumber = 93,
    kDistanceToEmptyFieldNumber = 94,
    kDistanceToEmptyNonEVFieldNumber = 95,
    kAcModeFieldNumber = 96,
    kElectricMotorCurrentFieldNumber = 97,
    kElectricMotorVoltageFieldNumber = 98,
    kElectricMotorSpeedFieldNumber = 99,
    kElectricMotorTemperatureFieldNumber = 100,
    kHvBattCurrentFieldNumber = 101,
    kHvBattKWhFieldNumber = 102,
    kDcDcOutputVolatgeFieldNumber = 103,
    kDcDcOutputCurrentFieldNumber = 104,
    kVehicleBatteryLevelFieldNumber = 105,
    kGpsLatFieldNumber = 2,
    kGpsLongFieldNumber = 3,
    kGpsAltFieldNumber = 4,
    kGpsCourseAngleFieldNumber = 5,
    kAccelXFieldNumber = 6,
    kAccelYFieldNumber = 7,
    kAccelZFieldNumber = 8,
    kGpsSignalQualityFieldNumber = 9,
    kGpsAccuracyLatFieldNumber = 10,
    kGpsAccuracyLongFieldNumber = 11,
    kGpsAccuracyAltFieldNumber = 12,
    kGsmSignalStrengthFieldNumber = 13,
    kGsmMccFieldNumber = 14,
    kGsmMncFieldNumber = 15,
    kIgnitionOnFieldNumber = 16,
    kCrankOnFieldNumber = 17,
    kVehicleSpeedFieldNumber = 18,
    kEngineRpmFieldNumber = 19,
    kSteeringAngleFieldNumber = 20,
    kDistanceTravelledFieldNumber = 21,
    kOutsideAmbientTemperatureFieldNumber = 22,
    kVehicleInteriorTemperatureFieldNumber = 23,
    kSteeringDirectionFieldNumber = 24,
    kAcCompressorPressureFieldNumber = 25,
    kAcceleratorPedalPositionFieldNumber = 26,
    kAtmosphericPressureFieldNumber = 27,
    kTransmissionOilTemperatureFieldNumber = 28,
    kEvGearInfoFieldNumber = 29,
    kVcuPowerModeFieldNumber = 30,
    kGearInfoFieldNumber = 31,
    kFuelRemainingFieldNumber = 32,
    kCumulativeFuelConsumptionRateFieldNumber = 33,
    kEngineIdleSpeedTargetFieldNumber = 34,
    kEngineCoolantTemperatureFieldNumber = 35,
    kGyroscopeXFieldNumber = 36,
    kGyroscopeYFieldNumber = 37,
    kGyroscopeZFieldNumber = 38,
    kBlowerSpeedFieldNumber = 39,
    kHvAmpHrFieldNumber = 40,
    kHvAmpHrRegenFieldNumber = 41,
    kHvBattMaxCellVoltageFieldNumber = 42,
    kHvBattMinCellVoltageFieldNumber = 43,
    kHvBattMaxCellTempFieldNumber = 44,
    kHvBattMinCellTempFieldNumber = 45,
    kHvBattPackVoltageFieldNumber = 46,
    kBrkPressStateFieldNumber = 47,
    kVehicleSpeedTwoFieldNumber = 48,
    kVehicleDriveModeFieldNumber = 49,
    kClutchStateFieldNumber = 50,
    kAcStateFieldNumber = 51,
  };
  // .google.protobuf.Timestamp timestamp = 1[json_name = "ts"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .com.bosch.itrams_gen2e.GPsFixStatus gpsFixStatus = 52[json_name = "gpsfixSt"];
  void clear_gpsfixstatus();
  ::com::bosch::itrams_gen2e::GPsFixStatus gpsfixstatus() const;
  void set_gpsfixstatus(::com::bosch::itrams_gen2e::GPsFixStatus value);
  private:
  ::com::bosch::itrams_gen2e::GPsFixStatus _internal_gpsfixstatus() const;
  void _internal_set_gpsfixstatus(::com::bosch::itrams_gen2e::GPsFixStatus value);
  public:

  // .com.bosch.itrams_gen2e.PowerModeState powerModeState = 53[json_name = "pwrmdst"];
  void clear_powermodestate();
  ::com::bosch::itrams_gen2e::PowerModeState powermodestate() const;
  void set_powermodestate(::com::bosch::itrams_gen2e::PowerModeState value);
  private:
  ::com::bosch::itrams_gen2e::PowerModeState _internal_powermodestate() const;
  void _internal_set_powermodestate(::com::bosch::itrams_gen2e::PowerModeState value);
  public:

  // .com.bosch.itrams_gen2e.HornState hornState = 54[json_name = "hrnst"];
  void clear_hornstate();
  ::com::bosch::itrams_gen2e::HornState hornstate() const;
  void set_hornstate(::com::bosch::itrams_gen2e::HornState value);
  private:
  ::com::bosch::itrams_gen2e::HornState _internal_hornstate() const;
  void _internal_set_hornstate(::com::bosch::itrams_gen2e::HornState value);
  public:

  // .com.bosch.itrams_gen2e.HighBeamLampOnFlag highBeamLampOnFlag = 55[json_name = "hblf"];
  void clear_highbeamlamponflag();
  ::com::bosch::itrams_gen2e::HighBeamLampOnFlag highbeamlamponflag() const;
  void set_highbeamlamponflag(::com::bosch::itrams_gen2e::HighBeamLampOnFlag value);
  private:
  ::com::bosch::itrams_gen2e::HighBeamLampOnFlag _internal_highbeamlamponflag() const;
  void _internal_set_highbeamlamponflag(::com::bosch::itrams_gen2e::HighBeamLampOnFlag value);
  public:

  // .com.bosch.itrams_gen2e.LowBeamLampOnFlag lowBeamLampOnFlag = 56[json_name = "lblf"];
  void clear_lowbeamlamponflag();
  ::com::bosch::itrams_gen2e::LowBeamLampOnFlag lowbeamlamponflag() const;
  void set_lowbeamlamponflag(::com::bosch::itrams_gen2e::LowBeamLampOnFlag value);
  private:
  ::com::bosch::itrams_gen2e::LowBeamLampOnFlag _internal_lowbeamlamponflag() const;
  void _internal_set_lowbeamlamponflag(::com::bosch::itrams_gen2e::LowBeamLampOnFlag value);
  public:

  // .com.bosch.itrams_gen2e.LeftFrontDoorOpenFlag leftFrontDoorOpenFlag = 57[json_name = "lfdof"];
  void clear_leftfrontdooropenflag();
  ::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag leftfrontdooropenflag() const;
  void set_leftfrontdooropenflag(::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag value);
  private:
  ::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag _internal_leftfrontdooropenflag() const;
  void _internal_set_leftfrontdooropenflag(::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag value);
  public:

  // .com.bosch.itrams_gen2e.RightFrontDoorOpenFlag rightFrontDoorOpenFlag = 58[json_name = "rfdof"];
  void clear_rightfrontdooropenflag();
  ::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag rightfrontdooropenflag() const;
  void set_rightfrontdooropenflag(::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag value);
  private:
  ::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag _internal_rightfrontdooropenflag() const;
  void _internal_set_rightfrontdooropenflag(::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag value);
  public:

  // .com.bosch.itrams_gen2e.LeftRearDoorOpenFlag leftRearDoorOpenFlag = 59[json_name = "lrdof"];
  void clear_leftreardooropenflag();
  ::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag leftreardooropenflag() const;
  void set_leftreardooropenflag(::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag value);
  private:
  ::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag _internal_leftreardooropenflag() const;
  void _internal_set_leftreardooropenflag(::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag value);
  public:

  // .com.bosch.itrams_gen2e.RightRearDoorOpenFlag rightRearDoorOpenFlag = 60[json_name = "rrdof"];
  void clear_rightreardooropenflag();
  ::com::bosch::itrams_gen2e::RightRearDoorOpenFlag rightreardooropenflag() const;
  void set_rightreardooropenflag(::com::bosch::itrams_gen2e::RightRearDoorOpenFlag value);
  private:
  ::com::bosch::itrams_gen2e::RightRearDoorOpenFlag _internal_rightreardooropenflag() const;
  void _internal_set_rightreardooropenflag(::com::bosch::itrams_gen2e::RightRearDoorOpenFlag value);
  public:

  // .com.bosch.itrams_gen2e.TailGateOpenFlag tailGateOpenFlag = 61[json_name = "tgof"];
  void clear_tailgateopenflag();
  ::com::bosch::itrams_gen2e::TailGateOpenFlag tailgateopenflag() const;
  void set_tailgateopenflag(::com::bosch::itrams_gen2e::TailGateOpenFlag value);
  private:
  ::com::bosch::itrams_gen2e::TailGateOpenFlag _internal_tailgateopenflag() const;
  void _internal_set_tailgateopenflag(::com::bosch::itrams_gen2e::TailGateOpenFlag value);
  public:

  // .com.bosch.itrams_gen2e.BonnetOpenFlag bonnetOpenFlag = 62[json_name = "bntof"];
  void clear_bonnetopenflag();
  ::com::bosch::itrams_gen2e::BonnetOpenFlag bonnetopenflag() const;
  void set_bonnetopenflag(::com::bosch::itrams_gen2e::BonnetOpenFlag value);
  private:
  ::com::bosch::itrams_gen2e::BonnetOpenFlag _internal_bonnetopenflag() const;
  void _internal_set_bonnetopenflag(::com::bosch::itrams_gen2e::BonnetOpenFlag value);
  public:

  // .com.bosch.itrams_gen2e.VehicleARmState vehicleARmState = 63[json_name = "varm"];
  void clear_vehiclearmstate();
  ::com::bosch::itrams_gen2e::VehicleARmState vehiclearmstate() const;
  void set_vehiclearmstate(::com::bosch::itrams_gen2e::VehicleARmState value);
  private:
  ::com::bosch::itrams_gen2e::VehicleARmState _internal_vehiclearmstate() const;
  void _internal_set_vehiclearmstate(::com::bosch::itrams_gen2e::VehicleARmState value);
  public:

  // .com.bosch.itrams_gen2e.CabinCoolingSolValveState cabinCoolingSolValveState = 64[json_name = "csol"];
  void clear_cabincoolingsolvalvestate();
  ::com::bosch::itrams_gen2e::CabinCoolingSolValveState cabincoolingsolvalvestate() const;
  void set_cabincoolingsolvalvestate(::com::bosch::itrams_gen2e::CabinCoolingSolValveState value);
  private:
  ::com::bosch::itrams_gen2e::CabinCoolingSolValveState _internal_cabincoolingsolvalvestate() const;
  void _internal_set_cabincoolingsolvalvestate(::com::bosch::itrams_gen2e::CabinCoolingSolValveState value);
  public:

  // .com.bosch.itrams_gen2e.AcReqDrvr acReqDrvr = 65[json_name = "acrq"];
  void clear_acreqdrvr();
  ::com::bosch::itrams_gen2e::AcReqDrvr acreqdrvr() const;
  void set_acreqdrvr(::com::bosch::itrams_gen2e::AcReqDrvr value);
  private:
  ::com::bosch::itrams_gen2e::AcReqDrvr _internal_acreqdrvr() const;
  void _internal_set_acreqdrvr(::com::bosch::itrams_gen2e::AcReqDrvr value);
  public:

  // uint32 coolingPwrVCU = 66[json_name = "copwvc"];
  void clear_coolingpwrvcu();
  ::PROTOBUF_NAMESPACE_ID::uint32 coolingpwrvcu() const;
  void set_coolingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coolingpwrvcu() const;
  void _internal_set_coolingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 coolingPwrFATC = 67[json_name = "copwfc"];
  void clear_coolingpwrfatc();
  ::PROTOBUF_NAMESPACE_ID::uint32 coolingpwrfatc() const;
  void set_coolingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coolingpwrfatc() const;
  void _internal_set_coolingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 heatingPwrVCU = 68[json_name = "htpwvc"];
  void clear_heatingpwrvcu();
  ::PROTOBUF_NAMESPACE_ID::uint32 heatingpwrvcu() const;
  void set_heatingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heatingpwrvcu() const;
  void _internal_set_heatingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 heatingPwrFATC = 69[json_name = "htpwfc"];
  void clear_heatingpwrfatc();
  ::PROTOBUF_NAMESPACE_ID::uint32 heatingpwrfatc() const;
  void set_heatingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heatingpwrfatc() const;
  void _internal_set_heatingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 acCmprSpd = 70[json_name = "htpwfc"];
  void clear_accmprspd();
  ::PROTOBUF_NAMESPACE_ID::uint32 accmprspd() const;
  void set_accmprspd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accmprspd() const;
  void _internal_set_accmprspd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 solarLoad = 71[json_name = "slrld"];
  void clear_solarload();
  ::PROTOBUF_NAMESPACE_ID::uint32 solarload() const;
  void set_solarload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_solarload() const;
  void _internal_set_solarload(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.AcSetTemperature acSetTemperature = 72[json_name = "acstmp"];
  void clear_acsettemperature();
  ::com::bosch::itrams_gen2e::AcSetTemperature acsettemperature() const;
  void set_acsettemperature(::com::bosch::itrams_gen2e::AcSetTemperature value);
  private:
  ::com::bosch::itrams_gen2e::AcSetTemperature _internal_acsettemperature() const;
  void _internal_set_acsettemperature(::com::bosch::itrams_gen2e::AcSetTemperature value);
  public:

  // .com.bosch.itrams_gen2e.BatteryCoolingSolValveState batteryCoolingSolValveState = 73[json_name = "battcl"];
  void clear_batterycoolingsolvalvestate();
  ::com::bosch::itrams_gen2e::BatteryCoolingSolValveState batterycoolingsolvalvestate() const;
  void set_batterycoolingsolvalvestate(::com::bosch::itrams_gen2e::BatteryCoolingSolValveState value);
  private:
  ::com::bosch::itrams_gen2e::BatteryCoolingSolValveState _internal_batterycoolingsolvalvestate() const;
  void _internal_set_batterycoolingsolvalvestate(::com::bosch::itrams_gen2e::BatteryCoolingSolValveState value);
  public:

  // uint32 brakePedalPosPercen = 74[json_name = "brkpdl"];
  void clear_brakepedalpospercen();
  ::PROTOBUF_NAMESPACE_ID::uint32 brakepedalpospercen() const;
  void set_brakepedalpospercen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_brakepedalpospercen() const;
  void _internal_set_brakepedalpospercen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.ParkBrakePressStateFlag parkBrakeState = 75[json_name = "prkbrk"];
  void clear_parkbrakestate();
  ::com::bosch::itrams_gen2e::ParkBrakePressStateFlag parkbrakestate() const;
  void set_parkbrakestate(::com::bosch::itrams_gen2e::ParkBrakePressStateFlag value);
  private:
  ::com::bosch::itrams_gen2e::ParkBrakePressStateFlag _internal_parkbrakestate() const;
  void _internal_set_parkbrakestate(::com::bosch::itrams_gen2e::ParkBrakePressStateFlag value);
  public:

  // int32 electricMotorTorque = 76[json_name = "prkbrk"];
  void clear_electricmotortorque();
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotortorque() const;
  void set_electricmotortorque(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricmotortorque() const;
  void _internal_set_electricmotortorque(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.bosch.itrams_gen2e.DriverSeatBeltFlag driverSeatBeltFlag = 77[json_name = "drvst"];
  void clear_driverseatbeltflag();
  ::com::bosch::itrams_gen2e::DriverSeatBeltFlag driverseatbeltflag() const;
  void set_driverseatbeltflag(::com::bosch::itrams_gen2e::DriverSeatBeltFlag value);
  private:
  ::com::bosch::itrams_gen2e::DriverSeatBeltFlag _internal_driverseatbeltflag() const;
  void _internal_set_driverseatbeltflag(::com::bosch::itrams_gen2e::DriverSeatBeltFlag value);
  public:

  // .com.bosch.itrams_gen2e.CoDriverSeatBeltFlag coDriverSeatBeltFlag = 78[json_name = "cdrvst"];
  void clear_codriverseatbeltflag();
  ::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag codriverseatbeltflag() const;
  void set_codriverseatbeltflag(::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag value);
  private:
  ::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag _internal_codriverseatbeltflag() const;
  void _internal_set_codriverseatbeltflag(::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag value);
  public:

  // uint32 enerConsumptionDrive = 79[json_name = "enerconsdr"];
  void clear_enerconsumptiondrive();
  ::PROTOBUF_NAMESPACE_ID::uint32 enerconsumptiondrive() const;
  void set_enerconsumptiondrive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enerconsumptiondrive() const;
  void _internal_set_enerconsumptiondrive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 enerConsumptionAux = 80[json_name = "enerconsax"];
  void clear_enerconsumptionaux();
  ::PROTOBUF_NAMESPACE_ID::uint32 enerconsumptionaux() const;
  void set_enerconsumptionaux(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enerconsumptionaux() const;
  void _internal_set_enerconsumptionaux(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 enerConsumptionCooling = 81[json_name = "enerconscol"];
  void clear_enerconsumptioncooling();
  ::PROTOBUF_NAMESPACE_ID::uint32 enerconsumptioncooling() const;
  void set_enerconsumptioncooling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enerconsumptioncooling() const;
  void _internal_set_enerconsumptioncooling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 regenPowerConsumption = 82[json_name = "rgneff"];
  void clear_regenpowerconsumption();
  ::PROTOBUF_NAMESPACE_ID::uint32 regenpowerconsumption() const;
  void set_regenpowerconsumption(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_regenpowerconsumption() const;
  void _internal_set_regenpowerconsumption(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.CruiseControlStatus cruiseControlStatus = 83[json_name = "crsctr"];
  void clear_cruisecontrolstatus();
  ::com::bosch::itrams_gen2e::CruiseControlStatus cruisecontrolstatus() const;
  void set_cruisecontrolstatus(::com::bosch::itrams_gen2e::CruiseControlStatus value);
  private:
  ::com::bosch::itrams_gen2e::CruiseControlStatus _internal_cruisecontrolstatus() const;
  void _internal_set_cruisecontrolstatus(::com::bosch::itrams_gen2e::CruiseControlStatus value);
  public:

  // uint32 cruiseControlSpeed = 84[json_name = "crsctrsp"];
  void clear_cruisecontrolspeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 cruisecontrolspeed() const;
  void set_cruisecontrolspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cruisecontrolspeed() const;
  void _internal_set_cruisecontrolspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fuelLevelPercentage = 85[json_name = "flperc"];
  void clear_fuellevelpercentage();
  ::PROTOBUF_NAMESPACE_ID::uint32 fuellevelpercentage() const;
  void set_fuellevelpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fuellevelpercentage() const;
  void _internal_set_fuellevelpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 engineTorque = 86[json_name = "engtq"];
  void clear_enginetorque();
  ::PROTOBUF_NAMESPACE_ID::int32 enginetorque() const;
  void set_enginetorque(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enginetorque() const;
  void _internal_set_enginetorque(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.bosch.itrams_gen2e.DRlState drlState = 87[json_name = "drlstokok"];
  void clear_drlstate();
  ::com::bosch::itrams_gen2e::DRlState drlstate() const;
  void set_drlstate(::com::bosch::itrams_gen2e::DRlState value);
  private:
  ::com::bosch::itrams_gen2e::DRlState _internal_drlstate() const;
  void _internal_set_drlstate(::com::bosch::itrams_gen2e::DRlState value);
  public:

  // .com.bosch.itrams_gen2e.WiperState wiperState = 88[json_name = "wprst"];
  void clear_wiperstate();
  ::com::bosch::itrams_gen2e::WiperState wiperstate() const;
  void set_wiperstate(::com::bosch::itrams_gen2e::WiperState value);
  private:
  ::com::bosch::itrams_gen2e::WiperState _internal_wiperstate() const;
  void _internal_set_wiperstate(::com::bosch::itrams_gen2e::WiperState value);
  public:

  // uint32 instantFE = 89[json_name = "instfe"];
  void clear_instantfe();
  ::PROTOBUF_NAMESPACE_ID::uint32 instantfe() const;
  void set_instantfe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instantfe() const;
  void _internal_set_instantfe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 throttleBodyPosition = 90[json_name = "thrpos"];
  void clear_throttlebodyposition();
  ::PROTOBUF_NAMESPACE_ID::int32 throttlebodyposition() const;
  void set_throttlebodyposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_throttlebodyposition() const;
  void _internal_set_throttlebodyposition(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 intakeManifoldTemp = 91[json_name = "intkmf"];
  void clear_intakemanifoldtemp();
  ::PROTOBUF_NAMESPACE_ID::uint32 intakemanifoldtemp() const;
  void set_intakemanifoldtemp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intakemanifoldtemp() const;
  void _internal_set_intakemanifoldtemp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.BiFuelMode biFuelMode = 92[json_name = "biflm"];
  void clear_bifuelmode();
  ::com::bosch::itrams_gen2e::BiFuelMode bifuelmode() const;
  void set_bifuelmode(::com::bosch::itrams_gen2e::BiFuelMode value);
  private:
  ::com::bosch::itrams_gen2e::BiFuelMode _internal_bifuelmode() const;
  void _internal_set_bifuelmode(::com::bosch::itrams_gen2e::BiFuelMode value);
  public:

  // uint32 hvBattSocPercentage = 93[json_name = "hvbsoc"];
  void clear_hvbattsocpercentage();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattsocpercentage() const;
  void set_hvbattsocpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattsocpercentage() const;
  void _internal_set_hvbattsocpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 distanceToEmpty = 94[json_name = "dstEmpty"];
  void clear_distancetoempty();
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetoempty() const;
  void set_distancetoempty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distancetoempty() const;
  void _internal_set_distancetoempty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 distanceToEmptyNonEV = 95[json_name = "dstEmptynv"];
  void clear_distancetoemptynonev();
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetoemptynonev() const;
  void set_distancetoemptynonev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distancetoemptynonev() const;
  void _internal_set_distancetoemptynonev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.AcMode acMode = 96[json_name = "acmd"];
  void clear_acmode();
  ::com::bosch::itrams_gen2e::AcMode acmode() const;
  void set_acmode(::com::bosch::itrams_gen2e::AcMode value);
  private:
  ::com::bosch::itrams_gen2e::AcMode _internal_acmode() const;
  void _internal_set_acmode(::com::bosch::itrams_gen2e::AcMode value);
  public:

  // int32 electricMotorCurrent = 97[json_name = "elcmc"];
  void clear_electricmotorcurrent();
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotorcurrent() const;
  void set_electricmotorcurrent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricmotorcurrent() const;
  void _internal_set_electricmotorcurrent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 electricMotorVoltage = 98[json_name = "elcmv"];
  void clear_electricmotorvoltage();
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotorvoltage() const;
  void set_electricmotorvoltage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricmotorvoltage() const;
  void _internal_set_electricmotorvoltage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 electricMotorSpeed = 99[json_name = "elcms"];
  void clear_electricmotorspeed();
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotorspeed() const;
  void set_electricmotorspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricmotorspeed() const;
  void _internal_set_electricmotorspeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 electricMotorTemperature = 100[json_name = "elcmv"];
  void clear_electricmotortemperature();
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotortemperature() const;
  void set_electricmotortemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_electricmotortemperature() const;
  void _internal_set_electricmotortemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hvBattCurrent = 101[json_name = "elcmc"];
  void clear_hvbattcurrent();
  ::PROTOBUF_NAMESPACE_ID::int32 hvbattcurrent() const;
  void set_hvbattcurrent(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hvbattcurrent() const;
  void _internal_set_hvbattcurrent(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 hvBattKWh = 102[json_name = "elcmv"];
  void clear_hvbattkwh();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattkwh() const;
  void set_hvbattkwh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattkwh() const;
  void _internal_set_hvbattkwh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dcDcOutputVolatge = 103[json_name = "dcopvol"];
  void clear_dcdcoutputvolatge();
  ::PROTOBUF_NAMESPACE_ID::uint32 dcdcoutputvolatge() const;
  void set_dcdcoutputvolatge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dcdcoutputvolatge() const;
  void _internal_set_dcdcoutputvolatge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dcDcOutputCurrent = 104[json_name = "dcopcur"];
  void clear_dcdcoutputcurrent();
  ::PROTOBUF_NAMESPACE_ID::uint32 dcdcoutputcurrent() const;
  void set_dcdcoutputcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dcdcoutputcurrent() const;
  void _internal_set_dcdcoutputcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vehicleBatteryLevel = 105[json_name = "vehbattlev"];
  void clear_vehiclebatterylevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclebatterylevel() const;
  void set_vehiclebatterylevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vehiclebatterylevel() const;
  void _internal_set_vehiclebatterylevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 gpsLat = 2[json_name = "glt"];
  private:
  bool _internal_has_gpslat() const;
  public:
  void clear_gpslat();
  ::PROTOBUF_NAMESPACE_ID::int32 gpslat() const;
  void set_gpslat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpslat() const;
  void _internal_set_gpslat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gpsLong = 3[json_name = "gln"];
  private:
  bool _internal_has_gpslong() const;
  public:
  void clear_gpslong();
  ::PROTOBUF_NAMESPACE_ID::int32 gpslong() const;
  void set_gpslong(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpslong() const;
  void _internal_set_gpslong(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gpsAlt = 4[json_name = "gal"];
  private:
  bool _internal_has_gpsalt() const;
  public:
  void clear_gpsalt();
  ::PROTOBUF_NAMESPACE_ID::int32 gpsalt() const;
  void set_gpsalt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gpsalt() const;
  void _internal_set_gpsalt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 gpsCourseAngle = 5[json_name = "gca"];
  private:
  bool _internal_has_gpscourseangle() const;
  public:
  void clear_gpscourseangle();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpscourseangle() const;
  void set_gpscourseangle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpscourseangle() const;
  void _internal_set_gpscourseangle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 accelX = 6[json_name = "acx"];
  private:
  bool _internal_has_accelx() const;
  public:
  void clear_accelx();
  ::PROTOBUF_NAMESPACE_ID::int32 accelx() const;
  void set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accelx() const;
  void _internal_set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accelY = 7[json_name = "acy"];
  private:
  bool _internal_has_accely() const;
  public:
  void clear_accely();
  ::PROTOBUF_NAMESPACE_ID::int32 accely() const;
  void set_accely(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accely() const;
  void _internal_set_accely(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 accelZ = 8[json_name = "acz"];
  private:
  bool _internal_has_accelz() const;
  public:
  void clear_accelz();
  ::PROTOBUF_NAMESPACE_ID::int32 accelz() const;
  void set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accelz() const;
  void _internal_set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 gpsSignalQuality = 9[json_name = "gsq"];
  private:
  bool _internal_has_gpssignalquality() const;
  public:
  void clear_gpssignalquality();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpssignalquality() const;
  void set_gpssignalquality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpssignalquality() const;
  void _internal_set_gpssignalquality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gpsAccuracyLat = 10[json_name = "gacLt"];
  private:
  bool _internal_has_gpsaccuracylat() const;
  public:
  void clear_gpsaccuracylat();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracylat() const;
  void set_gpsaccuracylat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsaccuracylat() const;
  void _internal_set_gpsaccuracylat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gpsAccuracyLong = 11[json_name = "gacLn"];
  private:
  bool _internal_has_gpsaccuracylong() const;
  public:
  void clear_gpsaccuracylong();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracylong() const;
  void set_gpsaccuracylong(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsaccuracylong() const;
  void _internal_set_gpsaccuracylong(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gpsAccuracyAlt = 12[json_name = "gacAl"];
  private:
  bool _internal_has_gpsaccuracyalt() const;
  public:
  void clear_gpsaccuracyalt();
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracyalt() const;
  void set_gpsaccuracyalt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gpsaccuracyalt() const;
  void _internal_set_gpsaccuracyalt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gsmSignalStrength = 13[json_name = "gsmSig"];
  private:
  bool _internal_has_gsmsignalstrength() const;
  public:
  void clear_gsmsignalstrength();
  ::PROTOBUF_NAMESPACE_ID::uint32 gsmsignalstrength() const;
  void set_gsmsignalstrength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gsmsignalstrength() const;
  void _internal_set_gsmsignalstrength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gsmMcc = 14[json_name = "gsmMCC"];
  private:
  bool _internal_has_gsmmcc() const;
  public:
  void clear_gsmmcc();
  ::PROTOBUF_NAMESPACE_ID::uint32 gsmmcc() const;
  void set_gsmmcc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gsmmcc() const;
  void _internal_set_gsmmcc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gsmMnc = 15[json_name = "gsmMnc"];
  private:
  bool _internal_has_gsmmnc() const;
  public:
  void clear_gsmmnc();
  ::PROTOBUF_NAMESPACE_ID::uint32 gsmmnc() const;
  void set_gsmmnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gsmmnc() const;
  void _internal_set_gsmmnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.IgnitionOn ignitionOn = 16[json_name = "ign"];
  private:
  bool _internal_has_ignitionon() const;
  public:
  void clear_ignitionon();
  ::com::bosch::itrams_gen2e::IgnitionOn ignitionon() const;
  void set_ignitionon(::com::bosch::itrams_gen2e::IgnitionOn value);
  private:
  ::com::bosch::itrams_gen2e::IgnitionOn _internal_ignitionon() const;
  void _internal_set_ignitionon(::com::bosch::itrams_gen2e::IgnitionOn value);
  public:

  // .com.bosch.itrams_gen2e.CrankOn crankOn = 17[json_name = "cnk"];
  private:
  bool _internal_has_crankon() const;
  public:
  void clear_crankon();
  ::com::bosch::itrams_gen2e::CrankOn crankon() const;
  void set_crankon(::com::bosch::itrams_gen2e::CrankOn value);
  private:
  ::com::bosch::itrams_gen2e::CrankOn _internal_crankon() const;
  void _internal_set_crankon(::com::bosch::itrams_gen2e::CrankOn value);
  public:

  // uint32 vehicleSpeed = 18[json_name = "vsp"];
  private:
  bool _internal_has_vehiclespeed() const;
  public:
  void clear_vehiclespeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclespeed() const;
  void set_vehiclespeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vehiclespeed() const;
  void _internal_set_vehiclespeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 engineRpm = 19[json_name = "rpm"];
  private:
  bool _internal_has_enginerpm() const;
  public:
  void clear_enginerpm();
  ::PROTOBUF_NAMESPACE_ID::uint32 enginerpm() const;
  void set_enginerpm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enginerpm() const;
  void _internal_set_enginerpm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 steeringAngle = 20[json_name = "sta"];
  private:
  bool _internal_has_steeringangle() const;
  public:
  void clear_steeringangle();
  ::PROTOBUF_NAMESPACE_ID::uint32 steeringangle() const;
  void set_steeringangle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steeringangle() const;
  void _internal_set_steeringangle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 distanceTravelled = 21[json_name = "tdt"];
  private:
  bool _internal_has_distancetravelled() const;
  public:
  void clear_distancetravelled();
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetravelled() const;
  void set_distancetravelled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distancetravelled() const;
  void _internal_set_distancetravelled(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 outsideAmbientTemperature = 22[json_name = "oat"];
  private:
  bool _internal_has_outsideambienttemperature() const;
  public:
  void clear_outsideambienttemperature();
  ::PROTOBUF_NAMESPACE_ID::int32 outsideambienttemperature() const;
  void set_outsideambienttemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outsideambienttemperature() const;
  void _internal_set_outsideambienttemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vehicleInteriorTemperature = 23[json_name = "vit"];
  private:
  bool _internal_has_vehicleinteriortemperature() const;
  public:
  void clear_vehicleinteriortemperature();
  ::PROTOBUF_NAMESPACE_ID::int32 vehicleinteriortemperature() const;
  void set_vehicleinteriortemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vehicleinteriortemperature() const;
  void _internal_set_vehicleinteriortemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.bosch.itrams_gen2e.SteeringDirection steeringDirection = 24[json_name = "sdn"];
  private:
  bool _internal_has_steeringdirection() const;
  public:
  void clear_steeringdirection();
  ::com::bosch::itrams_gen2e::SteeringDirection steeringdirection() const;
  void set_steeringdirection(::com::bosch::itrams_gen2e::SteeringDirection value);
  private:
  ::com::bosch::itrams_gen2e::SteeringDirection _internal_steeringdirection() const;
  void _internal_set_steeringdirection(::com::bosch::itrams_gen2e::SteeringDirection value);
  public:

  // uint32 acCompressorPressure = 25[json_name = "acp"];
  private:
  bool _internal_has_accompressorpressure() const;
  public:
  void clear_accompressorpressure();
  ::PROTOBUF_NAMESPACE_ID::uint32 accompressorpressure() const;
  void set_accompressorpressure(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accompressorpressure() const;
  void _internal_set_accompressorpressure(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 acceleratorPedalPosition = 26[json_name = "app"];
  private:
  bool _internal_has_acceleratorpedalposition() const;
  public:
  void clear_acceleratorpedalposition();
  ::PROTOBUF_NAMESPACE_ID::uint32 acceleratorpedalposition() const;
  void set_acceleratorpedalposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_acceleratorpedalposition() const;
  void _internal_set_acceleratorpedalposition(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 atmosphericPressure = 27[json_name = "atp"];
  private:
  bool _internal_has_atmosphericpressure() const;
  public:
  void clear_atmosphericpressure();
  ::PROTOBUF_NAMESPACE_ID::uint32 atmosphericpressure() const;
  void set_atmosphericpressure(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atmosphericpressure() const;
  void _internal_set_atmosphericpressure(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 transmissionOilTemperature = 28[json_name = "tot"];
  private:
  bool _internal_has_transmissionoiltemperature() const;
  public:
  void clear_transmissionoiltemperature();
  ::PROTOBUF_NAMESPACE_ID::int32 transmissionoiltemperature() const;
  void set_transmissionoiltemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transmissionoiltemperature() const;
  void _internal_set_transmissionoiltemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .com.bosch.itrams_gen2e.EVGearState evGearInfo = 29[json_name = "egi"];
  private:
  bool _internal_has_evgearinfo() const;
  public:
  void clear_evgearinfo();
  ::com::bosch::itrams_gen2e::EVGearState evgearinfo() const;
  void set_evgearinfo(::com::bosch::itrams_gen2e::EVGearState value);
  private:
  ::com::bosch::itrams_gen2e::EVGearState _internal_evgearinfo() const;
  void _internal_set_evgearinfo(::com::bosch::itrams_gen2e::EVGearState value);
  public:

  // .com.bosch.itrams_gen2e.VCUPowerMode vcuPowerMode = 30[json_name = "vcupm"];
  private:
  bool _internal_has_vcupowermode() const;
  public:
  void clear_vcupowermode();
  ::com::bosch::itrams_gen2e::VCUPowerMode vcupowermode() const;
  void set_vcupowermode(::com::bosch::itrams_gen2e::VCUPowerMode value);
  private:
  ::com::bosch::itrams_gen2e::VCUPowerMode _internal_vcupowermode() const;
  void _internal_set_vcupowermode(::com::bosch::itrams_gen2e::VCUPowerMode value);
  public:

  // .com.bosch.itrams_gen2e.GearState gear_Info = 31[json_name = "grinfo"];
  private:
  bool _internal_has_gear_info() const;
  public:
  void clear_gear_info();
  ::com::bosch::itrams_gen2e::GearState gear_info() const;
  void set_gear_info(::com::bosch::itrams_gen2e::GearState value);
  private:
  ::com::bosch::itrams_gen2e::GearState _internal_gear_info() const;
  void _internal_set_gear_info(::com::bosch::itrams_gen2e::GearState value);
  public:

  // uint32 fuelRemaining = 32[json_name = "fuel"];
  private:
  bool _internal_has_fuelremaining() const;
  public:
  void clear_fuelremaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 fuelremaining() const;
  void set_fuelremaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fuelremaining() const;
  void _internal_set_fuelremaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cumulativeFuelConsumptionRate = 33[json_name = "cfr"];
  private:
  bool _internal_has_cumulativefuelconsumptionrate() const;
  public:
  void clear_cumulativefuelconsumptionrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 cumulativefuelconsumptionrate() const;
  void set_cumulativefuelconsumptionrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cumulativefuelconsumptionrate() const;
  void _internal_set_cumulativefuelconsumptionrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 engineIdleSpeedTarget = 34[json_name = "eis"];
  private:
  bool _internal_has_engineidlespeedtarget() const;
  public:
  void clear_engineidlespeedtarget();
  ::PROTOBUF_NAMESPACE_ID::uint32 engineidlespeedtarget() const;
  void set_engineidlespeedtarget(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_engineidlespeedtarget() const;
  void _internal_set_engineidlespeedtarget(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 engineCoolantTemperature = 35[json_name = "ect"];
  private:
  bool _internal_has_enginecoolanttemperature() const;
  public:
  void clear_enginecoolanttemperature();
  ::PROTOBUF_NAMESPACE_ID::int32 enginecoolanttemperature() const;
  void set_enginecoolanttemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enginecoolanttemperature() const;
  void _internal_set_enginecoolanttemperature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 gyroscopeX = 36[json_name = "gyroX"];
  private:
  bool _internal_has_gyroscopex() const;
  public:
  void clear_gyroscopex();
  ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopex() const;
  void set_gyroscopex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gyroscopex() const;
  void _internal_set_gyroscopex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gyroscopeY = 37[json_name = "gyroY"];
  private:
  bool _internal_has_gyroscopey() const;
  public:
  void clear_gyroscopey();
  ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopey() const;
  void set_gyroscopey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gyroscopey() const;
  void _internal_set_gyroscopey(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gyroscopeZ = 38[json_name = "gyroZ"];
  private:
  bool _internal_has_gyroscopez() const;
  public:
  void clear_gyroscopez();
  ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopez() const;
  void set_gyroscopez(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gyroscopez() const;
  void _internal_set_gyroscopez(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.BlowerSpeed blowerSpeed = 39[json_name = "blspeed"];
  private:
  bool _internal_has_blowerspeed() const;
  public:
  void clear_blowerspeed();
  ::com::bosch::itrams_gen2e::BlowerSpeed blowerspeed() const;
  void set_blowerspeed(::com::bosch::itrams_gen2e::BlowerSpeed value);
  private:
  ::com::bosch::itrams_gen2e::BlowerSpeed _internal_blowerspeed() const;
  void _internal_set_blowerspeed(::com::bosch::itrams_gen2e::BlowerSpeed value);
  public:

  // uint32 hvAmpHr = 40[json_name = "hvamp"];
  private:
  bool _internal_has_hvamphr() const;
  public:
  void clear_hvamphr();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvamphr() const;
  void set_hvamphr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvamphr() const;
  void _internal_set_hvamphr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hvAmpHrRegen = 41[json_name = "hvampreg"];
  private:
  bool _internal_has_hvamphrregen() const;
  public:
  void clear_hvamphrregen();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvamphrregen() const;
  void set_hvamphrregen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvamphrregen() const;
  void _internal_set_hvamphrregen(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hvBattMaxCellVoltage = 42[json_name = "hbmaxv"];
  private:
  bool _internal_has_hvbattmaxcellvoltage() const;
  public:
  void clear_hvbattmaxcellvoltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmaxcellvoltage() const;
  void set_hvbattmaxcellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattmaxcellvoltage() const;
  void _internal_set_hvbattmaxcellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hvBattMinCellVoltage = 43[json_name = "hbminv"];
  private:
  bool _internal_has_hvbattmincellvoltage() const;
  public:
  void clear_hvbattmincellvoltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmincellvoltage() const;
  void set_hvbattmincellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattmincellvoltage() const;
  void _internal_set_hvbattmincellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hvBattMaxCellTemp = 44[json_name = "hbmaxtmp"];
  private:
  bool _internal_has_hvbattmaxcelltemp() const;
  public:
  void clear_hvbattmaxcelltemp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmaxcelltemp() const;
  void set_hvbattmaxcelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattmaxcelltemp() const;
  void _internal_set_hvbattmaxcelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hvBattMinCellTemp = 45[json_name = "hbmintmp"];
  private:
  bool _internal_has_hvbattmincelltemp() const;
  public:
  void clear_hvbattmincelltemp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmincelltemp() const;
  void set_hvbattmincelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattmincelltemp() const;
  void _internal_set_hvbattmincelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hvBattPackVoltage = 46[json_name = "hbpvol"];
  private:
  bool _internal_has_hvbattpackvoltage() const;
  public:
  void clear_hvbattpackvoltage();
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattpackvoltage() const;
  void set_hvbattpackvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hvbattpackvoltage() const;
  void _internal_set_hvbattpackvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.BrakePressState brkPressState = 47[json_name = "brkprs"];
  private:
  bool _internal_has_brkpressstate() const;
  public:
  void clear_brkpressstate();
  ::com::bosch::itrams_gen2e::BrakePressState brkpressstate() const;
  void set_brkpressstate(::com::bosch::itrams_gen2e::BrakePressState value);
  private:
  ::com::bosch::itrams_gen2e::BrakePressState _internal_brkpressstate() const;
  void _internal_set_brkpressstate(::com::bosch::itrams_gen2e::BrakePressState value);
  public:

  // uint32 vehicleSpeedTwo = 48[json_name = "vspd2"];
  private:
  bool _internal_has_vehiclespeedtwo() const;
  public:
  void clear_vehiclespeedtwo();
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclespeedtwo() const;
  void set_vehiclespeedtwo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vehiclespeedtwo() const;
  void _internal_set_vehiclespeedtwo(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .com.bosch.itrams_gen2e.VehicleDriveMode vehicleDriveMode = 49[json_name = "vdrvmd"];
  private:
  bool _internal_has_vehicledrivemode() const;
  public:
  void clear_vehicledrivemode();
  ::com::bosch::itrams_gen2e::VehicleDriveMode vehicledrivemode() const;
  void set_vehicledrivemode(::com::bosch::itrams_gen2e::VehicleDriveMode value);
  private:
  ::com::bosch::itrams_gen2e::VehicleDriveMode _internal_vehicledrivemode() const;
  void _internal_set_vehicledrivemode(::com::bosch::itrams_gen2e::VehicleDriveMode value);
  public:

  // .com.bosch.itrams_gen2e.ClutchState clutchState = 50[json_name = "clthst"];
  private:
  bool _internal_has_clutchstate() const;
  public:
  void clear_clutchstate();
  ::com::bosch::itrams_gen2e::ClutchState clutchstate() const;
  void set_clutchstate(::com::bosch::itrams_gen2e::ClutchState value);
  private:
  ::com::bosch::itrams_gen2e::ClutchState _internal_clutchstate() const;
  void _internal_set_clutchstate(::com::bosch::itrams_gen2e::ClutchState value);
  public:

  // .com.bosch.itrams_gen2e.AcState acState = 51[json_name = "acst"];
  private:
  bool _internal_has_acstate() const;
  public:
  void clear_acstate();
  ::com::bosch::itrams_gen2e::AcState acstate() const;
  void set_acstate(::com::bosch::itrams_gen2e::AcState value);
  private:
  ::com::bosch::itrams_gen2e::AcState _internal_acstate() const;
  void _internal_set_acstate(::com::bosch::itrams_gen2e::AcState value);
  public:

  void clear_gpsLatProperty();
  GpsLatPropertyCase gpsLatProperty_case() const;
  void clear_gpsLongProperty();
  GpsLongPropertyCase gpsLongProperty_case() const;
  void clear_gpsAltProperty();
  GpsAltPropertyCase gpsAltProperty_case() const;
  void clear_gpsCourseAngleProperty();
  GpsCourseAnglePropertyCase gpsCourseAngleProperty_case() const;
  void clear_accelXProperty();
  AccelXPropertyCase accelXProperty_case() const;
  void clear_accelYProperty();
  AccelYPropertyCase accelYProperty_case() const;
  void clear_accelZProperty();
  AccelZPropertyCase accelZProperty_case() const;
  void clear_gpsSignalQualityProperty();
  GpsSignalQualityPropertyCase gpsSignalQualityProperty_case() const;
  void clear_gpsAccuracyLatProperty();
  GpsAccuracyLatPropertyCase gpsAccuracyLatProperty_case() const;
  void clear_gpsAccuracyLongProperty();
  GpsAccuracyLongPropertyCase gpsAccuracyLongProperty_case() const;
  void clear_gpsAccuracyAltProperty();
  GpsAccuracyAltPropertyCase gpsAccuracyAltProperty_case() const;
  void clear_gsmSignalStrengthProperty();
  GsmSignalStrengthPropertyCase gsmSignalStrengthProperty_case() const;
  void clear_gsmMccProperty();
  GsmMccPropertyCase gsmMccProperty_case() const;
  void clear_gsmMncProperty();
  GsmMncPropertyCase gsmMncProperty_case() const;
  void clear_ignitionOnProperty();
  IgnitionOnPropertyCase ignitionOnProperty_case() const;
  void clear_crankOnProperty();
  CrankOnPropertyCase crankOnProperty_case() const;
  void clear_vehicleSpeedProperty();
  VehicleSpeedPropertyCase vehicleSpeedProperty_case() const;
  void clear_engineRpmProperty();
  EngineRpmPropertyCase engineRpmProperty_case() const;
  void clear_steeringAngleProperty();
  SteeringAnglePropertyCase steeringAngleProperty_case() const;
  void clear_distanceTravelledProperty();
  DistanceTravelledPropertyCase distanceTravelledProperty_case() const;
  void clear_outsideAmbientTemperatureProperty();
  OutsideAmbientTemperaturePropertyCase outsideAmbientTemperatureProperty_case() const;
  void clear_vehicleInteriorTemperatureProperty();
  VehicleInteriorTemperaturePropertyCase vehicleInteriorTemperatureProperty_case() const;
  void clear_steeringDirectionProperty();
  SteeringDirectionPropertyCase steeringDirectionProperty_case() const;
  void clear_acCompressorPressureProperty();
  AcCompressorPressurePropertyCase acCompressorPressureProperty_case() const;
  void clear_acceleratorPedalPositionProperty();
  AcceleratorPedalPositionPropertyCase acceleratorPedalPositionProperty_case() const;
  void clear_atmosphericPressureProperty();
  AtmosphericPressurePropertyCase atmosphericPressureProperty_case() const;
  void clear_transmissionOilTemperatureProperty();
  TransmissionOilTemperaturePropertyCase transmissionOilTemperatureProperty_case() const;
  void clear_evGearInfoProperty();
  EvGearInfoPropertyCase evGearInfoProperty_case() const;
  void clear_vcuPowerModeProperty();
  VcuPowerModePropertyCase vcuPowerModeProperty_case() const;
  void clear_gear_InfoProperty();
  GearInfoPropertyCase gear_InfoProperty_case() const;
  void clear_fuelRemainingProperty();
  FuelRemainingPropertyCase fuelRemainingProperty_case() const;
  void clear_cumulativeFuelConsumptionRateProperty();
  CumulativeFuelConsumptionRatePropertyCase cumulativeFuelConsumptionRateProperty_case() const;
  void clear_engineIdleSpeedTargetProperty();
  EngineIdleSpeedTargetPropertyCase engineIdleSpeedTargetProperty_case() const;
  void clear_engineCoolantTemperatureProperty();
  EngineCoolantTemperaturePropertyCase engineCoolantTemperatureProperty_case() const;
  void clear_gyroscopeXProperty();
  GyroscopeXPropertyCase gyroscopeXProperty_case() const;
  void clear_gyroscopeYProperty();
  GyroscopeYPropertyCase gyroscopeYProperty_case() const;
  void clear_gyroscopeZProperty();
  GyroscopeZPropertyCase gyroscopeZProperty_case() const;
  void clear_blowerSpeedProperty();
  BlowerSpeedPropertyCase blowerSpeedProperty_case() const;
  void clear_hvAmpHrProperty();
  HvAmpHrPropertyCase hvAmpHrProperty_case() const;
  void clear_hvAmpHrRegenProperty();
  HvAmpHrRegenPropertyCase hvAmpHrRegenProperty_case() const;
  void clear_hvBattMaxCellVoltageProperty();
  HvBattMaxCellVoltagePropertyCase hvBattMaxCellVoltageProperty_case() const;
  void clear_hvBattMinCellVoltageProperty();
  HvBattMinCellVoltagePropertyCase hvBattMinCellVoltageProperty_case() const;
  void clear_hvBattMaxCellTempProperty();
  HvBattMaxCellTempPropertyCase hvBattMaxCellTempProperty_case() const;
  void clear_hvBattMinCellTempProperty();
  HvBattMinCellTempPropertyCase hvBattMinCellTempProperty_case() const;
  void clear_hvBattPackVoltageProperty();
  HvBattPackVoltagePropertyCase hvBattPackVoltageProperty_case() const;
  void clear_brkPressStateProperty();
  BrkPressStatePropertyCase brkPressStateProperty_case() const;
  void clear_vehicleSpeedTwoProperty();
  VehicleSpeedTwoPropertyCase vehicleSpeedTwoProperty_case() const;
  void clear_vehicleDriveModeProperty();
  VehicleDriveModePropertyCase vehicleDriveModeProperty_case() const;
  void clear_clutchStateProperty();
  ClutchStatePropertyCase clutchStateProperty_case() const;
  void clear_acStateProperty();
  AcStatePropertyCase acStateProperty_case() const;
  // @@protoc_insertion_point(class_scope:com.bosch.itrams_gen2e.TelemetryReading)
 private:
  class _Internal;
  void set_has_gpslat();
  void set_has_gpslong();
  void set_has_gpsalt();
  void set_has_gpscourseangle();
  void set_has_accelx();
  void set_has_accely();
  void set_has_accelz();
  void set_has_gpssignalquality();
  void set_has_gpsaccuracylat();
  void set_has_gpsaccuracylong();
  void set_has_gpsaccuracyalt();
  void set_has_gsmsignalstrength();
  void set_has_gsmmcc();
  void set_has_gsmmnc();
  void set_has_ignitionon();
  void set_has_crankon();
  void set_has_vehiclespeed();
  void set_has_enginerpm();
  void set_has_steeringangle();
  void set_has_distancetravelled();
  void set_has_outsideambienttemperature();
  void set_has_vehicleinteriortemperature();
  void set_has_steeringdirection();
  void set_has_accompressorpressure();
  void set_has_acceleratorpedalposition();
  void set_has_atmosphericpressure();
  void set_has_transmissionoiltemperature();
  void set_has_evgearinfo();
  void set_has_vcupowermode();
  void set_has_gear_info();
  void set_has_fuelremaining();
  void set_has_cumulativefuelconsumptionrate();
  void set_has_engineidlespeedtarget();
  void set_has_enginecoolanttemperature();
  void set_has_gyroscopex();
  void set_has_gyroscopey();
  void set_has_gyroscopez();
  void set_has_blowerspeed();
  void set_has_hvamphr();
  void set_has_hvamphrregen();
  void set_has_hvbattmaxcellvoltage();
  void set_has_hvbattmincellvoltage();
  void set_has_hvbattmaxcelltemp();
  void set_has_hvbattmincelltemp();
  void set_has_hvbattpackvoltage();
  void set_has_brkpressstate();
  void set_has_vehiclespeedtwo();
  void set_has_vehicledrivemode();
  void set_has_clutchstate();
  void set_has_acstate();

  inline bool has_gpsLatProperty() const;
  inline void clear_has_gpsLatProperty();

  inline bool has_gpsLongProperty() const;
  inline void clear_has_gpsLongProperty();

  inline bool has_gpsAltProperty() const;
  inline void clear_has_gpsAltProperty();

  inline bool has_gpsCourseAngleProperty() const;
  inline void clear_has_gpsCourseAngleProperty();

  inline bool has_accelXProperty() const;
  inline void clear_has_accelXProperty();

  inline bool has_accelYProperty() const;
  inline void clear_has_accelYProperty();

  inline bool has_accelZProperty() const;
  inline void clear_has_accelZProperty();

  inline bool has_gpsSignalQualityProperty() const;
  inline void clear_has_gpsSignalQualityProperty();

  inline bool has_gpsAccuracyLatProperty() const;
  inline void clear_has_gpsAccuracyLatProperty();

  inline bool has_gpsAccuracyLongProperty() const;
  inline void clear_has_gpsAccuracyLongProperty();

  inline bool has_gpsAccuracyAltProperty() const;
  inline void clear_has_gpsAccuracyAltProperty();

  inline bool has_gsmSignalStrengthProperty() const;
  inline void clear_has_gsmSignalStrengthProperty();

  inline bool has_gsmMccProperty() const;
  inline void clear_has_gsmMccProperty();

  inline bool has_gsmMncProperty() const;
  inline void clear_has_gsmMncProperty();

  inline bool has_ignitionOnProperty() const;
  inline void clear_has_ignitionOnProperty();

  inline bool has_crankOnProperty() const;
  inline void clear_has_crankOnProperty();

  inline bool has_vehicleSpeedProperty() const;
  inline void clear_has_vehicleSpeedProperty();

  inline bool has_engineRpmProperty() const;
  inline void clear_has_engineRpmProperty();

  inline bool has_steeringAngleProperty() const;
  inline void clear_has_steeringAngleProperty();

  inline bool has_distanceTravelledProperty() const;
  inline void clear_has_distanceTravelledProperty();

  inline bool has_outsideAmbientTemperatureProperty() const;
  inline void clear_has_outsideAmbientTemperatureProperty();

  inline bool has_vehicleInteriorTemperatureProperty() const;
  inline void clear_has_vehicleInteriorTemperatureProperty();

  inline bool has_steeringDirectionProperty() const;
  inline void clear_has_steeringDirectionProperty();

  inline bool has_acCompressorPressureProperty() const;
  inline void clear_has_acCompressorPressureProperty();

  inline bool has_acceleratorPedalPositionProperty() const;
  inline void clear_has_acceleratorPedalPositionProperty();

  inline bool has_atmosphericPressureProperty() const;
  inline void clear_has_atmosphericPressureProperty();

  inline bool has_transmissionOilTemperatureProperty() const;
  inline void clear_has_transmissionOilTemperatureProperty();

  inline bool has_evGearInfoProperty() const;
  inline void clear_has_evGearInfoProperty();

  inline bool has_vcuPowerModeProperty() const;
  inline void clear_has_vcuPowerModeProperty();

  inline bool has_gear_InfoProperty() const;
  inline void clear_has_gear_InfoProperty();

  inline bool has_fuelRemainingProperty() const;
  inline void clear_has_fuelRemainingProperty();

  inline bool has_cumulativeFuelConsumptionRateProperty() const;
  inline void clear_has_cumulativeFuelConsumptionRateProperty();

  inline bool has_engineIdleSpeedTargetProperty() const;
  inline void clear_has_engineIdleSpeedTargetProperty();

  inline bool has_engineCoolantTemperatureProperty() const;
  inline void clear_has_engineCoolantTemperatureProperty();

  inline bool has_gyroscopeXProperty() const;
  inline void clear_has_gyroscopeXProperty();

  inline bool has_gyroscopeYProperty() const;
  inline void clear_has_gyroscopeYProperty();

  inline bool has_gyroscopeZProperty() const;
  inline void clear_has_gyroscopeZProperty();

  inline bool has_blowerSpeedProperty() const;
  inline void clear_has_blowerSpeedProperty();

  inline bool has_hvAmpHrProperty() const;
  inline void clear_has_hvAmpHrProperty();

  inline bool has_hvAmpHrRegenProperty() const;
  inline void clear_has_hvAmpHrRegenProperty();

  inline bool has_hvBattMaxCellVoltageProperty() const;
  inline void clear_has_hvBattMaxCellVoltageProperty();

  inline bool has_hvBattMinCellVoltageProperty() const;
  inline void clear_has_hvBattMinCellVoltageProperty();

  inline bool has_hvBattMaxCellTempProperty() const;
  inline void clear_has_hvBattMaxCellTempProperty();

  inline bool has_hvBattMinCellTempProperty() const;
  inline void clear_has_hvBattMinCellTempProperty();

  inline bool has_hvBattPackVoltageProperty() const;
  inline void clear_has_hvBattPackVoltageProperty();

  inline bool has_brkPressStateProperty() const;
  inline void clear_has_brkPressStateProperty();

  inline bool has_vehicleSpeedTwoProperty() const;
  inline void clear_has_vehicleSpeedTwoProperty();

  inline bool has_vehicleDriveModeProperty() const;
  inline void clear_has_vehicleDriveModeProperty();

  inline bool has_clutchStateProperty() const;
  inline void clear_has_clutchStateProperty();

  inline bool has_acStateProperty() const;
  inline void clear_has_acStateProperty();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int gpsfixstatus_;
  int powermodestate_;
  int hornstate_;
  int highbeamlamponflag_;
  int lowbeamlamponflag_;
  int leftfrontdooropenflag_;
  int rightfrontdooropenflag_;
  int leftreardooropenflag_;
  int rightreardooropenflag_;
  int tailgateopenflag_;
  int bonnetopenflag_;
  int vehiclearmstate_;
  int cabincoolingsolvalvestate_;
  int acreqdrvr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coolingpwrvcu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coolingpwrfatc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heatingpwrvcu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heatingpwrfatc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accmprspd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solarload_;
  int acsettemperature_;
  int batterycoolingsolvalvestate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 brakepedalpospercen_;
  int parkbrakestate_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotortorque_;
  int driverseatbeltflag_;
  int codriverseatbeltflag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enerconsumptiondrive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enerconsumptionaux_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enerconsumptioncooling_;
  ::PROTOBUF_NAMESPACE_ID::uint32 regenpowerconsumption_;
  int cruisecontrolstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cruisecontrolspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fuellevelpercentage_;
  ::PROTOBUF_NAMESPACE_ID::int32 enginetorque_;
  int drlstate_;
  int wiperstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instantfe_;
  ::PROTOBUF_NAMESPACE_ID::int32 throttlebodyposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 intakemanifoldtemp_;
  int bifuelmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattsocpercentage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetoempty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetoemptynonev_;
  int acmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotorcurrent_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotorvoltage_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotorspeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 electricmotortemperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 hvbattcurrent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattkwh_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dcdcoutputvolatge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dcdcoutputcurrent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclebatterylevel_;
  union GpsLatPropertyUnion {
    GpsLatPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 gpslat_;
  } gpsLatProperty_;
  union GpsLongPropertyUnion {
    GpsLongPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 gpslong_;
  } gpsLongProperty_;
  union GpsAltPropertyUnion {
    GpsAltPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 gpsalt_;
  } gpsAltProperty_;
  union GpsCourseAnglePropertyUnion {
    GpsCourseAnglePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gpscourseangle_;
  } gpsCourseAngleProperty_;
  union AccelXPropertyUnion {
    AccelXPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 accelx_;
  } accelXProperty_;
  union AccelYPropertyUnion {
    AccelYPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 accely_;
  } accelYProperty_;
  union AccelZPropertyUnion {
    AccelZPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 accelz_;
  } accelZProperty_;
  union GpsSignalQualityPropertyUnion {
    GpsSignalQualityPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gpssignalquality_;
  } gpsSignalQualityProperty_;
  union GpsAccuracyLatPropertyUnion {
    GpsAccuracyLatPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracylat_;
  } gpsAccuracyLatProperty_;
  union GpsAccuracyLongPropertyUnion {
    GpsAccuracyLongPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracylong_;
  } gpsAccuracyLongProperty_;
  union GpsAccuracyAltPropertyUnion {
    GpsAccuracyAltPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracyalt_;
  } gpsAccuracyAltProperty_;
  union GsmSignalStrengthPropertyUnion {
    GsmSignalStrengthPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gsmsignalstrength_;
  } gsmSignalStrengthProperty_;
  union GsmMccPropertyUnion {
    GsmMccPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gsmmcc_;
  } gsmMccProperty_;
  union GsmMncPropertyUnion {
    GsmMncPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gsmmnc_;
  } gsmMncProperty_;
  union IgnitionOnPropertyUnion {
    IgnitionOnPropertyUnion() {}
    int ignitionon_;
  } ignitionOnProperty_;
  union CrankOnPropertyUnion {
    CrankOnPropertyUnion() {}
    int crankon_;
  } crankOnProperty_;
  union VehicleSpeedPropertyUnion {
    VehicleSpeedPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 vehiclespeed_;
  } vehicleSpeedProperty_;
  union EngineRpmPropertyUnion {
    EngineRpmPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 enginerpm_;
  } engineRpmProperty_;
  union SteeringAnglePropertyUnion {
    SteeringAnglePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 steeringangle_;
  } steeringAngleProperty_;
  union DistanceTravelledPropertyUnion {
    DistanceTravelledPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 distancetravelled_;
  } distanceTravelledProperty_;
  union OutsideAmbientTemperaturePropertyUnion {
    OutsideAmbientTemperaturePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 outsideambienttemperature_;
  } outsideAmbientTemperatureProperty_;
  union VehicleInteriorTemperaturePropertyUnion {
    VehicleInteriorTemperaturePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 vehicleinteriortemperature_;
  } vehicleInteriorTemperatureProperty_;
  union SteeringDirectionPropertyUnion {
    SteeringDirectionPropertyUnion() {}
    int steeringdirection_;
  } steeringDirectionProperty_;
  union AcCompressorPressurePropertyUnion {
    AcCompressorPressurePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 accompressorpressure_;
  } acCompressorPressureProperty_;
  union AcceleratorPedalPositionPropertyUnion {
    AcceleratorPedalPositionPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 acceleratorpedalposition_;
  } acceleratorPedalPositionProperty_;
  union AtmosphericPressurePropertyUnion {
    AtmosphericPressurePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 atmosphericpressure_;
  } atmosphericPressureProperty_;
  union TransmissionOilTemperaturePropertyUnion {
    TransmissionOilTemperaturePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 transmissionoiltemperature_;
  } transmissionOilTemperatureProperty_;
  union EvGearInfoPropertyUnion {
    EvGearInfoPropertyUnion() {}
    int evgearinfo_;
  } evGearInfoProperty_;
  union VcuPowerModePropertyUnion {
    VcuPowerModePropertyUnion() {}
    int vcupowermode_;
  } vcuPowerModeProperty_;
  union GearInfoPropertyUnion {
    GearInfoPropertyUnion() {}
    int gear_info_;
  } gear_InfoProperty_;
  union FuelRemainingPropertyUnion {
    FuelRemainingPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 fuelremaining_;
  } fuelRemainingProperty_;
  union CumulativeFuelConsumptionRatePropertyUnion {
    CumulativeFuelConsumptionRatePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 cumulativefuelconsumptionrate_;
  } cumulativeFuelConsumptionRateProperty_;
  union EngineIdleSpeedTargetPropertyUnion {
    EngineIdleSpeedTargetPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 engineidlespeedtarget_;
  } engineIdleSpeedTargetProperty_;
  union EngineCoolantTemperaturePropertyUnion {
    EngineCoolantTemperaturePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 enginecoolanttemperature_;
  } engineCoolantTemperatureProperty_;
  union GyroscopeXPropertyUnion {
    GyroscopeXPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopex_;
  } gyroscopeXProperty_;
  union GyroscopeYPropertyUnion {
    GyroscopeYPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopey_;
  } gyroscopeYProperty_;
  union GyroscopeZPropertyUnion {
    GyroscopeZPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopez_;
  } gyroscopeZProperty_;
  union BlowerSpeedPropertyUnion {
    BlowerSpeedPropertyUnion() {}
    int blowerspeed_;
  } blowerSpeedProperty_;
  union HvAmpHrPropertyUnion {
    HvAmpHrPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvamphr_;
  } hvAmpHrProperty_;
  union HvAmpHrRegenPropertyUnion {
    HvAmpHrRegenPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvamphrregen_;
  } hvAmpHrRegenProperty_;
  union HvBattMaxCellVoltagePropertyUnion {
    HvBattMaxCellVoltagePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmaxcellvoltage_;
  } hvBattMaxCellVoltageProperty_;
  union HvBattMinCellVoltagePropertyUnion {
    HvBattMinCellVoltagePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmincellvoltage_;
  } hvBattMinCellVoltageProperty_;
  union HvBattMaxCellTempPropertyUnion {
    HvBattMaxCellTempPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmaxcelltemp_;
  } hvBattMaxCellTempProperty_;
  union HvBattMinCellTempPropertyUnion {
    HvBattMinCellTempPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmincelltemp_;
  } hvBattMinCellTempProperty_;
  union HvBattPackVoltagePropertyUnion {
    HvBattPackVoltagePropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 hvbattpackvoltage_;
  } hvBattPackVoltageProperty_;
  union BrkPressStatePropertyUnion {
    BrkPressStatePropertyUnion() {}
    int brkpressstate_;
  } brkPressStateProperty_;
  union VehicleSpeedTwoPropertyUnion {
    VehicleSpeedTwoPropertyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 vehiclespeedtwo_;
  } vehicleSpeedTwoProperty_;
  union VehicleDriveModePropertyUnion {
    VehicleDriveModePropertyUnion() {}
    int vehicledrivemode_;
  } vehicleDriveModeProperty_;
  union ClutchStatePropertyUnion {
    ClutchStatePropertyUnion() {}
    int clutchstate_;
  } clutchStateProperty_;
  union AcStatePropertyUnion {
    AcStatePropertyUnion() {}
    int acstate_;
  } acStateProperty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[50];

  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TelemetryReading

// .google.protobuf.Timestamp timestamp = 1[json_name = "ts"];
inline bool TelemetryReading::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool TelemetryReading::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TelemetryReading::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TelemetryReading::timestamp() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.timestamp)
  return _internal_timestamp();
}
inline void TelemetryReading::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.bosch.itrams_gen2e.TelemetryReading.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryReading::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryReading::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:com.bosch.itrams_gen2e.TelemetryReading.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryReading::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryReading::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:com.bosch.itrams_gen2e.TelemetryReading.timestamp)
  return _internal_mutable_timestamp();
}
inline void TelemetryReading::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:com.bosch.itrams_gen2e.TelemetryReading.timestamp)
}

// int32 gpsLat = 2[json_name = "glt"];
inline bool TelemetryReading::_internal_has_gpslat() const {
  return gpsLatProperty_case() == kGpsLat;
}
inline void TelemetryReading::set_has_gpslat() {
  _oneof_case_[0] = kGpsLat;
}
inline void TelemetryReading::clear_gpslat() {
  if (_internal_has_gpslat()) {
    gpsLatProperty_.gpslat_ = 0;
    clear_has_gpsLatProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_gpslat() const {
  if (_internal_has_gpslat()) {
    return gpsLatProperty_.gpslat_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_gpslat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gpslat()) {
    clear_gpsLatProperty();
    set_has_gpslat();
  }
  gpsLatProperty_.gpslat_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::gpslat() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsLat)
  return _internal_gpslat();
}
inline void TelemetryReading::set_gpslat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpslat(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsLat)
}

// int32 gpsLong = 3[json_name = "gln"];
inline bool TelemetryReading::_internal_has_gpslong() const {
  return gpsLongProperty_case() == kGpsLong;
}
inline void TelemetryReading::set_has_gpslong() {
  _oneof_case_[1] = kGpsLong;
}
inline void TelemetryReading::clear_gpslong() {
  if (_internal_has_gpslong()) {
    gpsLongProperty_.gpslong_ = 0;
    clear_has_gpsLongProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_gpslong() const {
  if (_internal_has_gpslong()) {
    return gpsLongProperty_.gpslong_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_gpslong(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gpslong()) {
    clear_gpsLongProperty();
    set_has_gpslong();
  }
  gpsLongProperty_.gpslong_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::gpslong() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsLong)
  return _internal_gpslong();
}
inline void TelemetryReading::set_gpslong(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpslong(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsLong)
}

// int32 gpsAlt = 4[json_name = "gal"];
inline bool TelemetryReading::_internal_has_gpsalt() const {
  return gpsAltProperty_case() == kGpsAlt;
}
inline void TelemetryReading::set_has_gpsalt() {
  _oneof_case_[2] = kGpsAlt;
}
inline void TelemetryReading::clear_gpsalt() {
  if (_internal_has_gpsalt()) {
    gpsAltProperty_.gpsalt_ = 0;
    clear_has_gpsAltProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_gpsalt() const {
  if (_internal_has_gpsalt()) {
    return gpsAltProperty_.gpsalt_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_gpsalt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gpsalt()) {
    clear_gpsAltProperty();
    set_has_gpsalt();
  }
  gpsAltProperty_.gpsalt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::gpsalt() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsAlt)
  return _internal_gpsalt();
}
inline void TelemetryReading::set_gpsalt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gpsalt(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsAlt)
}

// uint32 gpsCourseAngle = 5[json_name = "gca"];
inline bool TelemetryReading::_internal_has_gpscourseangle() const {
  return gpsCourseAngleProperty_case() == kGpsCourseAngle;
}
inline void TelemetryReading::set_has_gpscourseangle() {
  _oneof_case_[3] = kGpsCourseAngle;
}
inline void TelemetryReading::clear_gpscourseangle() {
  if (_internal_has_gpscourseangle()) {
    gpsCourseAngleProperty_.gpscourseangle_ = 0u;
    clear_has_gpsCourseAngleProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gpscourseangle() const {
  if (_internal_has_gpscourseangle()) {
    return gpsCourseAngleProperty_.gpscourseangle_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gpscourseangle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gpscourseangle()) {
    clear_gpsCourseAngleProperty();
    set_has_gpscourseangle();
  }
  gpsCourseAngleProperty_.gpscourseangle_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gpscourseangle() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsCourseAngle)
  return _internal_gpscourseangle();
}
inline void TelemetryReading::set_gpscourseangle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpscourseangle(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsCourseAngle)
}

// int32 accelX = 6[json_name = "acx"];
inline bool TelemetryReading::_internal_has_accelx() const {
  return accelXProperty_case() == kAccelX;
}
inline void TelemetryReading::set_has_accelx() {
  _oneof_case_[4] = kAccelX;
}
inline void TelemetryReading::clear_accelx() {
  if (_internal_has_accelx()) {
    accelXProperty_.accelx_ = 0;
    clear_has_accelXProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_accelx() const {
  if (_internal_has_accelx()) {
    return accelXProperty_.accelx_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_accelx()) {
    clear_accelXProperty();
    set_has_accelx();
  }
  accelXProperty_.accelx_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::accelx() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.accelX)
  return _internal_accelx();
}
inline void TelemetryReading::set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accelx(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.accelX)
}

// int32 accelY = 7[json_name = "acy"];
inline bool TelemetryReading::_internal_has_accely() const {
  return accelYProperty_case() == kAccelY;
}
inline void TelemetryReading::set_has_accely() {
  _oneof_case_[5] = kAccelY;
}
inline void TelemetryReading::clear_accely() {
  if (_internal_has_accely()) {
    accelYProperty_.accely_ = 0;
    clear_has_accelYProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_accely() const {
  if (_internal_has_accely()) {
    return accelYProperty_.accely_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_accely(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_accely()) {
    clear_accelYProperty();
    set_has_accely();
  }
  accelYProperty_.accely_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::accely() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.accelY)
  return _internal_accely();
}
inline void TelemetryReading::set_accely(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accely(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.accelY)
}

// int32 accelZ = 8[json_name = "acz"];
inline bool TelemetryReading::_internal_has_accelz() const {
  return accelZProperty_case() == kAccelZ;
}
inline void TelemetryReading::set_has_accelz() {
  _oneof_case_[6] = kAccelZ;
}
inline void TelemetryReading::clear_accelz() {
  if (_internal_has_accelz()) {
    accelZProperty_.accelz_ = 0;
    clear_has_accelZProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_accelz() const {
  if (_internal_has_accelz()) {
    return accelZProperty_.accelz_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_accelz()) {
    clear_accelZProperty();
    set_has_accelz();
  }
  accelZProperty_.accelz_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::accelz() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.accelZ)
  return _internal_accelz();
}
inline void TelemetryReading::set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accelz(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.accelZ)
}

// uint32 gpsSignalQuality = 9[json_name = "gsq"];
inline bool TelemetryReading::_internal_has_gpssignalquality() const {
  return gpsSignalQualityProperty_case() == kGpsSignalQuality;
}
inline void TelemetryReading::set_has_gpssignalquality() {
  _oneof_case_[7] = kGpsSignalQuality;
}
inline void TelemetryReading::clear_gpssignalquality() {
  if (_internal_has_gpssignalquality()) {
    gpsSignalQualityProperty_.gpssignalquality_ = 0u;
    clear_has_gpsSignalQualityProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gpssignalquality() const {
  if (_internal_has_gpssignalquality()) {
    return gpsSignalQualityProperty_.gpssignalquality_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gpssignalquality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gpssignalquality()) {
    clear_gpsSignalQualityProperty();
    set_has_gpssignalquality();
  }
  gpsSignalQualityProperty_.gpssignalquality_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gpssignalquality() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsSignalQuality)
  return _internal_gpssignalquality();
}
inline void TelemetryReading::set_gpssignalquality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpssignalquality(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsSignalQuality)
}

// uint32 gpsAccuracyLat = 10[json_name = "gacLt"];
inline bool TelemetryReading::_internal_has_gpsaccuracylat() const {
  return gpsAccuracyLatProperty_case() == kGpsAccuracyLat;
}
inline void TelemetryReading::set_has_gpsaccuracylat() {
  _oneof_case_[8] = kGpsAccuracyLat;
}
inline void TelemetryReading::clear_gpsaccuracylat() {
  if (_internal_has_gpsaccuracylat()) {
    gpsAccuracyLatProperty_.gpsaccuracylat_ = 0u;
    clear_has_gpsAccuracyLatProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gpsaccuracylat() const {
  if (_internal_has_gpsaccuracylat()) {
    return gpsAccuracyLatProperty_.gpsaccuracylat_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gpsaccuracylat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gpsaccuracylat()) {
    clear_gpsAccuracyLatProperty();
    set_has_gpsaccuracylat();
  }
  gpsAccuracyLatProperty_.gpsaccuracylat_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gpsaccuracylat() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsAccuracyLat)
  return _internal_gpsaccuracylat();
}
inline void TelemetryReading::set_gpsaccuracylat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsaccuracylat(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsAccuracyLat)
}

// uint32 gpsAccuracyLong = 11[json_name = "gacLn"];
inline bool TelemetryReading::_internal_has_gpsaccuracylong() const {
  return gpsAccuracyLongProperty_case() == kGpsAccuracyLong;
}
inline void TelemetryReading::set_has_gpsaccuracylong() {
  _oneof_case_[9] = kGpsAccuracyLong;
}
inline void TelemetryReading::clear_gpsaccuracylong() {
  if (_internal_has_gpsaccuracylong()) {
    gpsAccuracyLongProperty_.gpsaccuracylong_ = 0u;
    clear_has_gpsAccuracyLongProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gpsaccuracylong() const {
  if (_internal_has_gpsaccuracylong()) {
    return gpsAccuracyLongProperty_.gpsaccuracylong_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gpsaccuracylong(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gpsaccuracylong()) {
    clear_gpsAccuracyLongProperty();
    set_has_gpsaccuracylong();
  }
  gpsAccuracyLongProperty_.gpsaccuracylong_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gpsaccuracylong() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsAccuracyLong)
  return _internal_gpsaccuracylong();
}
inline void TelemetryReading::set_gpsaccuracylong(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsaccuracylong(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsAccuracyLong)
}

// uint32 gpsAccuracyAlt = 12[json_name = "gacAl"];
inline bool TelemetryReading::_internal_has_gpsaccuracyalt() const {
  return gpsAccuracyAltProperty_case() == kGpsAccuracyAlt;
}
inline void TelemetryReading::set_has_gpsaccuracyalt() {
  _oneof_case_[10] = kGpsAccuracyAlt;
}
inline void TelemetryReading::clear_gpsaccuracyalt() {
  if (_internal_has_gpsaccuracyalt()) {
    gpsAccuracyAltProperty_.gpsaccuracyalt_ = 0u;
    clear_has_gpsAccuracyAltProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gpsaccuracyalt() const {
  if (_internal_has_gpsaccuracyalt()) {
    return gpsAccuracyAltProperty_.gpsaccuracyalt_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gpsaccuracyalt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gpsaccuracyalt()) {
    clear_gpsAccuracyAltProperty();
    set_has_gpsaccuracyalt();
  }
  gpsAccuracyAltProperty_.gpsaccuracyalt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gpsaccuracyalt() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsAccuracyAlt)
  return _internal_gpsaccuracyalt();
}
inline void TelemetryReading::set_gpsaccuracyalt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gpsaccuracyalt(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsAccuracyAlt)
}

// uint32 gsmSignalStrength = 13[json_name = "gsmSig"];
inline bool TelemetryReading::_internal_has_gsmsignalstrength() const {
  return gsmSignalStrengthProperty_case() == kGsmSignalStrength;
}
inline void TelemetryReading::set_has_gsmsignalstrength() {
  _oneof_case_[11] = kGsmSignalStrength;
}
inline void TelemetryReading::clear_gsmsignalstrength() {
  if (_internal_has_gsmsignalstrength()) {
    gsmSignalStrengthProperty_.gsmsignalstrength_ = 0u;
    clear_has_gsmSignalStrengthProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gsmsignalstrength() const {
  if (_internal_has_gsmsignalstrength()) {
    return gsmSignalStrengthProperty_.gsmsignalstrength_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gsmsignalstrength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gsmsignalstrength()) {
    clear_gsmSignalStrengthProperty();
    set_has_gsmsignalstrength();
  }
  gsmSignalStrengthProperty_.gsmsignalstrength_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gsmsignalstrength() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gsmSignalStrength)
  return _internal_gsmsignalstrength();
}
inline void TelemetryReading::set_gsmsignalstrength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gsmsignalstrength(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gsmSignalStrength)
}

// uint32 gsmMcc = 14[json_name = "gsmMCC"];
inline bool TelemetryReading::_internal_has_gsmmcc() const {
  return gsmMccProperty_case() == kGsmMcc;
}
inline void TelemetryReading::set_has_gsmmcc() {
  _oneof_case_[12] = kGsmMcc;
}
inline void TelemetryReading::clear_gsmmcc() {
  if (_internal_has_gsmmcc()) {
    gsmMccProperty_.gsmmcc_ = 0u;
    clear_has_gsmMccProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gsmmcc() const {
  if (_internal_has_gsmmcc()) {
    return gsmMccProperty_.gsmmcc_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gsmmcc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gsmmcc()) {
    clear_gsmMccProperty();
    set_has_gsmmcc();
  }
  gsmMccProperty_.gsmmcc_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gsmmcc() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gsmMcc)
  return _internal_gsmmcc();
}
inline void TelemetryReading::set_gsmmcc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gsmmcc(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gsmMcc)
}

// uint32 gsmMnc = 15[json_name = "gsmMnc"];
inline bool TelemetryReading::_internal_has_gsmmnc() const {
  return gsmMncProperty_case() == kGsmMnc;
}
inline void TelemetryReading::set_has_gsmmnc() {
  _oneof_case_[13] = kGsmMnc;
}
inline void TelemetryReading::clear_gsmmnc() {
  if (_internal_has_gsmmnc()) {
    gsmMncProperty_.gsmmnc_ = 0u;
    clear_has_gsmMncProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gsmmnc() const {
  if (_internal_has_gsmmnc()) {
    return gsmMncProperty_.gsmmnc_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gsmmnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gsmmnc()) {
    clear_gsmMncProperty();
    set_has_gsmmnc();
  }
  gsmMncProperty_.gsmmnc_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gsmmnc() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gsmMnc)
  return _internal_gsmmnc();
}
inline void TelemetryReading::set_gsmmnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gsmmnc(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gsmMnc)
}

// .com.bosch.itrams_gen2e.IgnitionOn ignitionOn = 16[json_name = "ign"];
inline bool TelemetryReading::_internal_has_ignitionon() const {
  return ignitionOnProperty_case() == kIgnitionOn;
}
inline void TelemetryReading::set_has_ignitionon() {
  _oneof_case_[14] = kIgnitionOn;
}
inline void TelemetryReading::clear_ignitionon() {
  if (_internal_has_ignitionon()) {
    ignitionOnProperty_.ignitionon_ = 0;
    clear_has_ignitionOnProperty();
  }
}
inline ::com::bosch::itrams_gen2e::IgnitionOn TelemetryReading::_internal_ignitionon() const {
  if (_internal_has_ignitionon()) {
    return static_cast< ::com::bosch::itrams_gen2e::IgnitionOn >(ignitionOnProperty_.ignitionon_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::IgnitionOn >(0);
}
inline ::com::bosch::itrams_gen2e::IgnitionOn TelemetryReading::ignitionon() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.ignitionOn)
  return _internal_ignitionon();
}
inline void TelemetryReading::_internal_set_ignitionon(::com::bosch::itrams_gen2e::IgnitionOn value) {
  if (!_internal_has_ignitionon()) {
    clear_ignitionOnProperty();
    set_has_ignitionon();
  }
  ignitionOnProperty_.ignitionon_ = value;
}
inline void TelemetryReading::set_ignitionon(::com::bosch::itrams_gen2e::IgnitionOn value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.ignitionOn)
  _internal_set_ignitionon(value);
}

// .com.bosch.itrams_gen2e.CrankOn crankOn = 17[json_name = "cnk"];
inline bool TelemetryReading::_internal_has_crankon() const {
  return crankOnProperty_case() == kCrankOn;
}
inline void TelemetryReading::set_has_crankon() {
  _oneof_case_[15] = kCrankOn;
}
inline void TelemetryReading::clear_crankon() {
  if (_internal_has_crankon()) {
    crankOnProperty_.crankon_ = 0;
    clear_has_crankOnProperty();
  }
}
inline ::com::bosch::itrams_gen2e::CrankOn TelemetryReading::_internal_crankon() const {
  if (_internal_has_crankon()) {
    return static_cast< ::com::bosch::itrams_gen2e::CrankOn >(crankOnProperty_.crankon_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::CrankOn >(0);
}
inline ::com::bosch::itrams_gen2e::CrankOn TelemetryReading::crankon() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.crankOn)
  return _internal_crankon();
}
inline void TelemetryReading::_internal_set_crankon(::com::bosch::itrams_gen2e::CrankOn value) {
  if (!_internal_has_crankon()) {
    clear_crankOnProperty();
    set_has_crankon();
  }
  crankOnProperty_.crankon_ = value;
}
inline void TelemetryReading::set_crankon(::com::bosch::itrams_gen2e::CrankOn value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.crankOn)
  _internal_set_crankon(value);
}

// uint32 vehicleSpeed = 18[json_name = "vsp"];
inline bool TelemetryReading::_internal_has_vehiclespeed() const {
  return vehicleSpeedProperty_case() == kVehicleSpeed;
}
inline void TelemetryReading::set_has_vehiclespeed() {
  _oneof_case_[16] = kVehicleSpeed;
}
inline void TelemetryReading::clear_vehiclespeed() {
  if (_internal_has_vehiclespeed()) {
    vehicleSpeedProperty_.vehiclespeed_ = 0u;
    clear_has_vehicleSpeedProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_vehiclespeed() const {
  if (_internal_has_vehiclespeed()) {
    return vehicleSpeedProperty_.vehiclespeed_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_vehiclespeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_vehiclespeed()) {
    clear_vehicleSpeedProperty();
    set_has_vehiclespeed();
  }
  vehicleSpeedProperty_.vehiclespeed_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::vehiclespeed() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vehicleSpeed)
  return _internal_vehiclespeed();
}
inline void TelemetryReading::set_vehiclespeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vehiclespeed(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vehicleSpeed)
}

// uint32 engineRpm = 19[json_name = "rpm"];
inline bool TelemetryReading::_internal_has_enginerpm() const {
  return engineRpmProperty_case() == kEngineRpm;
}
inline void TelemetryReading::set_has_enginerpm() {
  _oneof_case_[17] = kEngineRpm;
}
inline void TelemetryReading::clear_enginerpm() {
  if (_internal_has_enginerpm()) {
    engineRpmProperty_.enginerpm_ = 0u;
    clear_has_engineRpmProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_enginerpm() const {
  if (_internal_has_enginerpm()) {
    return engineRpmProperty_.enginerpm_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_enginerpm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_enginerpm()) {
    clear_engineRpmProperty();
    set_has_enginerpm();
  }
  engineRpmProperty_.enginerpm_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::enginerpm() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.engineRpm)
  return _internal_enginerpm();
}
inline void TelemetryReading::set_enginerpm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enginerpm(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.engineRpm)
}

// uint32 steeringAngle = 20[json_name = "sta"];
inline bool TelemetryReading::_internal_has_steeringangle() const {
  return steeringAngleProperty_case() == kSteeringAngle;
}
inline void TelemetryReading::set_has_steeringangle() {
  _oneof_case_[18] = kSteeringAngle;
}
inline void TelemetryReading::clear_steeringangle() {
  if (_internal_has_steeringangle()) {
    steeringAngleProperty_.steeringangle_ = 0u;
    clear_has_steeringAngleProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_steeringangle() const {
  if (_internal_has_steeringangle()) {
    return steeringAngleProperty_.steeringangle_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_steeringangle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_steeringangle()) {
    clear_steeringAngleProperty();
    set_has_steeringangle();
  }
  steeringAngleProperty_.steeringangle_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::steeringangle() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.steeringAngle)
  return _internal_steeringangle();
}
inline void TelemetryReading::set_steeringangle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steeringangle(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.steeringAngle)
}

// uint32 distanceTravelled = 21[json_name = "tdt"];
inline bool TelemetryReading::_internal_has_distancetravelled() const {
  return distanceTravelledProperty_case() == kDistanceTravelled;
}
inline void TelemetryReading::set_has_distancetravelled() {
  _oneof_case_[19] = kDistanceTravelled;
}
inline void TelemetryReading::clear_distancetravelled() {
  if (_internal_has_distancetravelled()) {
    distanceTravelledProperty_.distancetravelled_ = 0u;
    clear_has_distanceTravelledProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_distancetravelled() const {
  if (_internal_has_distancetravelled()) {
    return distanceTravelledProperty_.distancetravelled_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_distancetravelled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_distancetravelled()) {
    clear_distanceTravelledProperty();
    set_has_distancetravelled();
  }
  distanceTravelledProperty_.distancetravelled_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::distancetravelled() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.distanceTravelled)
  return _internal_distancetravelled();
}
inline void TelemetryReading::set_distancetravelled(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distancetravelled(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.distanceTravelled)
}

// int32 outsideAmbientTemperature = 22[json_name = "oat"];
inline bool TelemetryReading::_internal_has_outsideambienttemperature() const {
  return outsideAmbientTemperatureProperty_case() == kOutsideAmbientTemperature;
}
inline void TelemetryReading::set_has_outsideambienttemperature() {
  _oneof_case_[20] = kOutsideAmbientTemperature;
}
inline void TelemetryReading::clear_outsideambienttemperature() {
  if (_internal_has_outsideambienttemperature()) {
    outsideAmbientTemperatureProperty_.outsideambienttemperature_ = 0;
    clear_has_outsideAmbientTemperatureProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_outsideambienttemperature() const {
  if (_internal_has_outsideambienttemperature()) {
    return outsideAmbientTemperatureProperty_.outsideambienttemperature_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_outsideambienttemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_outsideambienttemperature()) {
    clear_outsideAmbientTemperatureProperty();
    set_has_outsideambienttemperature();
  }
  outsideAmbientTemperatureProperty_.outsideambienttemperature_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::outsideambienttemperature() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.outsideAmbientTemperature)
  return _internal_outsideambienttemperature();
}
inline void TelemetryReading::set_outsideambienttemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_outsideambienttemperature(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.outsideAmbientTemperature)
}

// int32 vehicleInteriorTemperature = 23[json_name = "vit"];
inline bool TelemetryReading::_internal_has_vehicleinteriortemperature() const {
  return vehicleInteriorTemperatureProperty_case() == kVehicleInteriorTemperature;
}
inline void TelemetryReading::set_has_vehicleinteriortemperature() {
  _oneof_case_[21] = kVehicleInteriorTemperature;
}
inline void TelemetryReading::clear_vehicleinteriortemperature() {
  if (_internal_has_vehicleinteriortemperature()) {
    vehicleInteriorTemperatureProperty_.vehicleinteriortemperature_ = 0;
    clear_has_vehicleInteriorTemperatureProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_vehicleinteriortemperature() const {
  if (_internal_has_vehicleinteriortemperature()) {
    return vehicleInteriorTemperatureProperty_.vehicleinteriortemperature_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_vehicleinteriortemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_vehicleinteriortemperature()) {
    clear_vehicleInteriorTemperatureProperty();
    set_has_vehicleinteriortemperature();
  }
  vehicleInteriorTemperatureProperty_.vehicleinteriortemperature_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::vehicleinteriortemperature() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vehicleInteriorTemperature)
  return _internal_vehicleinteriortemperature();
}
inline void TelemetryReading::set_vehicleinteriortemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vehicleinteriortemperature(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vehicleInteriorTemperature)
}

// .com.bosch.itrams_gen2e.SteeringDirection steeringDirection = 24[json_name = "sdn"];
inline bool TelemetryReading::_internal_has_steeringdirection() const {
  return steeringDirectionProperty_case() == kSteeringDirection;
}
inline void TelemetryReading::set_has_steeringdirection() {
  _oneof_case_[22] = kSteeringDirection;
}
inline void TelemetryReading::clear_steeringdirection() {
  if (_internal_has_steeringdirection()) {
    steeringDirectionProperty_.steeringdirection_ = 0;
    clear_has_steeringDirectionProperty();
  }
}
inline ::com::bosch::itrams_gen2e::SteeringDirection TelemetryReading::_internal_steeringdirection() const {
  if (_internal_has_steeringdirection()) {
    return static_cast< ::com::bosch::itrams_gen2e::SteeringDirection >(steeringDirectionProperty_.steeringdirection_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::SteeringDirection >(0);
}
inline ::com::bosch::itrams_gen2e::SteeringDirection TelemetryReading::steeringdirection() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.steeringDirection)
  return _internal_steeringdirection();
}
inline void TelemetryReading::_internal_set_steeringdirection(::com::bosch::itrams_gen2e::SteeringDirection value) {
  if (!_internal_has_steeringdirection()) {
    clear_steeringDirectionProperty();
    set_has_steeringdirection();
  }
  steeringDirectionProperty_.steeringdirection_ = value;
}
inline void TelemetryReading::set_steeringdirection(::com::bosch::itrams_gen2e::SteeringDirection value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.steeringDirection)
  _internal_set_steeringdirection(value);
}

// uint32 acCompressorPressure = 25[json_name = "acp"];
inline bool TelemetryReading::_internal_has_accompressorpressure() const {
  return acCompressorPressureProperty_case() == kAcCompressorPressure;
}
inline void TelemetryReading::set_has_accompressorpressure() {
  _oneof_case_[23] = kAcCompressorPressure;
}
inline void TelemetryReading::clear_accompressorpressure() {
  if (_internal_has_accompressorpressure()) {
    acCompressorPressureProperty_.accompressorpressure_ = 0u;
    clear_has_acCompressorPressureProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_accompressorpressure() const {
  if (_internal_has_accompressorpressure()) {
    return acCompressorPressureProperty_.accompressorpressure_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_accompressorpressure(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_accompressorpressure()) {
    clear_acCompressorPressureProperty();
    set_has_accompressorpressure();
  }
  acCompressorPressureProperty_.accompressorpressure_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::accompressorpressure() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acCompressorPressure)
  return _internal_accompressorpressure();
}
inline void TelemetryReading::set_accompressorpressure(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accompressorpressure(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acCompressorPressure)
}

// uint32 acceleratorPedalPosition = 26[json_name = "app"];
inline bool TelemetryReading::_internal_has_acceleratorpedalposition() const {
  return acceleratorPedalPositionProperty_case() == kAcceleratorPedalPosition;
}
inline void TelemetryReading::set_has_acceleratorpedalposition() {
  _oneof_case_[24] = kAcceleratorPedalPosition;
}
inline void TelemetryReading::clear_acceleratorpedalposition() {
  if (_internal_has_acceleratorpedalposition()) {
    acceleratorPedalPositionProperty_.acceleratorpedalposition_ = 0u;
    clear_has_acceleratorPedalPositionProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_acceleratorpedalposition() const {
  if (_internal_has_acceleratorpedalposition()) {
    return acceleratorPedalPositionProperty_.acceleratorpedalposition_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_acceleratorpedalposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_acceleratorpedalposition()) {
    clear_acceleratorPedalPositionProperty();
    set_has_acceleratorpedalposition();
  }
  acceleratorPedalPositionProperty_.acceleratorpedalposition_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::acceleratorpedalposition() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acceleratorPedalPosition)
  return _internal_acceleratorpedalposition();
}
inline void TelemetryReading::set_acceleratorpedalposition(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_acceleratorpedalposition(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acceleratorPedalPosition)
}

// uint32 atmosphericPressure = 27[json_name = "atp"];
inline bool TelemetryReading::_internal_has_atmosphericpressure() const {
  return atmosphericPressureProperty_case() == kAtmosphericPressure;
}
inline void TelemetryReading::set_has_atmosphericpressure() {
  _oneof_case_[25] = kAtmosphericPressure;
}
inline void TelemetryReading::clear_atmosphericpressure() {
  if (_internal_has_atmosphericpressure()) {
    atmosphericPressureProperty_.atmosphericpressure_ = 0u;
    clear_has_atmosphericPressureProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_atmosphericpressure() const {
  if (_internal_has_atmosphericpressure()) {
    return atmosphericPressureProperty_.atmosphericpressure_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_atmosphericpressure(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_atmosphericpressure()) {
    clear_atmosphericPressureProperty();
    set_has_atmosphericpressure();
  }
  atmosphericPressureProperty_.atmosphericpressure_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::atmosphericpressure() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.atmosphericPressure)
  return _internal_atmosphericpressure();
}
inline void TelemetryReading::set_atmosphericpressure(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atmosphericpressure(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.atmosphericPressure)
}

// int32 transmissionOilTemperature = 28[json_name = "tot"];
inline bool TelemetryReading::_internal_has_transmissionoiltemperature() const {
  return transmissionOilTemperatureProperty_case() == kTransmissionOilTemperature;
}
inline void TelemetryReading::set_has_transmissionoiltemperature() {
  _oneof_case_[26] = kTransmissionOilTemperature;
}
inline void TelemetryReading::clear_transmissionoiltemperature() {
  if (_internal_has_transmissionoiltemperature()) {
    transmissionOilTemperatureProperty_.transmissionoiltemperature_ = 0;
    clear_has_transmissionOilTemperatureProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_transmissionoiltemperature() const {
  if (_internal_has_transmissionoiltemperature()) {
    return transmissionOilTemperatureProperty_.transmissionoiltemperature_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_transmissionoiltemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_transmissionoiltemperature()) {
    clear_transmissionOilTemperatureProperty();
    set_has_transmissionoiltemperature();
  }
  transmissionOilTemperatureProperty_.transmissionoiltemperature_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::transmissionoiltemperature() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.transmissionOilTemperature)
  return _internal_transmissionoiltemperature();
}
inline void TelemetryReading::set_transmissionoiltemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transmissionoiltemperature(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.transmissionOilTemperature)
}

// .com.bosch.itrams_gen2e.EVGearState evGearInfo = 29[json_name = "egi"];
inline bool TelemetryReading::_internal_has_evgearinfo() const {
  return evGearInfoProperty_case() == kEvGearInfo;
}
inline void TelemetryReading::set_has_evgearinfo() {
  _oneof_case_[27] = kEvGearInfo;
}
inline void TelemetryReading::clear_evgearinfo() {
  if (_internal_has_evgearinfo()) {
    evGearInfoProperty_.evgearinfo_ = 0;
    clear_has_evGearInfoProperty();
  }
}
inline ::com::bosch::itrams_gen2e::EVGearState TelemetryReading::_internal_evgearinfo() const {
  if (_internal_has_evgearinfo()) {
    return static_cast< ::com::bosch::itrams_gen2e::EVGearState >(evGearInfoProperty_.evgearinfo_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::EVGearState >(0);
}
inline ::com::bosch::itrams_gen2e::EVGearState TelemetryReading::evgearinfo() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.evGearInfo)
  return _internal_evgearinfo();
}
inline void TelemetryReading::_internal_set_evgearinfo(::com::bosch::itrams_gen2e::EVGearState value) {
  if (!_internal_has_evgearinfo()) {
    clear_evGearInfoProperty();
    set_has_evgearinfo();
  }
  evGearInfoProperty_.evgearinfo_ = value;
}
inline void TelemetryReading::set_evgearinfo(::com::bosch::itrams_gen2e::EVGearState value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.evGearInfo)
  _internal_set_evgearinfo(value);
}

// .com.bosch.itrams_gen2e.VCUPowerMode vcuPowerMode = 30[json_name = "vcupm"];
inline bool TelemetryReading::_internal_has_vcupowermode() const {
  return vcuPowerModeProperty_case() == kVcuPowerMode;
}
inline void TelemetryReading::set_has_vcupowermode() {
  _oneof_case_[28] = kVcuPowerMode;
}
inline void TelemetryReading::clear_vcupowermode() {
  if (_internal_has_vcupowermode()) {
    vcuPowerModeProperty_.vcupowermode_ = 0;
    clear_has_vcuPowerModeProperty();
  }
}
inline ::com::bosch::itrams_gen2e::VCUPowerMode TelemetryReading::_internal_vcupowermode() const {
  if (_internal_has_vcupowermode()) {
    return static_cast< ::com::bosch::itrams_gen2e::VCUPowerMode >(vcuPowerModeProperty_.vcupowermode_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::VCUPowerMode >(0);
}
inline ::com::bosch::itrams_gen2e::VCUPowerMode TelemetryReading::vcupowermode() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vcuPowerMode)
  return _internal_vcupowermode();
}
inline void TelemetryReading::_internal_set_vcupowermode(::com::bosch::itrams_gen2e::VCUPowerMode value) {
  if (!_internal_has_vcupowermode()) {
    clear_vcuPowerModeProperty();
    set_has_vcupowermode();
  }
  vcuPowerModeProperty_.vcupowermode_ = value;
}
inline void TelemetryReading::set_vcupowermode(::com::bosch::itrams_gen2e::VCUPowerMode value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vcuPowerMode)
  _internal_set_vcupowermode(value);
}

// .com.bosch.itrams_gen2e.GearState gear_Info = 31[json_name = "grinfo"];
inline bool TelemetryReading::_internal_has_gear_info() const {
  return gear_InfoProperty_case() == kGearInfo;
}
inline void TelemetryReading::set_has_gear_info() {
  _oneof_case_[29] = kGearInfo;
}
inline void TelemetryReading::clear_gear_info() {
  if (_internal_has_gear_info()) {
    gear_InfoProperty_.gear_info_ = 0;
    clear_has_gear_InfoProperty();
  }
}
inline ::com::bosch::itrams_gen2e::GearState TelemetryReading::_internal_gear_info() const {
  if (_internal_has_gear_info()) {
    return static_cast< ::com::bosch::itrams_gen2e::GearState >(gear_InfoProperty_.gear_info_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::GearState >(0);
}
inline ::com::bosch::itrams_gen2e::GearState TelemetryReading::gear_info() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gear_Info)
  return _internal_gear_info();
}
inline void TelemetryReading::_internal_set_gear_info(::com::bosch::itrams_gen2e::GearState value) {
  if (!_internal_has_gear_info()) {
    clear_gear_InfoProperty();
    set_has_gear_info();
  }
  gear_InfoProperty_.gear_info_ = value;
}
inline void TelemetryReading::set_gear_info(::com::bosch::itrams_gen2e::GearState value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gear_Info)
  _internal_set_gear_info(value);
}

// uint32 fuelRemaining = 32[json_name = "fuel"];
inline bool TelemetryReading::_internal_has_fuelremaining() const {
  return fuelRemainingProperty_case() == kFuelRemaining;
}
inline void TelemetryReading::set_has_fuelremaining() {
  _oneof_case_[30] = kFuelRemaining;
}
inline void TelemetryReading::clear_fuelremaining() {
  if (_internal_has_fuelremaining()) {
    fuelRemainingProperty_.fuelremaining_ = 0u;
    clear_has_fuelRemainingProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_fuelremaining() const {
  if (_internal_has_fuelremaining()) {
    return fuelRemainingProperty_.fuelremaining_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_fuelremaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_fuelremaining()) {
    clear_fuelRemainingProperty();
    set_has_fuelremaining();
  }
  fuelRemainingProperty_.fuelremaining_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::fuelremaining() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.fuelRemaining)
  return _internal_fuelremaining();
}
inline void TelemetryReading::set_fuelremaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fuelremaining(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.fuelRemaining)
}

// uint32 cumulativeFuelConsumptionRate = 33[json_name = "cfr"];
inline bool TelemetryReading::_internal_has_cumulativefuelconsumptionrate() const {
  return cumulativeFuelConsumptionRateProperty_case() == kCumulativeFuelConsumptionRate;
}
inline void TelemetryReading::set_has_cumulativefuelconsumptionrate() {
  _oneof_case_[31] = kCumulativeFuelConsumptionRate;
}
inline void TelemetryReading::clear_cumulativefuelconsumptionrate() {
  if (_internal_has_cumulativefuelconsumptionrate()) {
    cumulativeFuelConsumptionRateProperty_.cumulativefuelconsumptionrate_ = 0u;
    clear_has_cumulativeFuelConsumptionRateProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_cumulativefuelconsumptionrate() const {
  if (_internal_has_cumulativefuelconsumptionrate()) {
    return cumulativeFuelConsumptionRateProperty_.cumulativefuelconsumptionrate_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_cumulativefuelconsumptionrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_cumulativefuelconsumptionrate()) {
    clear_cumulativeFuelConsumptionRateProperty();
    set_has_cumulativefuelconsumptionrate();
  }
  cumulativeFuelConsumptionRateProperty_.cumulativefuelconsumptionrate_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::cumulativefuelconsumptionrate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.cumulativeFuelConsumptionRate)
  return _internal_cumulativefuelconsumptionrate();
}
inline void TelemetryReading::set_cumulativefuelconsumptionrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cumulativefuelconsumptionrate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.cumulativeFuelConsumptionRate)
}

// uint32 engineIdleSpeedTarget = 34[json_name = "eis"];
inline bool TelemetryReading::_internal_has_engineidlespeedtarget() const {
  return engineIdleSpeedTargetProperty_case() == kEngineIdleSpeedTarget;
}
inline void TelemetryReading::set_has_engineidlespeedtarget() {
  _oneof_case_[32] = kEngineIdleSpeedTarget;
}
inline void TelemetryReading::clear_engineidlespeedtarget() {
  if (_internal_has_engineidlespeedtarget()) {
    engineIdleSpeedTargetProperty_.engineidlespeedtarget_ = 0u;
    clear_has_engineIdleSpeedTargetProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_engineidlespeedtarget() const {
  if (_internal_has_engineidlespeedtarget()) {
    return engineIdleSpeedTargetProperty_.engineidlespeedtarget_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_engineidlespeedtarget(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_engineidlespeedtarget()) {
    clear_engineIdleSpeedTargetProperty();
    set_has_engineidlespeedtarget();
  }
  engineIdleSpeedTargetProperty_.engineidlespeedtarget_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::engineidlespeedtarget() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.engineIdleSpeedTarget)
  return _internal_engineidlespeedtarget();
}
inline void TelemetryReading::set_engineidlespeedtarget(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_engineidlespeedtarget(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.engineIdleSpeedTarget)
}

// int32 engineCoolantTemperature = 35[json_name = "ect"];
inline bool TelemetryReading::_internal_has_enginecoolanttemperature() const {
  return engineCoolantTemperatureProperty_case() == kEngineCoolantTemperature;
}
inline void TelemetryReading::set_has_enginecoolanttemperature() {
  _oneof_case_[33] = kEngineCoolantTemperature;
}
inline void TelemetryReading::clear_enginecoolanttemperature() {
  if (_internal_has_enginecoolanttemperature()) {
    engineCoolantTemperatureProperty_.enginecoolanttemperature_ = 0;
    clear_has_engineCoolantTemperatureProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_enginecoolanttemperature() const {
  if (_internal_has_enginecoolanttemperature()) {
    return engineCoolantTemperatureProperty_.enginecoolanttemperature_;
  }
  return 0;
}
inline void TelemetryReading::_internal_set_enginecoolanttemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_enginecoolanttemperature()) {
    clear_engineCoolantTemperatureProperty();
    set_has_enginecoolanttemperature();
  }
  engineCoolantTemperatureProperty_.enginecoolanttemperature_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::enginecoolanttemperature() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.engineCoolantTemperature)
  return _internal_enginecoolanttemperature();
}
inline void TelemetryReading::set_enginecoolanttemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enginecoolanttemperature(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.engineCoolantTemperature)
}

// uint32 gyroscopeX = 36[json_name = "gyroX"];
inline bool TelemetryReading::_internal_has_gyroscopex() const {
  return gyroscopeXProperty_case() == kGyroscopeX;
}
inline void TelemetryReading::set_has_gyroscopex() {
  _oneof_case_[34] = kGyroscopeX;
}
inline void TelemetryReading::clear_gyroscopex() {
  if (_internal_has_gyroscopex()) {
    gyroscopeXProperty_.gyroscopex_ = 0u;
    clear_has_gyroscopeXProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gyroscopex() const {
  if (_internal_has_gyroscopex()) {
    return gyroscopeXProperty_.gyroscopex_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gyroscopex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gyroscopex()) {
    clear_gyroscopeXProperty();
    set_has_gyroscopex();
  }
  gyroscopeXProperty_.gyroscopex_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gyroscopex() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gyroscopeX)
  return _internal_gyroscopex();
}
inline void TelemetryReading::set_gyroscopex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gyroscopex(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gyroscopeX)
}

// uint32 gyroscopeY = 37[json_name = "gyroY"];
inline bool TelemetryReading::_internal_has_gyroscopey() const {
  return gyroscopeYProperty_case() == kGyroscopeY;
}
inline void TelemetryReading::set_has_gyroscopey() {
  _oneof_case_[35] = kGyroscopeY;
}
inline void TelemetryReading::clear_gyroscopey() {
  if (_internal_has_gyroscopey()) {
    gyroscopeYProperty_.gyroscopey_ = 0u;
    clear_has_gyroscopeYProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gyroscopey() const {
  if (_internal_has_gyroscopey()) {
    return gyroscopeYProperty_.gyroscopey_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gyroscopey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gyroscopey()) {
    clear_gyroscopeYProperty();
    set_has_gyroscopey();
  }
  gyroscopeYProperty_.gyroscopey_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gyroscopey() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gyroscopeY)
  return _internal_gyroscopey();
}
inline void TelemetryReading::set_gyroscopey(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gyroscopey(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gyroscopeY)
}

// uint32 gyroscopeZ = 38[json_name = "gyroZ"];
inline bool TelemetryReading::_internal_has_gyroscopez() const {
  return gyroscopeZProperty_case() == kGyroscopeZ;
}
inline void TelemetryReading::set_has_gyroscopez() {
  _oneof_case_[36] = kGyroscopeZ;
}
inline void TelemetryReading::clear_gyroscopez() {
  if (_internal_has_gyroscopez()) {
    gyroscopeZProperty_.gyroscopez_ = 0u;
    clear_has_gyroscopeZProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_gyroscopez() const {
  if (_internal_has_gyroscopez()) {
    return gyroscopeZProperty_.gyroscopez_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_gyroscopez(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gyroscopez()) {
    clear_gyroscopeZProperty();
    set_has_gyroscopez();
  }
  gyroscopeZProperty_.gyroscopez_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::gyroscopez() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gyroscopeZ)
  return _internal_gyroscopez();
}
inline void TelemetryReading::set_gyroscopez(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gyroscopez(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gyroscopeZ)
}

// .com.bosch.itrams_gen2e.BlowerSpeed blowerSpeed = 39[json_name = "blspeed"];
inline bool TelemetryReading::_internal_has_blowerspeed() const {
  return blowerSpeedProperty_case() == kBlowerSpeed;
}
inline void TelemetryReading::set_has_blowerspeed() {
  _oneof_case_[37] = kBlowerSpeed;
}
inline void TelemetryReading::clear_blowerspeed() {
  if (_internal_has_blowerspeed()) {
    blowerSpeedProperty_.blowerspeed_ = 0;
    clear_has_blowerSpeedProperty();
  }
}
inline ::com::bosch::itrams_gen2e::BlowerSpeed TelemetryReading::_internal_blowerspeed() const {
  if (_internal_has_blowerspeed()) {
    return static_cast< ::com::bosch::itrams_gen2e::BlowerSpeed >(blowerSpeedProperty_.blowerspeed_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::BlowerSpeed >(0);
}
inline ::com::bosch::itrams_gen2e::BlowerSpeed TelemetryReading::blowerspeed() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.blowerSpeed)
  return _internal_blowerspeed();
}
inline void TelemetryReading::_internal_set_blowerspeed(::com::bosch::itrams_gen2e::BlowerSpeed value) {
  if (!_internal_has_blowerspeed()) {
    clear_blowerSpeedProperty();
    set_has_blowerspeed();
  }
  blowerSpeedProperty_.blowerspeed_ = value;
}
inline void TelemetryReading::set_blowerspeed(::com::bosch::itrams_gen2e::BlowerSpeed value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.blowerSpeed)
  _internal_set_blowerspeed(value);
}

// uint32 hvAmpHr = 40[json_name = "hvamp"];
inline bool TelemetryReading::_internal_has_hvamphr() const {
  return hvAmpHrProperty_case() == kHvAmpHr;
}
inline void TelemetryReading::set_has_hvamphr() {
  _oneof_case_[38] = kHvAmpHr;
}
inline void TelemetryReading::clear_hvamphr() {
  if (_internal_has_hvamphr()) {
    hvAmpHrProperty_.hvamphr_ = 0u;
    clear_has_hvAmpHrProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvamphr() const {
  if (_internal_has_hvamphr()) {
    return hvAmpHrProperty_.hvamphr_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvamphr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvamphr()) {
    clear_hvAmpHrProperty();
    set_has_hvamphr();
  }
  hvAmpHrProperty_.hvamphr_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvamphr() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvAmpHr)
  return _internal_hvamphr();
}
inline void TelemetryReading::set_hvamphr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvamphr(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvAmpHr)
}

// uint32 hvAmpHrRegen = 41[json_name = "hvampreg"];
inline bool TelemetryReading::_internal_has_hvamphrregen() const {
  return hvAmpHrRegenProperty_case() == kHvAmpHrRegen;
}
inline void TelemetryReading::set_has_hvamphrregen() {
  _oneof_case_[39] = kHvAmpHrRegen;
}
inline void TelemetryReading::clear_hvamphrregen() {
  if (_internal_has_hvamphrregen()) {
    hvAmpHrRegenProperty_.hvamphrregen_ = 0u;
    clear_has_hvAmpHrRegenProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvamphrregen() const {
  if (_internal_has_hvamphrregen()) {
    return hvAmpHrRegenProperty_.hvamphrregen_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvamphrregen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvamphrregen()) {
    clear_hvAmpHrRegenProperty();
    set_has_hvamphrregen();
  }
  hvAmpHrRegenProperty_.hvamphrregen_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvamphrregen() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvAmpHrRegen)
  return _internal_hvamphrregen();
}
inline void TelemetryReading::set_hvamphrregen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvamphrregen(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvAmpHrRegen)
}

// uint32 hvBattMaxCellVoltage = 42[json_name = "hbmaxv"];
inline bool TelemetryReading::_internal_has_hvbattmaxcellvoltage() const {
  return hvBattMaxCellVoltageProperty_case() == kHvBattMaxCellVoltage;
}
inline void TelemetryReading::set_has_hvbattmaxcellvoltage() {
  _oneof_case_[40] = kHvBattMaxCellVoltage;
}
inline void TelemetryReading::clear_hvbattmaxcellvoltage() {
  if (_internal_has_hvbattmaxcellvoltage()) {
    hvBattMaxCellVoltageProperty_.hvbattmaxcellvoltage_ = 0u;
    clear_has_hvBattMaxCellVoltageProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattmaxcellvoltage() const {
  if (_internal_has_hvbattmaxcellvoltage()) {
    return hvBattMaxCellVoltageProperty_.hvbattmaxcellvoltage_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvbattmaxcellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvbattmaxcellvoltage()) {
    clear_hvBattMaxCellVoltageProperty();
    set_has_hvbattmaxcellvoltage();
  }
  hvBattMaxCellVoltageProperty_.hvbattmaxcellvoltage_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattmaxcellvoltage() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattMaxCellVoltage)
  return _internal_hvbattmaxcellvoltage();
}
inline void TelemetryReading::set_hvbattmaxcellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattmaxcellvoltage(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattMaxCellVoltage)
}

// uint32 hvBattMinCellVoltage = 43[json_name = "hbminv"];
inline bool TelemetryReading::_internal_has_hvbattmincellvoltage() const {
  return hvBattMinCellVoltageProperty_case() == kHvBattMinCellVoltage;
}
inline void TelemetryReading::set_has_hvbattmincellvoltage() {
  _oneof_case_[41] = kHvBattMinCellVoltage;
}
inline void TelemetryReading::clear_hvbattmincellvoltage() {
  if (_internal_has_hvbattmincellvoltage()) {
    hvBattMinCellVoltageProperty_.hvbattmincellvoltage_ = 0u;
    clear_has_hvBattMinCellVoltageProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattmincellvoltage() const {
  if (_internal_has_hvbattmincellvoltage()) {
    return hvBattMinCellVoltageProperty_.hvbattmincellvoltage_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvbattmincellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvbattmincellvoltage()) {
    clear_hvBattMinCellVoltageProperty();
    set_has_hvbattmincellvoltage();
  }
  hvBattMinCellVoltageProperty_.hvbattmincellvoltage_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattmincellvoltage() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattMinCellVoltage)
  return _internal_hvbattmincellvoltage();
}
inline void TelemetryReading::set_hvbattmincellvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattmincellvoltage(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattMinCellVoltage)
}

// uint32 hvBattMaxCellTemp = 44[json_name = "hbmaxtmp"];
inline bool TelemetryReading::_internal_has_hvbattmaxcelltemp() const {
  return hvBattMaxCellTempProperty_case() == kHvBattMaxCellTemp;
}
inline void TelemetryReading::set_has_hvbattmaxcelltemp() {
  _oneof_case_[42] = kHvBattMaxCellTemp;
}
inline void TelemetryReading::clear_hvbattmaxcelltemp() {
  if (_internal_has_hvbattmaxcelltemp()) {
    hvBattMaxCellTempProperty_.hvbattmaxcelltemp_ = 0u;
    clear_has_hvBattMaxCellTempProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattmaxcelltemp() const {
  if (_internal_has_hvbattmaxcelltemp()) {
    return hvBattMaxCellTempProperty_.hvbattmaxcelltemp_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvbattmaxcelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvbattmaxcelltemp()) {
    clear_hvBattMaxCellTempProperty();
    set_has_hvbattmaxcelltemp();
  }
  hvBattMaxCellTempProperty_.hvbattmaxcelltemp_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattmaxcelltemp() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattMaxCellTemp)
  return _internal_hvbattmaxcelltemp();
}
inline void TelemetryReading::set_hvbattmaxcelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattmaxcelltemp(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattMaxCellTemp)
}

// uint32 hvBattMinCellTemp = 45[json_name = "hbmintmp"];
inline bool TelemetryReading::_internal_has_hvbattmincelltemp() const {
  return hvBattMinCellTempProperty_case() == kHvBattMinCellTemp;
}
inline void TelemetryReading::set_has_hvbattmincelltemp() {
  _oneof_case_[43] = kHvBattMinCellTemp;
}
inline void TelemetryReading::clear_hvbattmincelltemp() {
  if (_internal_has_hvbattmincelltemp()) {
    hvBattMinCellTempProperty_.hvbattmincelltemp_ = 0u;
    clear_has_hvBattMinCellTempProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattmincelltemp() const {
  if (_internal_has_hvbattmincelltemp()) {
    return hvBattMinCellTempProperty_.hvbattmincelltemp_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvbattmincelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvbattmincelltemp()) {
    clear_hvBattMinCellTempProperty();
    set_has_hvbattmincelltemp();
  }
  hvBattMinCellTempProperty_.hvbattmincelltemp_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattmincelltemp() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattMinCellTemp)
  return _internal_hvbattmincelltemp();
}
inline void TelemetryReading::set_hvbattmincelltemp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattmincelltemp(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattMinCellTemp)
}

// uint32 hvBattPackVoltage = 46[json_name = "hbpvol"];
inline bool TelemetryReading::_internal_has_hvbattpackvoltage() const {
  return hvBattPackVoltageProperty_case() == kHvBattPackVoltage;
}
inline void TelemetryReading::set_has_hvbattpackvoltage() {
  _oneof_case_[44] = kHvBattPackVoltage;
}
inline void TelemetryReading::clear_hvbattpackvoltage() {
  if (_internal_has_hvbattpackvoltage()) {
    hvBattPackVoltageProperty_.hvbattpackvoltage_ = 0u;
    clear_has_hvBattPackVoltageProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattpackvoltage() const {
  if (_internal_has_hvbattpackvoltage()) {
    return hvBattPackVoltageProperty_.hvbattpackvoltage_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_hvbattpackvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_hvbattpackvoltage()) {
    clear_hvBattPackVoltageProperty();
    set_has_hvbattpackvoltage();
  }
  hvBattPackVoltageProperty_.hvbattpackvoltage_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattpackvoltage() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattPackVoltage)
  return _internal_hvbattpackvoltage();
}
inline void TelemetryReading::set_hvbattpackvoltage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattpackvoltage(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattPackVoltage)
}

// .com.bosch.itrams_gen2e.BrakePressState brkPressState = 47[json_name = "brkprs"];
inline bool TelemetryReading::_internal_has_brkpressstate() const {
  return brkPressStateProperty_case() == kBrkPressState;
}
inline void TelemetryReading::set_has_brkpressstate() {
  _oneof_case_[45] = kBrkPressState;
}
inline void TelemetryReading::clear_brkpressstate() {
  if (_internal_has_brkpressstate()) {
    brkPressStateProperty_.brkpressstate_ = 0;
    clear_has_brkPressStateProperty();
  }
}
inline ::com::bosch::itrams_gen2e::BrakePressState TelemetryReading::_internal_brkpressstate() const {
  if (_internal_has_brkpressstate()) {
    return static_cast< ::com::bosch::itrams_gen2e::BrakePressState >(brkPressStateProperty_.brkpressstate_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::BrakePressState >(0);
}
inline ::com::bosch::itrams_gen2e::BrakePressState TelemetryReading::brkpressstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.brkPressState)
  return _internal_brkpressstate();
}
inline void TelemetryReading::_internal_set_brkpressstate(::com::bosch::itrams_gen2e::BrakePressState value) {
  if (!_internal_has_brkpressstate()) {
    clear_brkPressStateProperty();
    set_has_brkpressstate();
  }
  brkPressStateProperty_.brkpressstate_ = value;
}
inline void TelemetryReading::set_brkpressstate(::com::bosch::itrams_gen2e::BrakePressState value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.brkPressState)
  _internal_set_brkpressstate(value);
}

// uint32 vehicleSpeedTwo = 48[json_name = "vspd2"];
inline bool TelemetryReading::_internal_has_vehiclespeedtwo() const {
  return vehicleSpeedTwoProperty_case() == kVehicleSpeedTwo;
}
inline void TelemetryReading::set_has_vehiclespeedtwo() {
  _oneof_case_[46] = kVehicleSpeedTwo;
}
inline void TelemetryReading::clear_vehiclespeedtwo() {
  if (_internal_has_vehiclespeedtwo()) {
    vehicleSpeedTwoProperty_.vehiclespeedtwo_ = 0u;
    clear_has_vehicleSpeedTwoProperty();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_vehiclespeedtwo() const {
  if (_internal_has_vehiclespeedtwo()) {
    return vehicleSpeedTwoProperty_.vehiclespeedtwo_;
  }
  return 0u;
}
inline void TelemetryReading::_internal_set_vehiclespeedtwo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_vehiclespeedtwo()) {
    clear_vehicleSpeedTwoProperty();
    set_has_vehiclespeedtwo();
  }
  vehicleSpeedTwoProperty_.vehiclespeedtwo_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::vehiclespeedtwo() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vehicleSpeedTwo)
  return _internal_vehiclespeedtwo();
}
inline void TelemetryReading::set_vehiclespeedtwo(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vehiclespeedtwo(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vehicleSpeedTwo)
}

// .com.bosch.itrams_gen2e.VehicleDriveMode vehicleDriveMode = 49[json_name = "vdrvmd"];
inline bool TelemetryReading::_internal_has_vehicledrivemode() const {
  return vehicleDriveModeProperty_case() == kVehicleDriveMode;
}
inline void TelemetryReading::set_has_vehicledrivemode() {
  _oneof_case_[47] = kVehicleDriveMode;
}
inline void TelemetryReading::clear_vehicledrivemode() {
  if (_internal_has_vehicledrivemode()) {
    vehicleDriveModeProperty_.vehicledrivemode_ = 0;
    clear_has_vehicleDriveModeProperty();
  }
}
inline ::com::bosch::itrams_gen2e::VehicleDriveMode TelemetryReading::_internal_vehicledrivemode() const {
  if (_internal_has_vehicledrivemode()) {
    return static_cast< ::com::bosch::itrams_gen2e::VehicleDriveMode >(vehicleDriveModeProperty_.vehicledrivemode_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::VehicleDriveMode >(0);
}
inline ::com::bosch::itrams_gen2e::VehicleDriveMode TelemetryReading::vehicledrivemode() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vehicleDriveMode)
  return _internal_vehicledrivemode();
}
inline void TelemetryReading::_internal_set_vehicledrivemode(::com::bosch::itrams_gen2e::VehicleDriveMode value) {
  if (!_internal_has_vehicledrivemode()) {
    clear_vehicleDriveModeProperty();
    set_has_vehicledrivemode();
  }
  vehicleDriveModeProperty_.vehicledrivemode_ = value;
}
inline void TelemetryReading::set_vehicledrivemode(::com::bosch::itrams_gen2e::VehicleDriveMode value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vehicleDriveMode)
  _internal_set_vehicledrivemode(value);
}

// .com.bosch.itrams_gen2e.ClutchState clutchState = 50[json_name = "clthst"];
inline bool TelemetryReading::_internal_has_clutchstate() const {
  return clutchStateProperty_case() == kClutchState;
}
inline void TelemetryReading::set_has_clutchstate() {
  _oneof_case_[48] = kClutchState;
}
inline void TelemetryReading::clear_clutchstate() {
  if (_internal_has_clutchstate()) {
    clutchStateProperty_.clutchstate_ = 0;
    clear_has_clutchStateProperty();
  }
}
inline ::com::bosch::itrams_gen2e::ClutchState TelemetryReading::_internal_clutchstate() const {
  if (_internal_has_clutchstate()) {
    return static_cast< ::com::bosch::itrams_gen2e::ClutchState >(clutchStateProperty_.clutchstate_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::ClutchState >(0);
}
inline ::com::bosch::itrams_gen2e::ClutchState TelemetryReading::clutchstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.clutchState)
  return _internal_clutchstate();
}
inline void TelemetryReading::_internal_set_clutchstate(::com::bosch::itrams_gen2e::ClutchState value) {
  if (!_internal_has_clutchstate()) {
    clear_clutchStateProperty();
    set_has_clutchstate();
  }
  clutchStateProperty_.clutchstate_ = value;
}
inline void TelemetryReading::set_clutchstate(::com::bosch::itrams_gen2e::ClutchState value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.clutchState)
  _internal_set_clutchstate(value);
}

// .com.bosch.itrams_gen2e.AcState acState = 51[json_name = "acst"];
inline bool TelemetryReading::_internal_has_acstate() const {
  return acStateProperty_case() == kAcState;
}
inline void TelemetryReading::set_has_acstate() {
  _oneof_case_[49] = kAcState;
}
inline void TelemetryReading::clear_acstate() {
  if (_internal_has_acstate()) {
    acStateProperty_.acstate_ = 0;
    clear_has_acStateProperty();
  }
}
inline ::com::bosch::itrams_gen2e::AcState TelemetryReading::_internal_acstate() const {
  if (_internal_has_acstate()) {
    return static_cast< ::com::bosch::itrams_gen2e::AcState >(acStateProperty_.acstate_);
  }
  return static_cast< ::com::bosch::itrams_gen2e::AcState >(0);
}
inline ::com::bosch::itrams_gen2e::AcState TelemetryReading::acstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acState)
  return _internal_acstate();
}
inline void TelemetryReading::_internal_set_acstate(::com::bosch::itrams_gen2e::AcState value) {
  if (!_internal_has_acstate()) {
    clear_acStateProperty();
    set_has_acstate();
  }
  acStateProperty_.acstate_ = value;
}
inline void TelemetryReading::set_acstate(::com::bosch::itrams_gen2e::AcState value) {
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acState)
  _internal_set_acstate(value);
}

// .com.bosch.itrams_gen2e.GPsFixStatus gpsFixStatus = 52[json_name = "gpsfixSt"];
inline void TelemetryReading::clear_gpsfixstatus() {
  gpsfixstatus_ = 0;
}
inline ::com::bosch::itrams_gen2e::GPsFixStatus TelemetryReading::_internal_gpsfixstatus() const {
  return static_cast< ::com::bosch::itrams_gen2e::GPsFixStatus >(gpsfixstatus_);
}
inline ::com::bosch::itrams_gen2e::GPsFixStatus TelemetryReading::gpsfixstatus() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.gpsFixStatus)
  return _internal_gpsfixstatus();
}
inline void TelemetryReading::_internal_set_gpsfixstatus(::com::bosch::itrams_gen2e::GPsFixStatus value) {
  
  gpsfixstatus_ = value;
}
inline void TelemetryReading::set_gpsfixstatus(::com::bosch::itrams_gen2e::GPsFixStatus value) {
  _internal_set_gpsfixstatus(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.gpsFixStatus)
}

// .com.bosch.itrams_gen2e.PowerModeState powerModeState = 53[json_name = "pwrmdst"];
inline void TelemetryReading::clear_powermodestate() {
  powermodestate_ = 0;
}
inline ::com::bosch::itrams_gen2e::PowerModeState TelemetryReading::_internal_powermodestate() const {
  return static_cast< ::com::bosch::itrams_gen2e::PowerModeState >(powermodestate_);
}
inline ::com::bosch::itrams_gen2e::PowerModeState TelemetryReading::powermodestate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.powerModeState)
  return _internal_powermodestate();
}
inline void TelemetryReading::_internal_set_powermodestate(::com::bosch::itrams_gen2e::PowerModeState value) {
  
  powermodestate_ = value;
}
inline void TelemetryReading::set_powermodestate(::com::bosch::itrams_gen2e::PowerModeState value) {
  _internal_set_powermodestate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.powerModeState)
}

// .com.bosch.itrams_gen2e.HornState hornState = 54[json_name = "hrnst"];
inline void TelemetryReading::clear_hornstate() {
  hornstate_ = 0;
}
inline ::com::bosch::itrams_gen2e::HornState TelemetryReading::_internal_hornstate() const {
  return static_cast< ::com::bosch::itrams_gen2e::HornState >(hornstate_);
}
inline ::com::bosch::itrams_gen2e::HornState TelemetryReading::hornstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hornState)
  return _internal_hornstate();
}
inline void TelemetryReading::_internal_set_hornstate(::com::bosch::itrams_gen2e::HornState value) {
  
  hornstate_ = value;
}
inline void TelemetryReading::set_hornstate(::com::bosch::itrams_gen2e::HornState value) {
  _internal_set_hornstate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hornState)
}

// .com.bosch.itrams_gen2e.HighBeamLampOnFlag highBeamLampOnFlag = 55[json_name = "hblf"];
inline void TelemetryReading::clear_highbeamlamponflag() {
  highbeamlamponflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::HighBeamLampOnFlag TelemetryReading::_internal_highbeamlamponflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::HighBeamLampOnFlag >(highbeamlamponflag_);
}
inline ::com::bosch::itrams_gen2e::HighBeamLampOnFlag TelemetryReading::highbeamlamponflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.highBeamLampOnFlag)
  return _internal_highbeamlamponflag();
}
inline void TelemetryReading::_internal_set_highbeamlamponflag(::com::bosch::itrams_gen2e::HighBeamLampOnFlag value) {
  
  highbeamlamponflag_ = value;
}
inline void TelemetryReading::set_highbeamlamponflag(::com::bosch::itrams_gen2e::HighBeamLampOnFlag value) {
  _internal_set_highbeamlamponflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.highBeamLampOnFlag)
}

// .com.bosch.itrams_gen2e.LowBeamLampOnFlag lowBeamLampOnFlag = 56[json_name = "lblf"];
inline void TelemetryReading::clear_lowbeamlamponflag() {
  lowbeamlamponflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::LowBeamLampOnFlag TelemetryReading::_internal_lowbeamlamponflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::LowBeamLampOnFlag >(lowbeamlamponflag_);
}
inline ::com::bosch::itrams_gen2e::LowBeamLampOnFlag TelemetryReading::lowbeamlamponflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.lowBeamLampOnFlag)
  return _internal_lowbeamlamponflag();
}
inline void TelemetryReading::_internal_set_lowbeamlamponflag(::com::bosch::itrams_gen2e::LowBeamLampOnFlag value) {
  
  lowbeamlamponflag_ = value;
}
inline void TelemetryReading::set_lowbeamlamponflag(::com::bosch::itrams_gen2e::LowBeamLampOnFlag value) {
  _internal_set_lowbeamlamponflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.lowBeamLampOnFlag)
}

// .com.bosch.itrams_gen2e.LeftFrontDoorOpenFlag leftFrontDoorOpenFlag = 57[json_name = "lfdof"];
inline void TelemetryReading::clear_leftfrontdooropenflag() {
  leftfrontdooropenflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag TelemetryReading::_internal_leftfrontdooropenflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag >(leftfrontdooropenflag_);
}
inline ::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag TelemetryReading::leftfrontdooropenflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.leftFrontDoorOpenFlag)
  return _internal_leftfrontdooropenflag();
}
inline void TelemetryReading::_internal_set_leftfrontdooropenflag(::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag value) {
  
  leftfrontdooropenflag_ = value;
}
inline void TelemetryReading::set_leftfrontdooropenflag(::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag value) {
  _internal_set_leftfrontdooropenflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.leftFrontDoorOpenFlag)
}

// .com.bosch.itrams_gen2e.RightFrontDoorOpenFlag rightFrontDoorOpenFlag = 58[json_name = "rfdof"];
inline void TelemetryReading::clear_rightfrontdooropenflag() {
  rightfrontdooropenflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag TelemetryReading::_internal_rightfrontdooropenflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag >(rightfrontdooropenflag_);
}
inline ::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag TelemetryReading::rightfrontdooropenflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.rightFrontDoorOpenFlag)
  return _internal_rightfrontdooropenflag();
}
inline void TelemetryReading::_internal_set_rightfrontdooropenflag(::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag value) {
  
  rightfrontdooropenflag_ = value;
}
inline void TelemetryReading::set_rightfrontdooropenflag(::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag value) {
  _internal_set_rightfrontdooropenflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.rightFrontDoorOpenFlag)
}

// .com.bosch.itrams_gen2e.LeftRearDoorOpenFlag leftRearDoorOpenFlag = 59[json_name = "lrdof"];
inline void TelemetryReading::clear_leftreardooropenflag() {
  leftreardooropenflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag TelemetryReading::_internal_leftreardooropenflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag >(leftreardooropenflag_);
}
inline ::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag TelemetryReading::leftreardooropenflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.leftRearDoorOpenFlag)
  return _internal_leftreardooropenflag();
}
inline void TelemetryReading::_internal_set_leftreardooropenflag(::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag value) {
  
  leftreardooropenflag_ = value;
}
inline void TelemetryReading::set_leftreardooropenflag(::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag value) {
  _internal_set_leftreardooropenflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.leftRearDoorOpenFlag)
}

// .com.bosch.itrams_gen2e.RightRearDoorOpenFlag rightRearDoorOpenFlag = 60[json_name = "rrdof"];
inline void TelemetryReading::clear_rightreardooropenflag() {
  rightreardooropenflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::RightRearDoorOpenFlag TelemetryReading::_internal_rightreardooropenflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::RightRearDoorOpenFlag >(rightreardooropenflag_);
}
inline ::com::bosch::itrams_gen2e::RightRearDoorOpenFlag TelemetryReading::rightreardooropenflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.rightRearDoorOpenFlag)
  return _internal_rightreardooropenflag();
}
inline void TelemetryReading::_internal_set_rightreardooropenflag(::com::bosch::itrams_gen2e::RightRearDoorOpenFlag value) {
  
  rightreardooropenflag_ = value;
}
inline void TelemetryReading::set_rightreardooropenflag(::com::bosch::itrams_gen2e::RightRearDoorOpenFlag value) {
  _internal_set_rightreardooropenflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.rightRearDoorOpenFlag)
}

// .com.bosch.itrams_gen2e.TailGateOpenFlag tailGateOpenFlag = 61[json_name = "tgof"];
inline void TelemetryReading::clear_tailgateopenflag() {
  tailgateopenflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::TailGateOpenFlag TelemetryReading::_internal_tailgateopenflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::TailGateOpenFlag >(tailgateopenflag_);
}
inline ::com::bosch::itrams_gen2e::TailGateOpenFlag TelemetryReading::tailgateopenflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.tailGateOpenFlag)
  return _internal_tailgateopenflag();
}
inline void TelemetryReading::_internal_set_tailgateopenflag(::com::bosch::itrams_gen2e::TailGateOpenFlag value) {
  
  tailgateopenflag_ = value;
}
inline void TelemetryReading::set_tailgateopenflag(::com::bosch::itrams_gen2e::TailGateOpenFlag value) {
  _internal_set_tailgateopenflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.tailGateOpenFlag)
}

// .com.bosch.itrams_gen2e.BonnetOpenFlag bonnetOpenFlag = 62[json_name = "bntof"];
inline void TelemetryReading::clear_bonnetopenflag() {
  bonnetopenflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::BonnetOpenFlag TelemetryReading::_internal_bonnetopenflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::BonnetOpenFlag >(bonnetopenflag_);
}
inline ::com::bosch::itrams_gen2e::BonnetOpenFlag TelemetryReading::bonnetopenflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.bonnetOpenFlag)
  return _internal_bonnetopenflag();
}
inline void TelemetryReading::_internal_set_bonnetopenflag(::com::bosch::itrams_gen2e::BonnetOpenFlag value) {
  
  bonnetopenflag_ = value;
}
inline void TelemetryReading::set_bonnetopenflag(::com::bosch::itrams_gen2e::BonnetOpenFlag value) {
  _internal_set_bonnetopenflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.bonnetOpenFlag)
}

// .com.bosch.itrams_gen2e.VehicleARmState vehicleARmState = 63[json_name = "varm"];
inline void TelemetryReading::clear_vehiclearmstate() {
  vehiclearmstate_ = 0;
}
inline ::com::bosch::itrams_gen2e::VehicleARmState TelemetryReading::_internal_vehiclearmstate() const {
  return static_cast< ::com::bosch::itrams_gen2e::VehicleARmState >(vehiclearmstate_);
}
inline ::com::bosch::itrams_gen2e::VehicleARmState TelemetryReading::vehiclearmstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vehicleARmState)
  return _internal_vehiclearmstate();
}
inline void TelemetryReading::_internal_set_vehiclearmstate(::com::bosch::itrams_gen2e::VehicleARmState value) {
  
  vehiclearmstate_ = value;
}
inline void TelemetryReading::set_vehiclearmstate(::com::bosch::itrams_gen2e::VehicleARmState value) {
  _internal_set_vehiclearmstate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vehicleARmState)
}

// .com.bosch.itrams_gen2e.CabinCoolingSolValveState cabinCoolingSolValveState = 64[json_name = "csol"];
inline void TelemetryReading::clear_cabincoolingsolvalvestate() {
  cabincoolingsolvalvestate_ = 0;
}
inline ::com::bosch::itrams_gen2e::CabinCoolingSolValveState TelemetryReading::_internal_cabincoolingsolvalvestate() const {
  return static_cast< ::com::bosch::itrams_gen2e::CabinCoolingSolValveState >(cabincoolingsolvalvestate_);
}
inline ::com::bosch::itrams_gen2e::CabinCoolingSolValveState TelemetryReading::cabincoolingsolvalvestate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.cabinCoolingSolValveState)
  return _internal_cabincoolingsolvalvestate();
}
inline void TelemetryReading::_internal_set_cabincoolingsolvalvestate(::com::bosch::itrams_gen2e::CabinCoolingSolValveState value) {
  
  cabincoolingsolvalvestate_ = value;
}
inline void TelemetryReading::set_cabincoolingsolvalvestate(::com::bosch::itrams_gen2e::CabinCoolingSolValveState value) {
  _internal_set_cabincoolingsolvalvestate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.cabinCoolingSolValveState)
}

// .com.bosch.itrams_gen2e.AcReqDrvr acReqDrvr = 65[json_name = "acrq"];
inline void TelemetryReading::clear_acreqdrvr() {
  acreqdrvr_ = 0;
}
inline ::com::bosch::itrams_gen2e::AcReqDrvr TelemetryReading::_internal_acreqdrvr() const {
  return static_cast< ::com::bosch::itrams_gen2e::AcReqDrvr >(acreqdrvr_);
}
inline ::com::bosch::itrams_gen2e::AcReqDrvr TelemetryReading::acreqdrvr() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acReqDrvr)
  return _internal_acreqdrvr();
}
inline void TelemetryReading::_internal_set_acreqdrvr(::com::bosch::itrams_gen2e::AcReqDrvr value) {
  
  acreqdrvr_ = value;
}
inline void TelemetryReading::set_acreqdrvr(::com::bosch::itrams_gen2e::AcReqDrvr value) {
  _internal_set_acreqdrvr(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acReqDrvr)
}

// uint32 coolingPwrVCU = 66[json_name = "copwvc"];
inline void TelemetryReading::clear_coolingpwrvcu() {
  coolingpwrvcu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_coolingpwrvcu() const {
  return coolingpwrvcu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::coolingpwrvcu() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.coolingPwrVCU)
  return _internal_coolingpwrvcu();
}
inline void TelemetryReading::_internal_set_coolingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  coolingpwrvcu_ = value;
}
inline void TelemetryReading::set_coolingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coolingpwrvcu(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.coolingPwrVCU)
}

// uint32 coolingPwrFATC = 67[json_name = "copwfc"];
inline void TelemetryReading::clear_coolingpwrfatc() {
  coolingpwrfatc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_coolingpwrfatc() const {
  return coolingpwrfatc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::coolingpwrfatc() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.coolingPwrFATC)
  return _internal_coolingpwrfatc();
}
inline void TelemetryReading::_internal_set_coolingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  coolingpwrfatc_ = value;
}
inline void TelemetryReading::set_coolingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coolingpwrfatc(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.coolingPwrFATC)
}

// uint32 heatingPwrVCU = 68[json_name = "htpwvc"];
inline void TelemetryReading::clear_heatingpwrvcu() {
  heatingpwrvcu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_heatingpwrvcu() const {
  return heatingpwrvcu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::heatingpwrvcu() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.heatingPwrVCU)
  return _internal_heatingpwrvcu();
}
inline void TelemetryReading::_internal_set_heatingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heatingpwrvcu_ = value;
}
inline void TelemetryReading::set_heatingpwrvcu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heatingpwrvcu(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.heatingPwrVCU)
}

// uint32 heatingPwrFATC = 69[json_name = "htpwfc"];
inline void TelemetryReading::clear_heatingpwrfatc() {
  heatingpwrfatc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_heatingpwrfatc() const {
  return heatingpwrfatc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::heatingpwrfatc() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.heatingPwrFATC)
  return _internal_heatingpwrfatc();
}
inline void TelemetryReading::_internal_set_heatingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heatingpwrfatc_ = value;
}
inline void TelemetryReading::set_heatingpwrfatc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heatingpwrfatc(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.heatingPwrFATC)
}

// uint32 acCmprSpd = 70[json_name = "htpwfc"];
inline void TelemetryReading::clear_accmprspd() {
  accmprspd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_accmprspd() const {
  return accmprspd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::accmprspd() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acCmprSpd)
  return _internal_accmprspd();
}
inline void TelemetryReading::_internal_set_accmprspd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  accmprspd_ = value;
}
inline void TelemetryReading::set_accmprspd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accmprspd(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acCmprSpd)
}

// uint32 solarLoad = 71[json_name = "slrld"];
inline void TelemetryReading::clear_solarload() {
  solarload_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_solarload() const {
  return solarload_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::solarload() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.solarLoad)
  return _internal_solarload();
}
inline void TelemetryReading::_internal_set_solarload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solarload_ = value;
}
inline void TelemetryReading::set_solarload(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_solarload(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.solarLoad)
}

// .com.bosch.itrams_gen2e.AcSetTemperature acSetTemperature = 72[json_name = "acstmp"];
inline void TelemetryReading::clear_acsettemperature() {
  acsettemperature_ = 0;
}
inline ::com::bosch::itrams_gen2e::AcSetTemperature TelemetryReading::_internal_acsettemperature() const {
  return static_cast< ::com::bosch::itrams_gen2e::AcSetTemperature >(acsettemperature_);
}
inline ::com::bosch::itrams_gen2e::AcSetTemperature TelemetryReading::acsettemperature() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acSetTemperature)
  return _internal_acsettemperature();
}
inline void TelemetryReading::_internal_set_acsettemperature(::com::bosch::itrams_gen2e::AcSetTemperature value) {
  
  acsettemperature_ = value;
}
inline void TelemetryReading::set_acsettemperature(::com::bosch::itrams_gen2e::AcSetTemperature value) {
  _internal_set_acsettemperature(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acSetTemperature)
}

// .com.bosch.itrams_gen2e.BatteryCoolingSolValveState batteryCoolingSolValveState = 73[json_name = "battcl"];
inline void TelemetryReading::clear_batterycoolingsolvalvestate() {
  batterycoolingsolvalvestate_ = 0;
}
inline ::com::bosch::itrams_gen2e::BatteryCoolingSolValveState TelemetryReading::_internal_batterycoolingsolvalvestate() const {
  return static_cast< ::com::bosch::itrams_gen2e::BatteryCoolingSolValveState >(batterycoolingsolvalvestate_);
}
inline ::com::bosch::itrams_gen2e::BatteryCoolingSolValveState TelemetryReading::batterycoolingsolvalvestate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.batteryCoolingSolValveState)
  return _internal_batterycoolingsolvalvestate();
}
inline void TelemetryReading::_internal_set_batterycoolingsolvalvestate(::com::bosch::itrams_gen2e::BatteryCoolingSolValveState value) {
  
  batterycoolingsolvalvestate_ = value;
}
inline void TelemetryReading::set_batterycoolingsolvalvestate(::com::bosch::itrams_gen2e::BatteryCoolingSolValveState value) {
  _internal_set_batterycoolingsolvalvestate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.batteryCoolingSolValveState)
}

// uint32 brakePedalPosPercen = 74[json_name = "brkpdl"];
inline void TelemetryReading::clear_brakepedalpospercen() {
  brakepedalpospercen_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_brakepedalpospercen() const {
  return brakepedalpospercen_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::brakepedalpospercen() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.brakePedalPosPercen)
  return _internal_brakepedalpospercen();
}
inline void TelemetryReading::_internal_set_brakepedalpospercen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  brakepedalpospercen_ = value;
}
inline void TelemetryReading::set_brakepedalpospercen(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_brakepedalpospercen(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.brakePedalPosPercen)
}

// .com.bosch.itrams_gen2e.ParkBrakePressStateFlag parkBrakeState = 75[json_name = "prkbrk"];
inline void TelemetryReading::clear_parkbrakestate() {
  parkbrakestate_ = 0;
}
inline ::com::bosch::itrams_gen2e::ParkBrakePressStateFlag TelemetryReading::_internal_parkbrakestate() const {
  return static_cast< ::com::bosch::itrams_gen2e::ParkBrakePressStateFlag >(parkbrakestate_);
}
inline ::com::bosch::itrams_gen2e::ParkBrakePressStateFlag TelemetryReading::parkbrakestate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.parkBrakeState)
  return _internal_parkbrakestate();
}
inline void TelemetryReading::_internal_set_parkbrakestate(::com::bosch::itrams_gen2e::ParkBrakePressStateFlag value) {
  
  parkbrakestate_ = value;
}
inline void TelemetryReading::set_parkbrakestate(::com::bosch::itrams_gen2e::ParkBrakePressStateFlag value) {
  _internal_set_parkbrakestate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.parkBrakeState)
}

// int32 electricMotorTorque = 76[json_name = "prkbrk"];
inline void TelemetryReading::clear_electricmotortorque() {
  electricmotortorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_electricmotortorque() const {
  return electricmotortorque_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::electricmotortorque() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.electricMotorTorque)
  return _internal_electricmotortorque();
}
inline void TelemetryReading::_internal_set_electricmotortorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  electricmotortorque_ = value;
}
inline void TelemetryReading::set_electricmotortorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricmotortorque(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.electricMotorTorque)
}

// .com.bosch.itrams_gen2e.DriverSeatBeltFlag driverSeatBeltFlag = 77[json_name = "drvst"];
inline void TelemetryReading::clear_driverseatbeltflag() {
  driverseatbeltflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::DriverSeatBeltFlag TelemetryReading::_internal_driverseatbeltflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::DriverSeatBeltFlag >(driverseatbeltflag_);
}
inline ::com::bosch::itrams_gen2e::DriverSeatBeltFlag TelemetryReading::driverseatbeltflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.driverSeatBeltFlag)
  return _internal_driverseatbeltflag();
}
inline void TelemetryReading::_internal_set_driverseatbeltflag(::com::bosch::itrams_gen2e::DriverSeatBeltFlag value) {
  
  driverseatbeltflag_ = value;
}
inline void TelemetryReading::set_driverseatbeltflag(::com::bosch::itrams_gen2e::DriverSeatBeltFlag value) {
  _internal_set_driverseatbeltflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.driverSeatBeltFlag)
}

// .com.bosch.itrams_gen2e.CoDriverSeatBeltFlag coDriverSeatBeltFlag = 78[json_name = "cdrvst"];
inline void TelemetryReading::clear_codriverseatbeltflag() {
  codriverseatbeltflag_ = 0;
}
inline ::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag TelemetryReading::_internal_codriverseatbeltflag() const {
  return static_cast< ::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag >(codriverseatbeltflag_);
}
inline ::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag TelemetryReading::codriverseatbeltflag() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.coDriverSeatBeltFlag)
  return _internal_codriverseatbeltflag();
}
inline void TelemetryReading::_internal_set_codriverseatbeltflag(::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag value) {
  
  codriverseatbeltflag_ = value;
}
inline void TelemetryReading::set_codriverseatbeltflag(::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag value) {
  _internal_set_codriverseatbeltflag(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.coDriverSeatBeltFlag)
}

// uint32 enerConsumptionDrive = 79[json_name = "enerconsdr"];
inline void TelemetryReading::clear_enerconsumptiondrive() {
  enerconsumptiondrive_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_enerconsumptiondrive() const {
  return enerconsumptiondrive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::enerconsumptiondrive() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.enerConsumptionDrive)
  return _internal_enerconsumptiondrive();
}
inline void TelemetryReading::_internal_set_enerconsumptiondrive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enerconsumptiondrive_ = value;
}
inline void TelemetryReading::set_enerconsumptiondrive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enerconsumptiondrive(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.enerConsumptionDrive)
}

// uint32 enerConsumptionAux = 80[json_name = "enerconsax"];
inline void TelemetryReading::clear_enerconsumptionaux() {
  enerconsumptionaux_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_enerconsumptionaux() const {
  return enerconsumptionaux_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::enerconsumptionaux() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.enerConsumptionAux)
  return _internal_enerconsumptionaux();
}
inline void TelemetryReading::_internal_set_enerconsumptionaux(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enerconsumptionaux_ = value;
}
inline void TelemetryReading::set_enerconsumptionaux(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enerconsumptionaux(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.enerConsumptionAux)
}

// uint32 enerConsumptionCooling = 81[json_name = "enerconscol"];
inline void TelemetryReading::clear_enerconsumptioncooling() {
  enerconsumptioncooling_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_enerconsumptioncooling() const {
  return enerconsumptioncooling_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::enerconsumptioncooling() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.enerConsumptionCooling)
  return _internal_enerconsumptioncooling();
}
inline void TelemetryReading::_internal_set_enerconsumptioncooling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  enerconsumptioncooling_ = value;
}
inline void TelemetryReading::set_enerconsumptioncooling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enerconsumptioncooling(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.enerConsumptionCooling)
}

// uint32 regenPowerConsumption = 82[json_name = "rgneff"];
inline void TelemetryReading::clear_regenpowerconsumption() {
  regenpowerconsumption_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_regenpowerconsumption() const {
  return regenpowerconsumption_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::regenpowerconsumption() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.regenPowerConsumption)
  return _internal_regenpowerconsumption();
}
inline void TelemetryReading::_internal_set_regenpowerconsumption(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  regenpowerconsumption_ = value;
}
inline void TelemetryReading::set_regenpowerconsumption(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_regenpowerconsumption(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.regenPowerConsumption)
}

// .com.bosch.itrams_gen2e.CruiseControlStatus cruiseControlStatus = 83[json_name = "crsctr"];
inline void TelemetryReading::clear_cruisecontrolstatus() {
  cruisecontrolstatus_ = 0;
}
inline ::com::bosch::itrams_gen2e::CruiseControlStatus TelemetryReading::_internal_cruisecontrolstatus() const {
  return static_cast< ::com::bosch::itrams_gen2e::CruiseControlStatus >(cruisecontrolstatus_);
}
inline ::com::bosch::itrams_gen2e::CruiseControlStatus TelemetryReading::cruisecontrolstatus() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.cruiseControlStatus)
  return _internal_cruisecontrolstatus();
}
inline void TelemetryReading::_internal_set_cruisecontrolstatus(::com::bosch::itrams_gen2e::CruiseControlStatus value) {
  
  cruisecontrolstatus_ = value;
}
inline void TelemetryReading::set_cruisecontrolstatus(::com::bosch::itrams_gen2e::CruiseControlStatus value) {
  _internal_set_cruisecontrolstatus(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.cruiseControlStatus)
}

// uint32 cruiseControlSpeed = 84[json_name = "crsctrsp"];
inline void TelemetryReading::clear_cruisecontrolspeed() {
  cruisecontrolspeed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_cruisecontrolspeed() const {
  return cruisecontrolspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::cruisecontrolspeed() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.cruiseControlSpeed)
  return _internal_cruisecontrolspeed();
}
inline void TelemetryReading::_internal_set_cruisecontrolspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cruisecontrolspeed_ = value;
}
inline void TelemetryReading::set_cruisecontrolspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cruisecontrolspeed(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.cruiseControlSpeed)
}

// uint32 fuelLevelPercentage = 85[json_name = "flperc"];
inline void TelemetryReading::clear_fuellevelpercentage() {
  fuellevelpercentage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_fuellevelpercentage() const {
  return fuellevelpercentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::fuellevelpercentage() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.fuelLevelPercentage)
  return _internal_fuellevelpercentage();
}
inline void TelemetryReading::_internal_set_fuellevelpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fuellevelpercentage_ = value;
}
inline void TelemetryReading::set_fuellevelpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fuellevelpercentage(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.fuelLevelPercentage)
}

// int32 engineTorque = 86[json_name = "engtq"];
inline void TelemetryReading::clear_enginetorque() {
  enginetorque_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_enginetorque() const {
  return enginetorque_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::enginetorque() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.engineTorque)
  return _internal_enginetorque();
}
inline void TelemetryReading::_internal_set_enginetorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enginetorque_ = value;
}
inline void TelemetryReading::set_enginetorque(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enginetorque(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.engineTorque)
}

// .com.bosch.itrams_gen2e.DRlState drlState = 87[json_name = "drlstokok"];
inline void TelemetryReading::clear_drlstate() {
  drlstate_ = 0;
}
inline ::com::bosch::itrams_gen2e::DRlState TelemetryReading::_internal_drlstate() const {
  return static_cast< ::com::bosch::itrams_gen2e::DRlState >(drlstate_);
}
inline ::com::bosch::itrams_gen2e::DRlState TelemetryReading::drlstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.drlState)
  return _internal_drlstate();
}
inline void TelemetryReading::_internal_set_drlstate(::com::bosch::itrams_gen2e::DRlState value) {
  
  drlstate_ = value;
}
inline void TelemetryReading::set_drlstate(::com::bosch::itrams_gen2e::DRlState value) {
  _internal_set_drlstate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.drlState)
}

// .com.bosch.itrams_gen2e.WiperState wiperState = 88[json_name = "wprst"];
inline void TelemetryReading::clear_wiperstate() {
  wiperstate_ = 0;
}
inline ::com::bosch::itrams_gen2e::WiperState TelemetryReading::_internal_wiperstate() const {
  return static_cast< ::com::bosch::itrams_gen2e::WiperState >(wiperstate_);
}
inline ::com::bosch::itrams_gen2e::WiperState TelemetryReading::wiperstate() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.wiperState)
  return _internal_wiperstate();
}
inline void TelemetryReading::_internal_set_wiperstate(::com::bosch::itrams_gen2e::WiperState value) {
  
  wiperstate_ = value;
}
inline void TelemetryReading::set_wiperstate(::com::bosch::itrams_gen2e::WiperState value) {
  _internal_set_wiperstate(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.wiperState)
}

// uint32 instantFE = 89[json_name = "instfe"];
inline void TelemetryReading::clear_instantfe() {
  instantfe_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_instantfe() const {
  return instantfe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::instantfe() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.instantFE)
  return _internal_instantfe();
}
inline void TelemetryReading::_internal_set_instantfe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instantfe_ = value;
}
inline void TelemetryReading::set_instantfe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instantfe(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.instantFE)
}

// int32 throttleBodyPosition = 90[json_name = "thrpos"];
inline void TelemetryReading::clear_throttlebodyposition() {
  throttlebodyposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_throttlebodyposition() const {
  return throttlebodyposition_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::throttlebodyposition() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.throttleBodyPosition)
  return _internal_throttlebodyposition();
}
inline void TelemetryReading::_internal_set_throttlebodyposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  throttlebodyposition_ = value;
}
inline void TelemetryReading::set_throttlebodyposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_throttlebodyposition(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.throttleBodyPosition)
}

// uint32 intakeManifoldTemp = 91[json_name = "intkmf"];
inline void TelemetryReading::clear_intakemanifoldtemp() {
  intakemanifoldtemp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_intakemanifoldtemp() const {
  return intakemanifoldtemp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::intakemanifoldtemp() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.intakeManifoldTemp)
  return _internal_intakemanifoldtemp();
}
inline void TelemetryReading::_internal_set_intakemanifoldtemp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  intakemanifoldtemp_ = value;
}
inline void TelemetryReading::set_intakemanifoldtemp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_intakemanifoldtemp(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.intakeManifoldTemp)
}

// .com.bosch.itrams_gen2e.BiFuelMode biFuelMode = 92[json_name = "biflm"];
inline void TelemetryReading::clear_bifuelmode() {
  bifuelmode_ = 0;
}
inline ::com::bosch::itrams_gen2e::BiFuelMode TelemetryReading::_internal_bifuelmode() const {
  return static_cast< ::com::bosch::itrams_gen2e::BiFuelMode >(bifuelmode_);
}
inline ::com::bosch::itrams_gen2e::BiFuelMode TelemetryReading::bifuelmode() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.biFuelMode)
  return _internal_bifuelmode();
}
inline void TelemetryReading::_internal_set_bifuelmode(::com::bosch::itrams_gen2e::BiFuelMode value) {
  
  bifuelmode_ = value;
}
inline void TelemetryReading::set_bifuelmode(::com::bosch::itrams_gen2e::BiFuelMode value) {
  _internal_set_bifuelmode(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.biFuelMode)
}

// uint32 hvBattSocPercentage = 93[json_name = "hvbsoc"];
inline void TelemetryReading::clear_hvbattsocpercentage() {
  hvbattsocpercentage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattsocpercentage() const {
  return hvbattsocpercentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattsocpercentage() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattSocPercentage)
  return _internal_hvbattsocpercentage();
}
inline void TelemetryReading::_internal_set_hvbattsocpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hvbattsocpercentage_ = value;
}
inline void TelemetryReading::set_hvbattsocpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattsocpercentage(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattSocPercentage)
}

// uint32 distanceToEmpty = 94[json_name = "dstEmpty"];
inline void TelemetryReading::clear_distancetoempty() {
  distancetoempty_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_distancetoempty() const {
  return distancetoempty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::distancetoempty() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.distanceToEmpty)
  return _internal_distancetoempty();
}
inline void TelemetryReading::_internal_set_distancetoempty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  distancetoempty_ = value;
}
inline void TelemetryReading::set_distancetoempty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distancetoempty(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.distanceToEmpty)
}

// uint32 distanceToEmptyNonEV = 95[json_name = "dstEmptynv"];
inline void TelemetryReading::clear_distancetoemptynonev() {
  distancetoemptynonev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_distancetoemptynonev() const {
  return distancetoemptynonev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::distancetoemptynonev() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.distanceToEmptyNonEV)
  return _internal_distancetoemptynonev();
}
inline void TelemetryReading::_internal_set_distancetoemptynonev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  distancetoemptynonev_ = value;
}
inline void TelemetryReading::set_distancetoemptynonev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_distancetoemptynonev(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.distanceToEmptyNonEV)
}

// .com.bosch.itrams_gen2e.AcMode acMode = 96[json_name = "acmd"];
inline void TelemetryReading::clear_acmode() {
  acmode_ = 0;
}
inline ::com::bosch::itrams_gen2e::AcMode TelemetryReading::_internal_acmode() const {
  return static_cast< ::com::bosch::itrams_gen2e::AcMode >(acmode_);
}
inline ::com::bosch::itrams_gen2e::AcMode TelemetryReading::acmode() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.acMode)
  return _internal_acmode();
}
inline void TelemetryReading::_internal_set_acmode(::com::bosch::itrams_gen2e::AcMode value) {
  
  acmode_ = value;
}
inline void TelemetryReading::set_acmode(::com::bosch::itrams_gen2e::AcMode value) {
  _internal_set_acmode(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.acMode)
}

// int32 electricMotorCurrent = 97[json_name = "elcmc"];
inline void TelemetryReading::clear_electricmotorcurrent() {
  electricmotorcurrent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_electricmotorcurrent() const {
  return electricmotorcurrent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::electricmotorcurrent() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.electricMotorCurrent)
  return _internal_electricmotorcurrent();
}
inline void TelemetryReading::_internal_set_electricmotorcurrent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  electricmotorcurrent_ = value;
}
inline void TelemetryReading::set_electricmotorcurrent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricmotorcurrent(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.electricMotorCurrent)
}

// int32 electricMotorVoltage = 98[json_name = "elcmv"];
inline void TelemetryReading::clear_electricmotorvoltage() {
  electricmotorvoltage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_electricmotorvoltage() const {
  return electricmotorvoltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::electricmotorvoltage() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.electricMotorVoltage)
  return _internal_electricmotorvoltage();
}
inline void TelemetryReading::_internal_set_electricmotorvoltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  electricmotorvoltage_ = value;
}
inline void TelemetryReading::set_electricmotorvoltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricmotorvoltage(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.electricMotorVoltage)
}

// int32 electricMotorSpeed = 99[json_name = "elcms"];
inline void TelemetryReading::clear_electricmotorspeed() {
  electricmotorspeed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_electricmotorspeed() const {
  return electricmotorspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::electricmotorspeed() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.electricMotorSpeed)
  return _internal_electricmotorspeed();
}
inline void TelemetryReading::_internal_set_electricmotorspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  electricmotorspeed_ = value;
}
inline void TelemetryReading::set_electricmotorspeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricmotorspeed(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.electricMotorSpeed)
}

// int32 electricMotorTemperature = 100[json_name = "elcmv"];
inline void TelemetryReading::clear_electricmotortemperature() {
  electricmotortemperature_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_electricmotortemperature() const {
  return electricmotortemperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::electricmotortemperature() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.electricMotorTemperature)
  return _internal_electricmotortemperature();
}
inline void TelemetryReading::_internal_set_electricmotortemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  electricmotortemperature_ = value;
}
inline void TelemetryReading::set_electricmotortemperature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_electricmotortemperature(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.electricMotorTemperature)
}

// int32 hvBattCurrent = 101[json_name = "elcmc"];
inline void TelemetryReading::clear_hvbattcurrent() {
  hvbattcurrent_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::_internal_hvbattcurrent() const {
  return hvbattcurrent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TelemetryReading::hvbattcurrent() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattCurrent)
  return _internal_hvbattcurrent();
}
inline void TelemetryReading::_internal_set_hvbattcurrent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hvbattcurrent_ = value;
}
inline void TelemetryReading::set_hvbattcurrent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hvbattcurrent(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattCurrent)
}

// uint32 hvBattKWh = 102[json_name = "elcmv"];
inline void TelemetryReading::clear_hvbattkwh() {
  hvbattkwh_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_hvbattkwh() const {
  return hvbattkwh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::hvbattkwh() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.hvBattKWh)
  return _internal_hvbattkwh();
}
inline void TelemetryReading::_internal_set_hvbattkwh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hvbattkwh_ = value;
}
inline void TelemetryReading::set_hvbattkwh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hvbattkwh(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.hvBattKWh)
}

// uint32 dcDcOutputVolatge = 103[json_name = "dcopvol"];
inline void TelemetryReading::clear_dcdcoutputvolatge() {
  dcdcoutputvolatge_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_dcdcoutputvolatge() const {
  return dcdcoutputvolatge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::dcdcoutputvolatge() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.dcDcOutputVolatge)
  return _internal_dcdcoutputvolatge();
}
inline void TelemetryReading::_internal_set_dcdcoutputvolatge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dcdcoutputvolatge_ = value;
}
inline void TelemetryReading::set_dcdcoutputvolatge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dcdcoutputvolatge(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.dcDcOutputVolatge)
}

// uint32 dcDcOutputCurrent = 104[json_name = "dcopcur"];
inline void TelemetryReading::clear_dcdcoutputcurrent() {
  dcdcoutputcurrent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_dcdcoutputcurrent() const {
  return dcdcoutputcurrent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::dcdcoutputcurrent() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.dcDcOutputCurrent)
  return _internal_dcdcoutputcurrent();
}
inline void TelemetryReading::_internal_set_dcdcoutputcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dcdcoutputcurrent_ = value;
}
inline void TelemetryReading::set_dcdcoutputcurrent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dcdcoutputcurrent(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.dcDcOutputCurrent)
}

// uint32 vehicleBatteryLevel = 105[json_name = "vehbattlev"];
inline void TelemetryReading::clear_vehiclebatterylevel() {
  vehiclebatterylevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::_internal_vehiclebatterylevel() const {
  return vehiclebatterylevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TelemetryReading::vehiclebatterylevel() const {
  // @@protoc_insertion_point(field_get:com.bosch.itrams_gen2e.TelemetryReading.vehicleBatteryLevel)
  return _internal_vehiclebatterylevel();
}
inline void TelemetryReading::_internal_set_vehiclebatterylevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vehiclebatterylevel_ = value;
}
inline void TelemetryReading::set_vehiclebatterylevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vehiclebatterylevel(value);
  // @@protoc_insertion_point(field_set:com.bosch.itrams_gen2e.TelemetryReading.vehicleBatteryLevel)
}

inline bool TelemetryReading::has_gpsLatProperty() const {
  return gpsLatProperty_case() != GPSLATPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsLatProperty() {
  _oneof_case_[0] = GPSLATPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsLongProperty() const {
  return gpsLongProperty_case() != GPSLONGPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsLongProperty() {
  _oneof_case_[1] = GPSLONGPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsAltProperty() const {
  return gpsAltProperty_case() != GPSALTPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsAltProperty() {
  _oneof_case_[2] = GPSALTPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsCourseAngleProperty() const {
  return gpsCourseAngleProperty_case() != GPSCOURSEANGLEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsCourseAngleProperty() {
  _oneof_case_[3] = GPSCOURSEANGLEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_accelXProperty() const {
  return accelXProperty_case() != ACCELXPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_accelXProperty() {
  _oneof_case_[4] = ACCELXPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_accelYProperty() const {
  return accelYProperty_case() != ACCELYPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_accelYProperty() {
  _oneof_case_[5] = ACCELYPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_accelZProperty() const {
  return accelZProperty_case() != ACCELZPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_accelZProperty() {
  _oneof_case_[6] = ACCELZPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsSignalQualityProperty() const {
  return gpsSignalQualityProperty_case() != GPSSIGNALQUALITYPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsSignalQualityProperty() {
  _oneof_case_[7] = GPSSIGNALQUALITYPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsAccuracyLatProperty() const {
  return gpsAccuracyLatProperty_case() != GPSACCURACYLATPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsAccuracyLatProperty() {
  _oneof_case_[8] = GPSACCURACYLATPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsAccuracyLongProperty() const {
  return gpsAccuracyLongProperty_case() != GPSACCURACYLONGPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsAccuracyLongProperty() {
  _oneof_case_[9] = GPSACCURACYLONGPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gpsAccuracyAltProperty() const {
  return gpsAccuracyAltProperty_case() != GPSACCURACYALTPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gpsAccuracyAltProperty() {
  _oneof_case_[10] = GPSACCURACYALTPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gsmSignalStrengthProperty() const {
  return gsmSignalStrengthProperty_case() != GSMSIGNALSTRENGTHPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gsmSignalStrengthProperty() {
  _oneof_case_[11] = GSMSIGNALSTRENGTHPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gsmMccProperty() const {
  return gsmMccProperty_case() != GSMMCCPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gsmMccProperty() {
  _oneof_case_[12] = GSMMCCPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gsmMncProperty() const {
  return gsmMncProperty_case() != GSMMNCPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gsmMncProperty() {
  _oneof_case_[13] = GSMMNCPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_ignitionOnProperty() const {
  return ignitionOnProperty_case() != IGNITIONONPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_ignitionOnProperty() {
  _oneof_case_[14] = IGNITIONONPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_crankOnProperty() const {
  return crankOnProperty_case() != CRANKONPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_crankOnProperty() {
  _oneof_case_[15] = CRANKONPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_vehicleSpeedProperty() const {
  return vehicleSpeedProperty_case() != VEHICLESPEEDPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_vehicleSpeedProperty() {
  _oneof_case_[16] = VEHICLESPEEDPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_engineRpmProperty() const {
  return engineRpmProperty_case() != ENGINERPMPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_engineRpmProperty() {
  _oneof_case_[17] = ENGINERPMPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_steeringAngleProperty() const {
  return steeringAngleProperty_case() != STEERINGANGLEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_steeringAngleProperty() {
  _oneof_case_[18] = STEERINGANGLEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_distanceTravelledProperty() const {
  return distanceTravelledProperty_case() != DISTANCETRAVELLEDPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_distanceTravelledProperty() {
  _oneof_case_[19] = DISTANCETRAVELLEDPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_outsideAmbientTemperatureProperty() const {
  return outsideAmbientTemperatureProperty_case() != OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_outsideAmbientTemperatureProperty() {
  _oneof_case_[20] = OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_vehicleInteriorTemperatureProperty() const {
  return vehicleInteriorTemperatureProperty_case() != VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_vehicleInteriorTemperatureProperty() {
  _oneof_case_[21] = VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_steeringDirectionProperty() const {
  return steeringDirectionProperty_case() != STEERINGDIRECTIONPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_steeringDirectionProperty() {
  _oneof_case_[22] = STEERINGDIRECTIONPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_acCompressorPressureProperty() const {
  return acCompressorPressureProperty_case() != ACCOMPRESSORPRESSUREPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_acCompressorPressureProperty() {
  _oneof_case_[23] = ACCOMPRESSORPRESSUREPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_acceleratorPedalPositionProperty() const {
  return acceleratorPedalPositionProperty_case() != ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_acceleratorPedalPositionProperty() {
  _oneof_case_[24] = ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_atmosphericPressureProperty() const {
  return atmosphericPressureProperty_case() != ATMOSPHERICPRESSUREPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_atmosphericPressureProperty() {
  _oneof_case_[25] = ATMOSPHERICPRESSUREPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_transmissionOilTemperatureProperty() const {
  return transmissionOilTemperatureProperty_case() != TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_transmissionOilTemperatureProperty() {
  _oneof_case_[26] = TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_evGearInfoProperty() const {
  return evGearInfoProperty_case() != EVGEARINFOPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_evGearInfoProperty() {
  _oneof_case_[27] = EVGEARINFOPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_vcuPowerModeProperty() const {
  return vcuPowerModeProperty_case() != VCUPOWERMODEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_vcuPowerModeProperty() {
  _oneof_case_[28] = VCUPOWERMODEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gear_InfoProperty() const {
  return gear_InfoProperty_case() != GEAR_INFOPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gear_InfoProperty() {
  _oneof_case_[29] = GEAR_INFOPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_fuelRemainingProperty() const {
  return fuelRemainingProperty_case() != FUELREMAININGPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_fuelRemainingProperty() {
  _oneof_case_[30] = FUELREMAININGPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_cumulativeFuelConsumptionRateProperty() const {
  return cumulativeFuelConsumptionRateProperty_case() != CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_cumulativeFuelConsumptionRateProperty() {
  _oneof_case_[31] = CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_engineIdleSpeedTargetProperty() const {
  return engineIdleSpeedTargetProperty_case() != ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_engineIdleSpeedTargetProperty() {
  _oneof_case_[32] = ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_engineCoolantTemperatureProperty() const {
  return engineCoolantTemperatureProperty_case() != ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_engineCoolantTemperatureProperty() {
  _oneof_case_[33] = ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gyroscopeXProperty() const {
  return gyroscopeXProperty_case() != GYROSCOPEXPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gyroscopeXProperty() {
  _oneof_case_[34] = GYROSCOPEXPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gyroscopeYProperty() const {
  return gyroscopeYProperty_case() != GYROSCOPEYPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gyroscopeYProperty() {
  _oneof_case_[35] = GYROSCOPEYPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_gyroscopeZProperty() const {
  return gyroscopeZProperty_case() != GYROSCOPEZPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_gyroscopeZProperty() {
  _oneof_case_[36] = GYROSCOPEZPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_blowerSpeedProperty() const {
  return blowerSpeedProperty_case() != BLOWERSPEEDPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_blowerSpeedProperty() {
  _oneof_case_[37] = BLOWERSPEEDPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvAmpHrProperty() const {
  return hvAmpHrProperty_case() != HVAMPHRPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvAmpHrProperty() {
  _oneof_case_[38] = HVAMPHRPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvAmpHrRegenProperty() const {
  return hvAmpHrRegenProperty_case() != HVAMPHRREGENPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvAmpHrRegenProperty() {
  _oneof_case_[39] = HVAMPHRREGENPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvBattMaxCellVoltageProperty() const {
  return hvBattMaxCellVoltageProperty_case() != HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvBattMaxCellVoltageProperty() {
  _oneof_case_[40] = HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvBattMinCellVoltageProperty() const {
  return hvBattMinCellVoltageProperty_case() != HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvBattMinCellVoltageProperty() {
  _oneof_case_[41] = HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvBattMaxCellTempProperty() const {
  return hvBattMaxCellTempProperty_case() != HVBATTMAXCELLTEMPPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvBattMaxCellTempProperty() {
  _oneof_case_[42] = HVBATTMAXCELLTEMPPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvBattMinCellTempProperty() const {
  return hvBattMinCellTempProperty_case() != HVBATTMINCELLTEMPPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvBattMinCellTempProperty() {
  _oneof_case_[43] = HVBATTMINCELLTEMPPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_hvBattPackVoltageProperty() const {
  return hvBattPackVoltageProperty_case() != HVBATTPACKVOLTAGEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_hvBattPackVoltageProperty() {
  _oneof_case_[44] = HVBATTPACKVOLTAGEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_brkPressStateProperty() const {
  return brkPressStateProperty_case() != BRKPRESSSTATEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_brkPressStateProperty() {
  _oneof_case_[45] = BRKPRESSSTATEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_vehicleSpeedTwoProperty() const {
  return vehicleSpeedTwoProperty_case() != VEHICLESPEEDTWOPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_vehicleSpeedTwoProperty() {
  _oneof_case_[46] = VEHICLESPEEDTWOPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_vehicleDriveModeProperty() const {
  return vehicleDriveModeProperty_case() != VEHICLEDRIVEMODEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_vehicleDriveModeProperty() {
  _oneof_case_[47] = VEHICLEDRIVEMODEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_clutchStateProperty() const {
  return clutchStateProperty_case() != CLUTCHSTATEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_clutchStateProperty() {
  _oneof_case_[48] = CLUTCHSTATEPROPERTY_NOT_SET;
}
inline bool TelemetryReading::has_acStateProperty() const {
  return acStateProperty_case() != ACSTATEPROPERTY_NOT_SET;
}
inline void TelemetryReading::clear_has_acStateProperty() {
  _oneof_case_[49] = ACSTATEPROPERTY_NOT_SET;
}
inline TelemetryReading::GpsLatPropertyCase TelemetryReading::gpsLatProperty_case() const {
  return TelemetryReading::GpsLatPropertyCase(_oneof_case_[0]);
}
inline TelemetryReading::GpsLongPropertyCase TelemetryReading::gpsLongProperty_case() const {
  return TelemetryReading::GpsLongPropertyCase(_oneof_case_[1]);
}
inline TelemetryReading::GpsAltPropertyCase TelemetryReading::gpsAltProperty_case() const {
  return TelemetryReading::GpsAltPropertyCase(_oneof_case_[2]);
}
inline TelemetryReading::GpsCourseAnglePropertyCase TelemetryReading::gpsCourseAngleProperty_case() const {
  return TelemetryReading::GpsCourseAnglePropertyCase(_oneof_case_[3]);
}
inline TelemetryReading::AccelXPropertyCase TelemetryReading::accelXProperty_case() const {
  return TelemetryReading::AccelXPropertyCase(_oneof_case_[4]);
}
inline TelemetryReading::AccelYPropertyCase TelemetryReading::accelYProperty_case() const {
  return TelemetryReading::AccelYPropertyCase(_oneof_case_[5]);
}
inline TelemetryReading::AccelZPropertyCase TelemetryReading::accelZProperty_case() const {
  return TelemetryReading::AccelZPropertyCase(_oneof_case_[6]);
}
inline TelemetryReading::GpsSignalQualityPropertyCase TelemetryReading::gpsSignalQualityProperty_case() const {
  return TelemetryReading::GpsSignalQualityPropertyCase(_oneof_case_[7]);
}
inline TelemetryReading::GpsAccuracyLatPropertyCase TelemetryReading::gpsAccuracyLatProperty_case() const {
  return TelemetryReading::GpsAccuracyLatPropertyCase(_oneof_case_[8]);
}
inline TelemetryReading::GpsAccuracyLongPropertyCase TelemetryReading::gpsAccuracyLongProperty_case() const {
  return TelemetryReading::GpsAccuracyLongPropertyCase(_oneof_case_[9]);
}
inline TelemetryReading::GpsAccuracyAltPropertyCase TelemetryReading::gpsAccuracyAltProperty_case() const {
  return TelemetryReading::GpsAccuracyAltPropertyCase(_oneof_case_[10]);
}
inline TelemetryReading::GsmSignalStrengthPropertyCase TelemetryReading::gsmSignalStrengthProperty_case() const {
  return TelemetryReading::GsmSignalStrengthPropertyCase(_oneof_case_[11]);
}
inline TelemetryReading::GsmMccPropertyCase TelemetryReading::gsmMccProperty_case() const {
  return TelemetryReading::GsmMccPropertyCase(_oneof_case_[12]);
}
inline TelemetryReading::GsmMncPropertyCase TelemetryReading::gsmMncProperty_case() const {
  return TelemetryReading::GsmMncPropertyCase(_oneof_case_[13]);
}
inline TelemetryReading::IgnitionOnPropertyCase TelemetryReading::ignitionOnProperty_case() const {
  return TelemetryReading::IgnitionOnPropertyCase(_oneof_case_[14]);
}
inline TelemetryReading::CrankOnPropertyCase TelemetryReading::crankOnProperty_case() const {
  return TelemetryReading::CrankOnPropertyCase(_oneof_case_[15]);
}
inline TelemetryReading::VehicleSpeedPropertyCase TelemetryReading::vehicleSpeedProperty_case() const {
  return TelemetryReading::VehicleSpeedPropertyCase(_oneof_case_[16]);
}
inline TelemetryReading::EngineRpmPropertyCase TelemetryReading::engineRpmProperty_case() const {
  return TelemetryReading::EngineRpmPropertyCase(_oneof_case_[17]);
}
inline TelemetryReading::SteeringAnglePropertyCase TelemetryReading::steeringAngleProperty_case() const {
  return TelemetryReading::SteeringAnglePropertyCase(_oneof_case_[18]);
}
inline TelemetryReading::DistanceTravelledPropertyCase TelemetryReading::distanceTravelledProperty_case() const {
  return TelemetryReading::DistanceTravelledPropertyCase(_oneof_case_[19]);
}
inline TelemetryReading::OutsideAmbientTemperaturePropertyCase TelemetryReading::outsideAmbientTemperatureProperty_case() const {
  return TelemetryReading::OutsideAmbientTemperaturePropertyCase(_oneof_case_[20]);
}
inline TelemetryReading::VehicleInteriorTemperaturePropertyCase TelemetryReading::vehicleInteriorTemperatureProperty_case() const {
  return TelemetryReading::VehicleInteriorTemperaturePropertyCase(_oneof_case_[21]);
}
inline TelemetryReading::SteeringDirectionPropertyCase TelemetryReading::steeringDirectionProperty_case() const {
  return TelemetryReading::SteeringDirectionPropertyCase(_oneof_case_[22]);
}
inline TelemetryReading::AcCompressorPressurePropertyCase TelemetryReading::acCompressorPressureProperty_case() const {
  return TelemetryReading::AcCompressorPressurePropertyCase(_oneof_case_[23]);
}
inline TelemetryReading::AcceleratorPedalPositionPropertyCase TelemetryReading::acceleratorPedalPositionProperty_case() const {
  return TelemetryReading::AcceleratorPedalPositionPropertyCase(_oneof_case_[24]);
}
inline TelemetryReading::AtmosphericPressurePropertyCase TelemetryReading::atmosphericPressureProperty_case() const {
  return TelemetryReading::AtmosphericPressurePropertyCase(_oneof_case_[25]);
}
inline TelemetryReading::TransmissionOilTemperaturePropertyCase TelemetryReading::transmissionOilTemperatureProperty_case() const {
  return TelemetryReading::TransmissionOilTemperaturePropertyCase(_oneof_case_[26]);
}
inline TelemetryReading::EvGearInfoPropertyCase TelemetryReading::evGearInfoProperty_case() const {
  return TelemetryReading::EvGearInfoPropertyCase(_oneof_case_[27]);
}
inline TelemetryReading::VcuPowerModePropertyCase TelemetryReading::vcuPowerModeProperty_case() const {
  return TelemetryReading::VcuPowerModePropertyCase(_oneof_case_[28]);
}
inline TelemetryReading::GearInfoPropertyCase TelemetryReading::gear_InfoProperty_case() const {
  return TelemetryReading::GearInfoPropertyCase(_oneof_case_[29]);
}
inline TelemetryReading::FuelRemainingPropertyCase TelemetryReading::fuelRemainingProperty_case() const {
  return TelemetryReading::FuelRemainingPropertyCase(_oneof_case_[30]);
}
inline TelemetryReading::CumulativeFuelConsumptionRatePropertyCase TelemetryReading::cumulativeFuelConsumptionRateProperty_case() const {
  return TelemetryReading::CumulativeFuelConsumptionRatePropertyCase(_oneof_case_[31]);
}
inline TelemetryReading::EngineIdleSpeedTargetPropertyCase TelemetryReading::engineIdleSpeedTargetProperty_case() const {
  return TelemetryReading::EngineIdleSpeedTargetPropertyCase(_oneof_case_[32]);
}
inline TelemetryReading::EngineCoolantTemperaturePropertyCase TelemetryReading::engineCoolantTemperatureProperty_case() const {
  return TelemetryReading::EngineCoolantTemperaturePropertyCase(_oneof_case_[33]);
}
inline TelemetryReading::GyroscopeXPropertyCase TelemetryReading::gyroscopeXProperty_case() const {
  return TelemetryReading::GyroscopeXPropertyCase(_oneof_case_[34]);
}
inline TelemetryReading::GyroscopeYPropertyCase TelemetryReading::gyroscopeYProperty_case() const {
  return TelemetryReading::GyroscopeYPropertyCase(_oneof_case_[35]);
}
inline TelemetryReading::GyroscopeZPropertyCase TelemetryReading::gyroscopeZProperty_case() const {
  return TelemetryReading::GyroscopeZPropertyCase(_oneof_case_[36]);
}
inline TelemetryReading::BlowerSpeedPropertyCase TelemetryReading::blowerSpeedProperty_case() const {
  return TelemetryReading::BlowerSpeedPropertyCase(_oneof_case_[37]);
}
inline TelemetryReading::HvAmpHrPropertyCase TelemetryReading::hvAmpHrProperty_case() const {
  return TelemetryReading::HvAmpHrPropertyCase(_oneof_case_[38]);
}
inline TelemetryReading::HvAmpHrRegenPropertyCase TelemetryReading::hvAmpHrRegenProperty_case() const {
  return TelemetryReading::HvAmpHrRegenPropertyCase(_oneof_case_[39]);
}
inline TelemetryReading::HvBattMaxCellVoltagePropertyCase TelemetryReading::hvBattMaxCellVoltageProperty_case() const {
  return TelemetryReading::HvBattMaxCellVoltagePropertyCase(_oneof_case_[40]);
}
inline TelemetryReading::HvBattMinCellVoltagePropertyCase TelemetryReading::hvBattMinCellVoltageProperty_case() const {
  return TelemetryReading::HvBattMinCellVoltagePropertyCase(_oneof_case_[41]);
}
inline TelemetryReading::HvBattMaxCellTempPropertyCase TelemetryReading::hvBattMaxCellTempProperty_case() const {
  return TelemetryReading::HvBattMaxCellTempPropertyCase(_oneof_case_[42]);
}
inline TelemetryReading::HvBattMinCellTempPropertyCase TelemetryReading::hvBattMinCellTempProperty_case() const {
  return TelemetryReading::HvBattMinCellTempPropertyCase(_oneof_case_[43]);
}
inline TelemetryReading::HvBattPackVoltagePropertyCase TelemetryReading::hvBattPackVoltageProperty_case() const {
  return TelemetryReading::HvBattPackVoltagePropertyCase(_oneof_case_[44]);
}
inline TelemetryReading::BrkPressStatePropertyCase TelemetryReading::brkPressStateProperty_case() const {
  return TelemetryReading::BrkPressStatePropertyCase(_oneof_case_[45]);
}
inline TelemetryReading::VehicleSpeedTwoPropertyCase TelemetryReading::vehicleSpeedTwoProperty_case() const {
  return TelemetryReading::VehicleSpeedTwoPropertyCase(_oneof_case_[46]);
}
inline TelemetryReading::VehicleDriveModePropertyCase TelemetryReading::vehicleDriveModeProperty_case() const {
  return TelemetryReading::VehicleDriveModePropertyCase(_oneof_case_[47]);
}
inline TelemetryReading::ClutchStatePropertyCase TelemetryReading::clutchStateProperty_case() const {
  return TelemetryReading::ClutchStatePropertyCase(_oneof_case_[48]);
}
inline TelemetryReading::AcStatePropertyCase TelemetryReading::acStateProperty_case() const {
  return TelemetryReading::AcStatePropertyCase(_oneof_case_[49]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::eOperatingState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::eProvisioningState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::eTcuMessageType> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::IgnitionOn> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::CrankOn> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::SteeringDirection> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::EVGearState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::VCUPowerMode> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::GearState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::BlowerSpeed> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::VehicleDriveMode> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::ClutchState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::AcState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::GPsFixStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::PowerModeState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::HornState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::HighBeamLampOnFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::LowBeamLampOnFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::VehicleARmState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::CabinCoolingSolValveState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::AcReqDrvr> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::AcSetTemperature> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::BatteryCoolingSolValveState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::BrakePressState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::ParkBrakePressStateFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::DriverSeatBeltFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::CruiseControlStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::DRlState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::WiperState> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::BiFuelMode> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::AcMode> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::RightRearDoorOpenFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::TailGateOpenFlag> : ::std::true_type {};
template <> struct is_proto_enum< ::com::bosch::itrams_gen2e::BonnetOpenFlag> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
