// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace com {
namespace bosch {
namespace itrams_gen2e {
class TelemetryReadingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryReading> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 gpslat_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpslong_;
  ::PROTOBUF_NAMESPACE_ID::int32 gpsalt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpscourseangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 accelx_;
  ::PROTOBUF_NAMESPACE_ID::int32 accely_;
  ::PROTOBUF_NAMESPACE_ID::int32 accelz_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpssignalquality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracylat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracylong_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gpsaccuracyalt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gsmsignalstrength_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gsmmcc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gsmmnc_;
  int ignitionon_;
  int crankon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclespeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enginerpm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steeringangle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 distancetravelled_;
  ::PROTOBUF_NAMESPACE_ID::int32 outsideambienttemperature_;
  ::PROTOBUF_NAMESPACE_ID::int32 vehicleinteriortemperature_;
  int steeringdirection_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accompressorpressure_;
  ::PROTOBUF_NAMESPACE_ID::uint32 acceleratorpedalposition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 atmosphericpressure_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmissionoiltemperature_;
  int evgearinfo_;
  int vcupowermode_;
  int gear_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fuelremaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cumulativefuelconsumptionrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 engineidlespeedtarget_;
  ::PROTOBUF_NAMESPACE_ID::int32 enginecoolanttemperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gyroscopez_;
  int blowerspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvamphr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvamphrregen_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmaxcellvoltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmincellvoltage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmaxcelltemp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattmincelltemp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hvbattpackvoltage_;
  int brkpressstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vehiclespeedtwo_;
  int vehicledrivemode_;
  int clutchstate_;
  int acstate_;
} _TelemetryReading_default_instance_;
}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com
static void InitDefaultsscc_info_TelemetryReading_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::bosch::itrams_gen2e::_TelemetryReading_default_instance_;
    new (ptr) ::com::bosch::itrams_gen2e::TelemetryReading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::bosch::itrams_gen2e::TelemetryReading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TelemetryReading_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TelemetryReading_common_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

namespace com {
namespace bosch {
namespace itrams_gen2e {
bool eOperatingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> eOperatingState_strings[3] = {};

static const char eOperatingState_names[] =
  "closure"
  "normal"
  "offline";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry eOperatingState_entries[] = {
  { {eOperatingState_names + 0, 7}, 1 },
  { {eOperatingState_names + 7, 6}, 0 },
  { {eOperatingState_names + 13, 7}, 2 },
};

static const int eOperatingState_entries_by_number[] = {
  1, // 0 -> normal
  0, // 1 -> closure
  2, // 2 -> offline
};

const std::string& eOperatingState_Name(
    eOperatingState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          eOperatingState_entries,
          eOperatingState_entries_by_number,
          3, eOperatingState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      eOperatingState_entries,
      eOperatingState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     eOperatingState_strings[idx].get();
}
bool eOperatingState_Parse(
    const std::string& name, eOperatingState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      eOperatingState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<eOperatingState>(int_value);
  }
  return success;
}
bool eProvisioningState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> eProvisioningState_strings[3] = {};

static const char eProvisioningState_names[] =
  "authorized"
  "factory"
  "provisioned";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry eProvisioningState_entries[] = {
  { {eProvisioningState_names + 0, 10}, 2 },
  { {eProvisioningState_names + 10, 7}, 0 },
  { {eProvisioningState_names + 17, 11}, 1 },
};

static const int eProvisioningState_entries_by_number[] = {
  1, // 0 -> factory
  2, // 1 -> provisioned
  0, // 2 -> authorized
};

const std::string& eProvisioningState_Name(
    eProvisioningState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          eProvisioningState_entries,
          eProvisioningState_entries_by_number,
          3, eProvisioningState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      eProvisioningState_entries,
      eProvisioningState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     eProvisioningState_strings[idx].get();
}
bool eProvisioningState_Parse(
    const std::string& name, eProvisioningState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      eProvisioningState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<eProvisioningState>(int_value);
  }
  return success;
}
bool eTcuMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> eTcuMessageType_strings[20] = {};

static const char eTcuMessageType_names[] =
  "alert"
  "canData"
  "chargingTelemetry"
  "command"
  "commandResponse"
  "diagnostics"
  "fileUpload"
  "fileUploadAck"
  "fileUploadRequest"
  "fileUploadResponse"
  "fileUploadStatus"
  "pvDTCCAN"
  "pvdiagnosticCAN"
  "pvgenericCAN"
  "request"
  "response"
  "telemetry"
  "vehicleEvent"
  "vehicleHealth"
  "vehicleStateOfHealth";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry eTcuMessageType_entries[] = {
  { {eTcuMessageType_names + 0, 5}, 4 },
  { {eTcuMessageType_names + 5, 7}, 8 },
  { {eTcuMessageType_names + 12, 17}, 1 },
  { {eTcuMessageType_names + 29, 7}, 7 },
  { {eTcuMessageType_names + 36, 15}, 6 },
  { {eTcuMessageType_names + 51, 11}, 3 },
  { {eTcuMessageType_names + 62, 10}, 9 },
  { {eTcuMessageType_names + 72, 13}, 14 },
  { {eTcuMessageType_names + 85, 17}, 11 },
  { {eTcuMessageType_names + 102, 18}, 12 },
  { {eTcuMessageType_names + 120, 16}, 13 },
  { {eTcuMessageType_names + 136, 8}, 19 },
  { {eTcuMessageType_names + 144, 15}, 18 },
  { {eTcuMessageType_names + 159, 12}, 17 },
  { {eTcuMessageType_names + 171, 7}, 15 },
  { {eTcuMessageType_names + 178, 8}, 16 },
  { {eTcuMessageType_names + 186, 9}, 0 },
  { {eTcuMessageType_names + 195, 12}, 5 },
  { {eTcuMessageType_names + 207, 13}, 2 },
  { {eTcuMessageType_names + 220, 20}, 10 },
};

static const int eTcuMessageType_entries_by_number[] = {
  16, // 0 -> telemetry
  2, // 1 -> chargingTelemetry
  18, // 2 -> vehicleHealth
  5, // 3 -> diagnostics
  0, // 4 -> alert
  17, // 5 -> vehicleEvent
  4, // 6 -> commandResponse
  3, // 7 -> command
  1, // 8 -> canData
  6, // 9 -> fileUpload
  19, // 10 -> vehicleStateOfHealth
  8, // 11 -> fileUploadRequest
  9, // 12 -> fileUploadResponse
  10, // 13 -> fileUploadStatus
  7, // 14 -> fileUploadAck
  14, // 15 -> request
  15, // 16 -> response
  13, // 17 -> pvgenericCAN
  12, // 18 -> pvdiagnosticCAN
  11, // 19 -> pvDTCCAN
};

const std::string& eTcuMessageType_Name(
    eTcuMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          eTcuMessageType_entries,
          eTcuMessageType_entries_by_number,
          20, eTcuMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      eTcuMessageType_entries,
      eTcuMessageType_entries_by_number,
      20, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     eTcuMessageType_strings[idx].get();
}
bool eTcuMessageType_Parse(
    const std::string& name, eTcuMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      eTcuMessageType_entries, 20, name, &int_value);
  if (success) {
    *value = static_cast<eTcuMessageType>(int_value);
  }
  return success;
}
bool IgnitionOn_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IgnitionOn_strings[5] = {};

static const char IgnitionOn_names[] =
  "Reserve31"
  "Reserve32"
  "ignitionDefault"
  "ignitionOff"
  "ignitionOn";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IgnitionOn_entries[] = {
  { {IgnitionOn_names + 0, 9}, 2 },
  { {IgnitionOn_names + 9, 9}, 3 },
  { {IgnitionOn_names + 18, 15}, 4 },
  { {IgnitionOn_names + 33, 11}, 0 },
  { {IgnitionOn_names + 44, 10}, 1 },
};

static const int IgnitionOn_entries_by_number[] = {
  3, // 0 -> ignitionOff
  4, // 1 -> ignitionOn
  0, // 2 -> Reserve31
  1, // 3 -> Reserve32
  2, // 4 -> ignitionDefault
};

const std::string& IgnitionOn_Name(
    IgnitionOn value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IgnitionOn_entries,
          IgnitionOn_entries_by_number,
          5, IgnitionOn_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IgnitionOn_entries,
      IgnitionOn_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IgnitionOn_strings[idx].get();
}
bool IgnitionOn_Parse(
    const std::string& name, IgnitionOn* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IgnitionOn_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IgnitionOn>(int_value);
  }
  return success;
}
bool CrankOn_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CrankOn_strings[5] = {};

static const char CrankOn_names[] =
  "Reserve33"
  "Reserve34"
  "crankDefault"
  "crankOff"
  "crankOn";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CrankOn_entries[] = {
  { {CrankOn_names + 0, 9}, 2 },
  { {CrankOn_names + 9, 9}, 3 },
  { {CrankOn_names + 18, 12}, 4 },
  { {CrankOn_names + 30, 8}, 0 },
  { {CrankOn_names + 38, 7}, 1 },
};

static const int CrankOn_entries_by_number[] = {
  3, // 0 -> crankOff
  4, // 1 -> crankOn
  0, // 2 -> Reserve33
  1, // 3 -> Reserve34
  2, // 4 -> crankDefault
};

const std::string& CrankOn_Name(
    CrankOn value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CrankOn_entries,
          CrankOn_entries_by_number,
          5, CrankOn_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CrankOn_entries,
      CrankOn_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CrankOn_strings[idx].get();
}
bool CrankOn_Parse(
    const std::string& name, CrankOn* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CrankOn_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<CrankOn>(int_value);
  }
  return success;
}
bool SteeringDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SteeringDirection_strings[5] = {};

static const char SteeringDirection_names[] =
  "Reserve107"
  "Reserver108"
  "SteeringDirectionAnticlockwise"
  "SteeringDirectionClockwise"
  "SteeringDirectionDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SteeringDirection_entries[] = {
  { {SteeringDirection_names + 0, 10}, 2 },
  { {SteeringDirection_names + 10, 11}, 3 },
  { {SteeringDirection_names + 21, 30}, 1 },
  { {SteeringDirection_names + 51, 26}, 0 },
  { {SteeringDirection_names + 77, 24}, 4 },
};

static const int SteeringDirection_entries_by_number[] = {
  3, // 0 -> SteeringDirectionClockwise
  2, // 1 -> SteeringDirectionAnticlockwise
  0, // 2 -> Reserve107
  1, // 3 -> Reserver108
  4, // 4 -> SteeringDirectionDefault
};

const std::string& SteeringDirection_Name(
    SteeringDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SteeringDirection_entries,
          SteeringDirection_entries_by_number,
          5, SteeringDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SteeringDirection_entries,
      SteeringDirection_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SteeringDirection_strings[idx].get();
}
bool SteeringDirection_Parse(
    const std::string& name, SteeringDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SteeringDirection_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SteeringDirection>(int_value);
  }
  return success;
}
bool EVGearState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EVGearState_strings[9] = {};

static const char EVGearState_names[] =
  "Reserve5"
  "Reserve6"
  "gsdDefault"
  "gsdForwardDrive"
  "gsdLosMode"
  "gsdNeutral"
  "gsdPark"
  "gsdReverse"
  "gsdSport";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EVGearState_entries[] = {
  { {EVGearState_names + 0, 8}, 6 },
  { {EVGearState_names + 8, 8}, 7 },
  { {EVGearState_names + 16, 10}, 8 },
  { {EVGearState_names + 26, 15}, 3 },
  { {EVGearState_names + 41, 10}, 4 },
  { {EVGearState_names + 51, 10}, 0 },
  { {EVGearState_names + 61, 7}, 5 },
  { {EVGearState_names + 68, 10}, 2 },
  { {EVGearState_names + 78, 8}, 1 },
};

static const int EVGearState_entries_by_number[] = {
  5, // 0 -> gsdNeutral
  8, // 1 -> gsdSport
  7, // 2 -> gsdReverse
  3, // 3 -> gsdForwardDrive
  4, // 4 -> gsdLosMode
  6, // 5 -> gsdPark
  0, // 6 -> Reserve5
  1, // 7 -> Reserve6
  2, // 8 -> gsdDefault
};

const std::string& EVGearState_Name(
    EVGearState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EVGearState_entries,
          EVGearState_entries_by_number,
          9, EVGearState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EVGearState_entries,
      EVGearState_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EVGearState_strings[idx].get();
}
bool EVGearState_Parse(
    const std::string& name, EVGearState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EVGearState_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<EVGearState>(int_value);
  }
  return success;
}
bool VCUPowerMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VCUPowerMode_strings[10] = {};

static const char VCUPowerMode_names[] =
  "reserveVCU1"
  "reserveVCU2"
  "vpmActive"
  "vpmAwake"
  "vpmChargingMode"
  "vpmCrank"
  "vpmDefault"
  "vpmEnergyRecuperation"
  "vpmLimitedPowerMode"
  "vpmNormalRun";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VCUPowerMode_entries[] = {
  { {VCUPowerMode_names + 0, 11}, 7 },
  { {VCUPowerMode_names + 11, 11}, 8 },
  { {VCUPowerMode_names + 22, 9}, 1 },
  { {VCUPowerMode_names + 31, 8}, 0 },
  { {VCUPowerMode_names + 39, 15}, 5 },
  { {VCUPowerMode_names + 54, 8}, 2 },
  { {VCUPowerMode_names + 62, 10}, 9 },
  { {VCUPowerMode_names + 72, 21}, 4 },
  { {VCUPowerMode_names + 93, 19}, 6 },
  { {VCUPowerMode_names + 112, 12}, 3 },
};

static const int VCUPowerMode_entries_by_number[] = {
  3, // 0 -> vpmAwake
  2, // 1 -> vpmActive
  5, // 2 -> vpmCrank
  9, // 3 -> vpmNormalRun
  7, // 4 -> vpmEnergyRecuperation
  4, // 5 -> vpmChargingMode
  8, // 6 -> vpmLimitedPowerMode
  0, // 7 -> reserveVCU1
  1, // 8 -> reserveVCU2
  6, // 9 -> vpmDefault
};

const std::string& VCUPowerMode_Name(
    VCUPowerMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VCUPowerMode_entries,
          VCUPowerMode_entries_by_number,
          10, VCUPowerMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VCUPowerMode_entries,
      VCUPowerMode_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VCUPowerMode_strings[idx].get();
}
bool VCUPowerMode_Parse(
    const std::string& name, VCUPowerMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VCUPowerMode_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<VCUPowerMode>(int_value);
  }
  return success;
}
bool GearState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GearState_strings[14] = {};

static const char GearState_names[] =
  "Reserve3"
  "Reserve4"
  "gsDefault"
  "gsFault"
  "gsFifthGear"
  "gsFirstGear"
  "gsFourthGear"
  "gsInvalid"
  "gsNeutral"
  "gsReverseGear"
  "gsSecondGear"
  "gsSeventhGear"
  "gsSixthGear"
  "gsThirdGear";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GearState_entries[] = {
  { {GearState_names + 0, 8}, 9 },
  { {GearState_names + 8, 8}, 10 },
  { {GearState_names + 16, 9}, 16 },
  { {GearState_names + 25, 7}, 15 },
  { {GearState_names + 32, 11}, 5 },
  { {GearState_names + 43, 11}, 1 },
  { {GearState_names + 54, 12}, 4 },
  { {GearState_names + 66, 9}, 14 },
  { {GearState_names + 75, 9}, 0 },
  { {GearState_names + 84, 13}, 7 },
  { {GearState_names + 97, 12}, 2 },
  { {GearState_names + 109, 13}, 8 },
  { {GearState_names + 122, 11}, 6 },
  { {GearState_names + 133, 11}, 3 },
};

static const int GearState_entries_by_number[] = {
  8, // 0 -> gsNeutral
  5, // 1 -> gsFirstGear
  10, // 2 -> gsSecondGear
  13, // 3 -> gsThirdGear
  6, // 4 -> gsFourthGear
  4, // 5 -> gsFifthGear
  12, // 6 -> gsSixthGear
  9, // 7 -> gsReverseGear
  11, // 8 -> gsSeventhGear
  0, // 9 -> Reserve3
  1, // 10 -> Reserve4
  7, // 14 -> gsInvalid
  3, // 15 -> gsFault
  2, // 16 -> gsDefault
};

const std::string& GearState_Name(
    GearState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GearState_entries,
          GearState_entries_by_number,
          14, GearState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GearState_entries,
      GearState_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GearState_strings[idx].get();
}
bool GearState_Parse(
    const std::string& name, GearState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GearState_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<GearState>(int_value);
  }
  return success;
}
bool BlowerSpeed_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BlowerSpeed_strings[11] = {};

static const char BlowerSpeed_names[] =
  "Reserve13"
  "Reserve14"
  "gsdSpeed0"
  "gsdSpeed1"
  "gsdSpeed2"
  "gsdSpeed3"
  "gsdSpeed4"
  "gsdSpeed5"
  "gsdSpeed6"
  "gsdSpeed7"
  "gsdSpeedDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BlowerSpeed_entries[] = {
  { {BlowerSpeed_names + 0, 9}, 8 },
  { {BlowerSpeed_names + 9, 9}, 9 },
  { {BlowerSpeed_names + 18, 9}, 0 },
  { {BlowerSpeed_names + 27, 9}, 1 },
  { {BlowerSpeed_names + 36, 9}, 2 },
  { {BlowerSpeed_names + 45, 9}, 3 },
  { {BlowerSpeed_names + 54, 9}, 4 },
  { {BlowerSpeed_names + 63, 9}, 5 },
  { {BlowerSpeed_names + 72, 9}, 6 },
  { {BlowerSpeed_names + 81, 9}, 7 },
  { {BlowerSpeed_names + 90, 15}, 10 },
};

static const int BlowerSpeed_entries_by_number[] = {
  2, // 0 -> gsdSpeed0
  3, // 1 -> gsdSpeed1
  4, // 2 -> gsdSpeed2
  5, // 3 -> gsdSpeed3
  6, // 4 -> gsdSpeed4
  7, // 5 -> gsdSpeed5
  8, // 6 -> gsdSpeed6
  9, // 7 -> gsdSpeed7
  0, // 8 -> Reserve13
  1, // 9 -> Reserve14
  10, // 10 -> gsdSpeedDefault
};

const std::string& BlowerSpeed_Name(
    BlowerSpeed value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BlowerSpeed_entries,
          BlowerSpeed_entries_by_number,
          11, BlowerSpeed_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BlowerSpeed_entries,
      BlowerSpeed_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BlowerSpeed_strings[idx].get();
}
bool BlowerSpeed_Parse(
    const std::string& name, BlowerSpeed* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BlowerSpeed_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<BlowerSpeed>(int_value);
  }
  return success;
}
bool VehicleDriveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VehicleDriveMode_strings[11] = {};

static const char VehicleDriveMode_names[] =
  "Reserve29"
  "Reserve30"
  "vDriveCity"
  "vDriveDefault"
  "vDriveEco"
  "vDriveGrassSnow"
  "vDriveMudGravel"
  "vDriveRough"
  "vDriveSand"
  "vDriveSport"
  "vDriveWet";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VehicleDriveMode_entries[] = {
  { {VehicleDriveMode_names + 0, 9}, 8 },
  { {VehicleDriveMode_names + 9, 9}, 9 },
  { {VehicleDriveMode_names + 18, 10}, 0 },
  { {VehicleDriveMode_names + 28, 13}, 10 },
  { {VehicleDriveMode_names + 41, 9}, 2 },
  { {VehicleDriveMode_names + 50, 15}, 4 },
  { {VehicleDriveMode_names + 65, 15}, 5 },
  { {VehicleDriveMode_names + 80, 11}, 3 },
  { {VehicleDriveMode_names + 91, 10}, 6 },
  { {VehicleDriveMode_names + 101, 11}, 1 },
  { {VehicleDriveMode_names + 112, 9}, 7 },
};

static const int VehicleDriveMode_entries_by_number[] = {
  2, // 0 -> vDriveCity
  9, // 1 -> vDriveSport
  4, // 2 -> vDriveEco
  7, // 3 -> vDriveRough
  5, // 4 -> vDriveGrassSnow
  6, // 5 -> vDriveMudGravel
  8, // 6 -> vDriveSand
  10, // 7 -> vDriveWet
  0, // 8 -> Reserve29
  1, // 9 -> Reserve30
  3, // 10 -> vDriveDefault
};

const std::string& VehicleDriveMode_Name(
    VehicleDriveMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VehicleDriveMode_entries,
          VehicleDriveMode_entries_by_number,
          11, VehicleDriveMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VehicleDriveMode_entries,
      VehicleDriveMode_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VehicleDriveMode_strings[idx].get();
}
bool VehicleDriveMode_Parse(
    const std::string& name, VehicleDriveMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VehicleDriveMode_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<VehicleDriveMode>(int_value);
  }
  return success;
}
bool ClutchState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClutchState_strings[5] = {};

static const char ClutchState_names[] =
  "ClutchFullPressed"
  "ClutchHalfPressed"
  "ClutchNotPressed"
  "ClutchStateDefault"
  "Reserve";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClutchState_entries[] = {
  { {ClutchState_names + 0, 17}, 2 },
  { {ClutchState_names + 17, 17}, 1 },
  { {ClutchState_names + 34, 16}, 0 },
  { {ClutchState_names + 50, 18}, 4 },
  { {ClutchState_names + 68, 7}, 3 },
};

static const int ClutchState_entries_by_number[] = {
  2, // 0 -> ClutchNotPressed
  1, // 1 -> ClutchHalfPressed
  0, // 2 -> ClutchFullPressed
  4, // 3 -> Reserve
  3, // 4 -> ClutchStateDefault
};

const std::string& ClutchState_Name(
    ClutchState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClutchState_entries,
          ClutchState_entries_by_number,
          5, ClutchState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClutchState_entries,
      ClutchState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClutchState_strings[idx].get();
}
bool ClutchState_Parse(
    const std::string& name, ClutchState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClutchState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClutchState>(int_value);
  }
  return success;
}
bool AcState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AcState_strings[5] = {};

static const char AcState_names[] =
  "AcOff"
  "AcOn"
  "AcStateDefault"
  "Reserve105"
  "Reserve106";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AcState_entries[] = {
  { {AcState_names + 0, 5}, 0 },
  { {AcState_names + 5, 4}, 1 },
  { {AcState_names + 9, 14}, 4 },
  { {AcState_names + 23, 10}, 2 },
  { {AcState_names + 33, 10}, 3 },
};

static const int AcState_entries_by_number[] = {
  0, // 0 -> AcOff
  1, // 1 -> AcOn
  3, // 2 -> Reserve105
  4, // 3 -> Reserve106
  2, // 4 -> AcStateDefault
};

const std::string& AcState_Name(
    AcState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AcState_entries,
          AcState_entries_by_number,
          5, AcState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AcState_entries,
      AcState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AcState_strings[idx].get();
}
bool AcState_Parse(
    const std::string& name, AcState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AcState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<AcState>(int_value);
  }
  return success;
}
bool GPsFixStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GPsFixStatus_strings[4] = {};

static const char GPsFixStatus_names[] =
  "Gps2dFIx"
  "Gps3dFix"
  "GpsFixStatusDefault"
  "GpsNoFix";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GPsFixStatus_entries[] = {
  { {GPsFixStatus_names + 0, 8}, 1 },
  { {GPsFixStatus_names + 8, 8}, 2 },
  { {GPsFixStatus_names + 16, 19}, 5 },
  { {GPsFixStatus_names + 35, 8}, 0 },
};

static const int GPsFixStatus_entries_by_number[] = {
  3, // 0 -> GpsNoFix
  0, // 1 -> Gps2dFIx
  1, // 2 -> Gps3dFix
  2, // 5 -> GpsFixStatusDefault
};

const std::string& GPsFixStatus_Name(
    GPsFixStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GPsFixStatus_entries,
          GPsFixStatus_entries_by_number,
          4, GPsFixStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GPsFixStatus_entries,
      GPsFixStatus_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GPsFixStatus_strings[idx].get();
}
bool GPsFixStatus_Parse(
    const std::string& name, GPsFixStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GPsFixStatus_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GPsFixStatus>(int_value);
  }
  return success;
}
bool PowerModeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerModeState_strings[13] = {};

static const char PowerModeState_names[] =
  "Accessory"
  "AccessoryDelay"
  "Awake"
  "Crank"
  "Ignition"
  "KeyIn"
  "PowerModeStateDefault"
  "PreStandBy"
  "Run"
  "TransportCrank"
  "TransportDrive"
  "TransportPark"
  "TransportRun";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerModeState_entries[] = {
  { {PowerModeState_names + 0, 9}, 4 },
  { {PowerModeState_names + 9, 14}, 5 },
  { {PowerModeState_names + 23, 5}, 1 },
  { {PowerModeState_names + 28, 5}, 9 },
  { {PowerModeState_names + 33, 8}, 6 },
  { {PowerModeState_names + 41, 5}, 3 },
  { {PowerModeState_names + 46, 21}, 16 },
  { {PowerModeState_names + 67, 10}, 0 },
  { {PowerModeState_names + 77, 3}, 8 },
  { {PowerModeState_names + 80, 14}, 10 },
  { {PowerModeState_names + 94, 14}, 7 },
  { {PowerModeState_names + 108, 13}, 2 },
  { {PowerModeState_names + 121, 12}, 11 },
};

static const int PowerModeState_entries_by_number[] = {
  7, // 0 -> PreStandBy
  2, // 1 -> Awake
  11, // 2 -> TransportPark
  5, // 3 -> KeyIn
  0, // 4 -> Accessory
  1, // 5 -> AccessoryDelay
  4, // 6 -> Ignition
  10, // 7 -> TransportDrive
  8, // 8 -> Run
  3, // 9 -> Crank
  9, // 10 -> TransportCrank
  12, // 11 -> TransportRun
  6, // 16 -> PowerModeStateDefault
};

const std::string& PowerModeState_Name(
    PowerModeState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerModeState_entries,
          PowerModeState_entries_by_number,
          13, PowerModeState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerModeState_entries,
      PowerModeState_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerModeState_strings[idx].get();
}
bool PowerModeState_Parse(
    const std::string& name, PowerModeState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerModeState_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<PowerModeState>(int_value);
  }
  return success;
}
bool HornState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HornState_strings[3] = {};

static const char HornState_names[] =
  "HornActive"
  "HornNotActive"
  "HornStateDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HornState_entries[] = {
  { {HornState_names + 0, 10}, 1 },
  { {HornState_names + 10, 13}, 0 },
  { {HornState_names + 23, 16}, 4 },
};

static const int HornState_entries_by_number[] = {
  1, // 0 -> HornNotActive
  0, // 1 -> HornActive
  2, // 4 -> HornStateDefault
};

const std::string& HornState_Name(
    HornState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HornState_entries,
          HornState_entries_by_number,
          3, HornState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HornState_entries,
      HornState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HornState_strings[idx].get();
}
bool HornState_Parse(
    const std::string& name, HornState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HornState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<HornState>(int_value);
  }
  return success;
}
bool HighBeamLampOnFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HighBeamLampOnFlag_strings[5] = {};

static const char HighBeamLampOnFlag_names[] =
  "HighBeamLampOff"
  "HighBeamLampOn"
  "HighBeamLampOnDefault"
  "Reserve57"
  "Reserve58";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HighBeamLampOnFlag_entries[] = {
  { {HighBeamLampOnFlag_names + 0, 15}, 0 },
  { {HighBeamLampOnFlag_names + 15, 14}, 1 },
  { {HighBeamLampOnFlag_names + 29, 21}, 4 },
  { {HighBeamLampOnFlag_names + 50, 9}, 2 },
  { {HighBeamLampOnFlag_names + 59, 9}, 3 },
};

static const int HighBeamLampOnFlag_entries_by_number[] = {
  0, // 0 -> HighBeamLampOff
  1, // 1 -> HighBeamLampOn
  3, // 2 -> Reserve57
  4, // 3 -> Reserve58
  2, // 4 -> HighBeamLampOnDefault
};

const std::string& HighBeamLampOnFlag_Name(
    HighBeamLampOnFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HighBeamLampOnFlag_entries,
          HighBeamLampOnFlag_entries_by_number,
          5, HighBeamLampOnFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HighBeamLampOnFlag_entries,
      HighBeamLampOnFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HighBeamLampOnFlag_strings[idx].get();
}
bool HighBeamLampOnFlag_Parse(
    const std::string& name, HighBeamLampOnFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HighBeamLampOnFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<HighBeamLampOnFlag>(int_value);
  }
  return success;
}
bool LowBeamLampOnFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LowBeamLampOnFlag_strings[5] = {};

static const char LowBeamLampOnFlag_names[] =
  "Reserve97"
  "Reserve98"
  "lowBeamLampOff"
  "lowBeamLampOn"
  "lowBeamLampOnDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LowBeamLampOnFlag_entries[] = {
  { {LowBeamLampOnFlag_names + 0, 9}, 2 },
  { {LowBeamLampOnFlag_names + 9, 9}, 3 },
  { {LowBeamLampOnFlag_names + 18, 14}, 0 },
  { {LowBeamLampOnFlag_names + 32, 13}, 1 },
  { {LowBeamLampOnFlag_names + 45, 20}, 4 },
};

static const int LowBeamLampOnFlag_entries_by_number[] = {
  2, // 0 -> lowBeamLampOff
  3, // 1 -> lowBeamLampOn
  0, // 2 -> Reserve97
  1, // 3 -> Reserve98
  4, // 4 -> lowBeamLampOnDefault
};

const std::string& LowBeamLampOnFlag_Name(
    LowBeamLampOnFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LowBeamLampOnFlag_entries,
          LowBeamLampOnFlag_entries_by_number,
          5, LowBeamLampOnFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LowBeamLampOnFlag_entries,
      LowBeamLampOnFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LowBeamLampOnFlag_strings[idx].get();
}
bool LowBeamLampOnFlag_Parse(
    const std::string& name, LowBeamLampOnFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LowBeamLampOnFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LowBeamLampOnFlag>(int_value);
  }
  return success;
}
bool VehicleARmState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VehicleARmState_strings[3] = {};

static const char VehicleARmState_names[] =
  "VehicleARmStateDefault"
  "VehicleArmed"
  "VehicleNotArmed";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VehicleARmState_entries[] = {
  { {VehicleARmState_names + 0, 22}, 4 },
  { {VehicleARmState_names + 22, 12}, 1 },
  { {VehicleARmState_names + 34, 15}, 0 },
};

static const int VehicleARmState_entries_by_number[] = {
  2, // 0 -> VehicleNotArmed
  1, // 1 -> VehicleArmed
  0, // 4 -> VehicleARmStateDefault
};

const std::string& VehicleARmState_Name(
    VehicleARmState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VehicleARmState_entries,
          VehicleARmState_entries_by_number,
          3, VehicleARmState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VehicleARmState_entries,
      VehicleARmState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VehicleARmState_strings[idx].get();
}
bool VehicleARmState_Parse(
    const std::string& name, VehicleARmState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VehicleARmState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<VehicleARmState>(int_value);
  }
  return success;
}
bool CabinCoolingSolValveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CabinCoolingSolValveState_strings[3] = {};

static const char CabinCoolingSolValveState_names[] =
  "CabinColSvOFF"
  "CabinColSvON"
  "CabinCoolingSolValveStateDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CabinCoolingSolValveState_entries[] = {
  { {CabinCoolingSolValveState_names + 0, 13}, 0 },
  { {CabinCoolingSolValveState_names + 13, 12}, 2 },
  { {CabinCoolingSolValveState_names + 25, 32}, 4 },
};

static const int CabinCoolingSolValveState_entries_by_number[] = {
  0, // 0 -> CabinColSvOFF
  1, // 2 -> CabinColSvON
  2, // 4 -> CabinCoolingSolValveStateDefault
};

const std::string& CabinCoolingSolValveState_Name(
    CabinCoolingSolValveState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CabinCoolingSolValveState_entries,
          CabinCoolingSolValveState_entries_by_number,
          3, CabinCoolingSolValveState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CabinCoolingSolValveState_entries,
      CabinCoolingSolValveState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CabinCoolingSolValveState_strings[idx].get();
}
bool CabinCoolingSolValveState_Parse(
    const std::string& name, CabinCoolingSolValveState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CabinCoolingSolValveState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CabinCoolingSolValveState>(int_value);
  }
  return success;
}
bool AcReqDrvr_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AcReqDrvr_strings[3] = {};

static const char AcReqDrvr_names[] =
  "AcNotRequested"
  "AcReqDrvrDefault"
  "AcRequested";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AcReqDrvr_entries[] = {
  { {AcReqDrvr_names + 0, 14}, 0 },
  { {AcReqDrvr_names + 14, 16}, 4 },
  { {AcReqDrvr_names + 30, 11}, 1 },
};

static const int AcReqDrvr_entries_by_number[] = {
  0, // 0 -> AcNotRequested
  2, // 1 -> AcRequested
  1, // 4 -> AcReqDrvrDefault
};

const std::string& AcReqDrvr_Name(
    AcReqDrvr value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AcReqDrvr_entries,
          AcReqDrvr_entries_by_number,
          3, AcReqDrvr_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AcReqDrvr_entries,
      AcReqDrvr_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AcReqDrvr_strings[idx].get();
}
bool AcReqDrvr_Parse(
    const std::string& name, AcReqDrvr* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AcReqDrvr_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<AcReqDrvr>(int_value);
  }
  return success;
}
bool AcSetTemperature_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 35:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AcSetTemperature_strings[32] = {};

static const char AcSetTemperature_names[] =
  "AcSetTemperatureDefault"
  "Ac_16_5_Deg_C"
  "Ac_16_Deg_C"
  "Ac_17_5_Deg_C"
  "Ac_17_Deg_C"
  "Ac_18_5_Deg_C"
  "Ac_18_Deg_C"
  "Ac_19_5_Deg_C"
  "Ac_19_Deg_C"
  "Ac_20_5_Deg_C"
  "Ac_20_Deg_C"
  "Ac_21_5_Deg_C"
  "Ac_21_Deg_C"
  "Ac_22_5_Deg_C"
  "Ac_22_Deg_C"
  "Ac_23_5_Deg_C"
  "Ac_23_Deg_C"
  "Ac_24_5_Deg_C"
  "Ac_24_Deg_C"
  "Ac_25_5_Deg_C"
  "Ac_25_Deg_C"
  "Ac_26_5_Deg_C"
  "Ac_26_Deg_C"
  "Ac_27_5_Deg_C"
  "Ac_27_Deg_C"
  "Ac_28_5_Deg_C"
  "Ac_28_Deg_C"
  "Ac_29_5_Deg_C"
  "Ac_29_Deg_C"
  "Ac_30_Deg_C"
  "Ac_HI"
  "Ac_LO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AcSetTemperature_entries[] = {
  { {AcSetTemperature_names + 0, 23}, 35 },
  { {AcSetTemperature_names + 23, 13}, 2 },
  { {AcSetTemperature_names + 36, 11}, 1 },
  { {AcSetTemperature_names + 47, 13}, 4 },
  { {AcSetTemperature_names + 60, 11}, 3 },
  { {AcSetTemperature_names + 71, 13}, 6 },
  { {AcSetTemperature_names + 84, 11}, 5 },
  { {AcSetTemperature_names + 95, 13}, 8 },
  { {AcSetTemperature_names + 108, 11}, 7 },
  { {AcSetTemperature_names + 119, 13}, 10 },
  { {AcSetTemperature_names + 132, 11}, 9 },
  { {AcSetTemperature_names + 143, 13}, 12 },
  { {AcSetTemperature_names + 156, 11}, 11 },
  { {AcSetTemperature_names + 167, 13}, 14 },
  { {AcSetTemperature_names + 180, 11}, 13 },
  { {AcSetTemperature_names + 191, 13}, 16 },
  { {AcSetTemperature_names + 204, 11}, 15 },
  { {AcSetTemperature_names + 215, 13}, 18 },
  { {AcSetTemperature_names + 228, 11}, 17 },
  { {AcSetTemperature_names + 239, 13}, 20 },
  { {AcSetTemperature_names + 252, 11}, 19 },
  { {AcSetTemperature_names + 263, 13}, 22 },
  { {AcSetTemperature_names + 276, 11}, 21 },
  { {AcSetTemperature_names + 287, 13}, 24 },
  { {AcSetTemperature_names + 300, 11}, 23 },
  { {AcSetTemperature_names + 311, 13}, 26 },
  { {AcSetTemperature_names + 324, 11}, 25 },
  { {AcSetTemperature_names + 335, 13}, 28 },
  { {AcSetTemperature_names + 348, 11}, 27 },
  { {AcSetTemperature_names + 359, 11}, 29 },
  { {AcSetTemperature_names + 370, 5}, 30 },
  { {AcSetTemperature_names + 375, 5}, 0 },
};

static const int AcSetTemperature_entries_by_number[] = {
  31, // 0 -> Ac_LO
  2, // 1 -> Ac_16_Deg_C
  1, // 2 -> Ac_16_5_Deg_C
  4, // 3 -> Ac_17_Deg_C
  3, // 4 -> Ac_17_5_Deg_C
  6, // 5 -> Ac_18_Deg_C
  5, // 6 -> Ac_18_5_Deg_C
  8, // 7 -> Ac_19_Deg_C
  7, // 8 -> Ac_19_5_Deg_C
  10, // 9 -> Ac_20_Deg_C
  9, // 10 -> Ac_20_5_Deg_C
  12, // 11 -> Ac_21_Deg_C
  11, // 12 -> Ac_21_5_Deg_C
  14, // 13 -> Ac_22_Deg_C
  13, // 14 -> Ac_22_5_Deg_C
  16, // 15 -> Ac_23_Deg_C
  15, // 16 -> Ac_23_5_Deg_C
  18, // 17 -> Ac_24_Deg_C
  17, // 18 -> Ac_24_5_Deg_C
  20, // 19 -> Ac_25_Deg_C
  19, // 20 -> Ac_25_5_Deg_C
  22, // 21 -> Ac_26_Deg_C
  21, // 22 -> Ac_26_5_Deg_C
  24, // 23 -> Ac_27_Deg_C
  23, // 24 -> Ac_27_5_Deg_C
  26, // 25 -> Ac_28_Deg_C
  25, // 26 -> Ac_28_5_Deg_C
  28, // 27 -> Ac_29_Deg_C
  27, // 28 -> Ac_29_5_Deg_C
  29, // 29 -> Ac_30_Deg_C
  30, // 30 -> Ac_HI
  0, // 35 -> AcSetTemperatureDefault
};

const std::string& AcSetTemperature_Name(
    AcSetTemperature value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AcSetTemperature_entries,
          AcSetTemperature_entries_by_number,
          32, AcSetTemperature_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AcSetTemperature_entries,
      AcSetTemperature_entries_by_number,
      32, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AcSetTemperature_strings[idx].get();
}
bool AcSetTemperature_Parse(
    const std::string& name, AcSetTemperature* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AcSetTemperature_entries, 32, name, &int_value);
  if (success) {
    *value = static_cast<AcSetTemperature>(int_value);
  }
  return success;
}
bool BatteryCoolingSolValveState_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BatteryCoolingSolValveState_strings[3] = {};

static const char BatteryCoolingSolValveState_names[] =
  "BatteryColSolValveStateDefault"
  "BatteryColSvOFF"
  "BatteryColSvON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BatteryCoolingSolValveState_entries[] = {
  { {BatteryCoolingSolValveState_names + 0, 30}, 4 },
  { {BatteryCoolingSolValveState_names + 30, 15}, 0 },
  { {BatteryCoolingSolValveState_names + 45, 14}, 2 },
};

static const int BatteryCoolingSolValveState_entries_by_number[] = {
  1, // 0 -> BatteryColSvOFF
  2, // 2 -> BatteryColSvON
  0, // 4 -> BatteryColSolValveStateDefault
};

const std::string& BatteryCoolingSolValveState_Name(
    BatteryCoolingSolValveState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BatteryCoolingSolValveState_entries,
          BatteryCoolingSolValveState_entries_by_number,
          3, BatteryCoolingSolValveState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BatteryCoolingSolValveState_entries,
      BatteryCoolingSolValveState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BatteryCoolingSolValveState_strings[idx].get();
}
bool BatteryCoolingSolValveState_Parse(
    const std::string& name, BatteryCoolingSolValveState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BatteryCoolingSolValveState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BatteryCoolingSolValveState>(int_value);
  }
  return success;
}
bool BrakePressState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BrakePressState_strings[5] = {};

static const char BrakePressState_names[] =
  "BrakeNotPressed"
  "BrakePressed"
  "BrakeStateDefault"
  "Reserve35"
  "Reserve36";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BrakePressState_entries[] = {
  { {BrakePressState_names + 0, 15}, 1 },
  { {BrakePressState_names + 15, 12}, 0 },
  { {BrakePressState_names + 27, 17}, 4 },
  { {BrakePressState_names + 44, 9}, 2 },
  { {BrakePressState_names + 53, 9}, 3 },
};

static const int BrakePressState_entries_by_number[] = {
  1, // 0 -> BrakePressed
  0, // 1 -> BrakeNotPressed
  3, // 2 -> Reserve35
  4, // 3 -> Reserve36
  2, // 4 -> BrakeStateDefault
};

const std::string& BrakePressState_Name(
    BrakePressState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BrakePressState_entries,
          BrakePressState_entries_by_number,
          5, BrakePressState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BrakePressState_entries,
      BrakePressState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BrakePressState_strings[idx].get();
}
bool BrakePressState_Parse(
    const std::string& name, BrakePressState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BrakePressState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<BrakePressState>(int_value);
  }
  return success;
}
bool ParkBrakePressStateFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ParkBrakePressStateFlag_strings[5] = {};

static const char ParkBrakePressStateFlag_names[] =
  "ParkBrakeNotPressed"
  "ParkBrakePressStateDefault"
  "ParkBrakePressed"
  "Reserve85"
  "Reserve86";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ParkBrakePressStateFlag_entries[] = {
  { {ParkBrakePressStateFlag_names + 0, 19}, 0 },
  { {ParkBrakePressStateFlag_names + 19, 26}, 4 },
  { {ParkBrakePressStateFlag_names + 45, 16}, 1 },
  { {ParkBrakePressStateFlag_names + 61, 9}, 2 },
  { {ParkBrakePressStateFlag_names + 70, 9}, 3 },
};

static const int ParkBrakePressStateFlag_entries_by_number[] = {
  0, // 0 -> ParkBrakeNotPressed
  2, // 1 -> ParkBrakePressed
  3, // 2 -> Reserve85
  4, // 3 -> Reserve86
  1, // 4 -> ParkBrakePressStateDefault
};

const std::string& ParkBrakePressStateFlag_Name(
    ParkBrakePressStateFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ParkBrakePressStateFlag_entries,
          ParkBrakePressStateFlag_entries_by_number,
          5, ParkBrakePressStateFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ParkBrakePressStateFlag_entries,
      ParkBrakePressStateFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ParkBrakePressStateFlag_strings[idx].get();
}
bool ParkBrakePressStateFlag_Parse(
    const std::string& name, ParkBrakePressStateFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ParkBrakePressStateFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ParkBrakePressStateFlag>(int_value);
  }
  return success;
}
bool DriverSeatBeltFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DriverSeatBeltFlag_strings[5] = {};

static const char DriverSeatBeltFlag_names[] =
  "DriverSeatBeltBuckled"
  "DriverSeatBeltDefault"
  "DriverSeatBeltUnbuckled"
  "Reserve87"
  "Reserve88";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DriverSeatBeltFlag_entries[] = {
  { {DriverSeatBeltFlag_names + 0, 21}, 0 },
  { {DriverSeatBeltFlag_names + 21, 21}, 4 },
  { {DriverSeatBeltFlag_names + 42, 23}, 1 },
  { {DriverSeatBeltFlag_names + 65, 9}, 2 },
  { {DriverSeatBeltFlag_names + 74, 9}, 3 },
};

static const int DriverSeatBeltFlag_entries_by_number[] = {
  0, // 0 -> DriverSeatBeltBuckled
  2, // 1 -> DriverSeatBeltUnbuckled
  3, // 2 -> Reserve87
  4, // 3 -> Reserve88
  1, // 4 -> DriverSeatBeltDefault
};

const std::string& DriverSeatBeltFlag_Name(
    DriverSeatBeltFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DriverSeatBeltFlag_entries,
          DriverSeatBeltFlag_entries_by_number,
          5, DriverSeatBeltFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DriverSeatBeltFlag_entries,
      DriverSeatBeltFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DriverSeatBeltFlag_strings[idx].get();
}
bool DriverSeatBeltFlag_Parse(
    const std::string& name, DriverSeatBeltFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DriverSeatBeltFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DriverSeatBeltFlag>(int_value);
  }
  return success;
}
bool CoDriverSeatBeltFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CoDriverSeatBeltFlag_strings[5] = {};

static const char CoDriverSeatBeltFlag_names[] =
  "CoDriverSeatBeltBuckled"
  "CoDriverSeatBeltDefault"
  "CoDriverSeatBeltUnbuckled"
  "Reserve89"
  "Reserve90";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CoDriverSeatBeltFlag_entries[] = {
  { {CoDriverSeatBeltFlag_names + 0, 23}, 0 },
  { {CoDriverSeatBeltFlag_names + 23, 23}, 4 },
  { {CoDriverSeatBeltFlag_names + 46, 25}, 1 },
  { {CoDriverSeatBeltFlag_names + 71, 9}, 2 },
  { {CoDriverSeatBeltFlag_names + 80, 9}, 3 },
};

static const int CoDriverSeatBeltFlag_entries_by_number[] = {
  0, // 0 -> CoDriverSeatBeltBuckled
  2, // 1 -> CoDriverSeatBeltUnbuckled
  3, // 2 -> Reserve89
  4, // 3 -> Reserve90
  1, // 4 -> CoDriverSeatBeltDefault
};

const std::string& CoDriverSeatBeltFlag_Name(
    CoDriverSeatBeltFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CoDriverSeatBeltFlag_entries,
          CoDriverSeatBeltFlag_entries_by_number,
          5, CoDriverSeatBeltFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CoDriverSeatBeltFlag_entries,
      CoDriverSeatBeltFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CoDriverSeatBeltFlag_strings[idx].get();
}
bool CoDriverSeatBeltFlag_Parse(
    const std::string& name, CoDriverSeatBeltFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CoDriverSeatBeltFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<CoDriverSeatBeltFlag>(int_value);
  }
  return success;
}
bool CruiseControlStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CruiseControlStatus_strings[5] = {};

static const char CruiseControlStatus_names[] =
  "CruiseControlStatusDefault"
  "CruiseDisabled"
  "CruiseEnabledActive"
  "CruiseEnabledInactive"
  "CrusieNotPresent";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CruiseControlStatus_entries[] = {
  { {CruiseControlStatus_names + 0, 26}, 6 },
  { {CruiseControlStatus_names + 26, 14}, 0 },
  { {CruiseControlStatus_names + 40, 19}, 1 },
  { {CruiseControlStatus_names + 59, 21}, 2 },
  { {CruiseControlStatus_names + 80, 16}, 3 },
};

static const int CruiseControlStatus_entries_by_number[] = {
  1, // 0 -> CruiseDisabled
  2, // 1 -> CruiseEnabledActive
  3, // 2 -> CruiseEnabledInactive
  4, // 3 -> CrusieNotPresent
  0, // 6 -> CruiseControlStatusDefault
};

const std::string& CruiseControlStatus_Name(
    CruiseControlStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CruiseControlStatus_entries,
          CruiseControlStatus_entries_by_number,
          5, CruiseControlStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CruiseControlStatus_entries,
      CruiseControlStatus_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CruiseControlStatus_strings[idx].get();
}
bool CruiseControlStatus_Parse(
    const std::string& name, CruiseControlStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CruiseControlStatus_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<CruiseControlStatus>(int_value);
  }
  return success;
}
bool DRlState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DRlState_strings[3] = {};

static const char DRlState_names[] =
  "DRlOff"
  "DRlOn"
  "DRlStateDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DRlState_entries[] = {
  { {DRlState_names + 0, 6}, 0 },
  { {DRlState_names + 6, 5}, 1 },
  { {DRlState_names + 11, 15}, 4 },
};

static const int DRlState_entries_by_number[] = {
  0, // 0 -> DRlOff
  1, // 1 -> DRlOn
  2, // 4 -> DRlStateDefault
};

const std::string& DRlState_Name(
    DRlState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DRlState_entries,
          DRlState_entries_by_number,
          3, DRlState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DRlState_entries,
      DRlState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DRlState_strings[idx].get();
}
bool DRlState_Parse(
    const std::string& name, DRlState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DRlState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DRlState>(int_value);
  }
  return success;
}
bool WiperState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WiperState_strings[3] = {};

static const char WiperState_names[] =
  "WiperOff"
  "WiperOn"
  "WiperStateDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WiperState_entries[] = {
  { {WiperState_names + 0, 8}, 0 },
  { {WiperState_names + 8, 7}, 1 },
  { {WiperState_names + 15, 17}, 4 },
};

static const int WiperState_entries_by_number[] = {
  0, // 0 -> WiperOff
  1, // 1 -> WiperOn
  2, // 4 -> WiperStateDefault
};

const std::string& WiperState_Name(
    WiperState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WiperState_entries,
          WiperState_entries_by_number,
          3, WiperState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WiperState_entries,
      WiperState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WiperState_strings[idx].get();
}
bool WiperState_Parse(
    const std::string& name, WiperState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WiperState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<WiperState>(int_value);
  }
  return success;
}
bool BiFuelMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BiFuelMode_strings[3] = {};

static const char BiFuelMode_names[] =
  "BiFuelModeDefault"
  "CNG"
  "Gasoline";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BiFuelMode_entries[] = {
  { {BiFuelMode_names + 0, 17}, 4 },
  { {BiFuelMode_names + 17, 3}, 1 },
  { {BiFuelMode_names + 20, 8}, 0 },
};

static const int BiFuelMode_entries_by_number[] = {
  2, // 0 -> Gasoline
  1, // 1 -> CNG
  0, // 4 -> BiFuelModeDefault
};

const std::string& BiFuelMode_Name(
    BiFuelMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BiFuelMode_entries,
          BiFuelMode_entries_by_number,
          3, BiFuelMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BiFuelMode_entries,
      BiFuelMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BiFuelMode_strings[idx].get();
}
bool BiFuelMode_Parse(
    const std::string& name, BiFuelMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BiFuelMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BiFuelMode>(int_value);
  }
  return success;
}
bool AcMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AcMode_strings[4] = {};

static const char AcMode_names[] =
  "AcModeDefault"
  "Auto"
  "Economy"
  "Manual";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AcMode_entries[] = {
  { {AcMode_names + 0, 13}, 4 },
  { {AcMode_names + 13, 4}, 1 },
  { {AcMode_names + 17, 7}, 2 },
  { {AcMode_names + 24, 6}, 0 },
};

static const int AcMode_entries_by_number[] = {
  3, // 0 -> Manual
  1, // 1 -> Auto
  2, // 2 -> Economy
  0, // 4 -> AcModeDefault
};

const std::string& AcMode_Name(
    AcMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AcMode_entries,
          AcMode_entries_by_number,
          4, AcMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AcMode_entries,
      AcMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AcMode_strings[idx].get();
}
bool AcMode_Parse(
    const std::string& name, AcMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AcMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AcMode>(int_value);
  }
  return success;
}
bool LeftFrontDoorOpenFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LeftFrontDoorOpenFlag_strings[5] = {};

static const char LeftFrontDoorOpenFlag_names[] =
  "LeftFrontDoorClosed"
  "LeftFrontDoorOpen"
  "LeftFrontDoorOpenDefault"
  "Reserve45"
  "Reserve46";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LeftFrontDoorOpenFlag_entries[] = {
  { {LeftFrontDoorOpenFlag_names + 0, 19}, 0 },
  { {LeftFrontDoorOpenFlag_names + 19, 17}, 1 },
  { {LeftFrontDoorOpenFlag_names + 36, 24}, 4 },
  { {LeftFrontDoorOpenFlag_names + 60, 9}, 2 },
  { {LeftFrontDoorOpenFlag_names + 69, 9}, 3 },
};

static const int LeftFrontDoorOpenFlag_entries_by_number[] = {
  0, // 0 -> LeftFrontDoorClosed
  1, // 1 -> LeftFrontDoorOpen
  3, // 2 -> Reserve45
  4, // 3 -> Reserve46
  2, // 4 -> LeftFrontDoorOpenDefault
};

const std::string& LeftFrontDoorOpenFlag_Name(
    LeftFrontDoorOpenFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LeftFrontDoorOpenFlag_entries,
          LeftFrontDoorOpenFlag_entries_by_number,
          5, LeftFrontDoorOpenFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LeftFrontDoorOpenFlag_entries,
      LeftFrontDoorOpenFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LeftFrontDoorOpenFlag_strings[idx].get();
}
bool LeftFrontDoorOpenFlag_Parse(
    const std::string& name, LeftFrontDoorOpenFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LeftFrontDoorOpenFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LeftFrontDoorOpenFlag>(int_value);
  }
  return success;
}
bool RightFrontDoorOpenFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RightFrontDoorOpenFlag_strings[5] = {};

static const char RightFrontDoorOpenFlag_names[] =
  "Reserve47"
  "Reserve48"
  "RightFrontDoorClosed"
  "RightFrontDoorOpen"
  "RightFrontDoorOpenDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RightFrontDoorOpenFlag_entries[] = {
  { {RightFrontDoorOpenFlag_names + 0, 9}, 2 },
  { {RightFrontDoorOpenFlag_names + 9, 9}, 3 },
  { {RightFrontDoorOpenFlag_names + 18, 20}, 0 },
  { {RightFrontDoorOpenFlag_names + 38, 18}, 1 },
  { {RightFrontDoorOpenFlag_names + 56, 25}, 4 },
};

static const int RightFrontDoorOpenFlag_entries_by_number[] = {
  2, // 0 -> RightFrontDoorClosed
  3, // 1 -> RightFrontDoorOpen
  0, // 2 -> Reserve47
  1, // 3 -> Reserve48
  4, // 4 -> RightFrontDoorOpenDefault
};

const std::string& RightFrontDoorOpenFlag_Name(
    RightFrontDoorOpenFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RightFrontDoorOpenFlag_entries,
          RightFrontDoorOpenFlag_entries_by_number,
          5, RightFrontDoorOpenFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RightFrontDoorOpenFlag_entries,
      RightFrontDoorOpenFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RightFrontDoorOpenFlag_strings[idx].get();
}
bool RightFrontDoorOpenFlag_Parse(
    const std::string& name, RightFrontDoorOpenFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RightFrontDoorOpenFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<RightFrontDoorOpenFlag>(int_value);
  }
  return success;
}
bool LeftRearDoorOpenFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LeftRearDoorOpenFlag_strings[5] = {};

static const char LeftRearDoorOpenFlag_names[] =
  "LeftRearDoorClosed"
  "LeftRearDoorOpen"
  "LeftRearDoorOpenDefault"
  "Reserve49"
  "Reserve50";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LeftRearDoorOpenFlag_entries[] = {
  { {LeftRearDoorOpenFlag_names + 0, 18}, 0 },
  { {LeftRearDoorOpenFlag_names + 18, 16}, 1 },
  { {LeftRearDoorOpenFlag_names + 34, 23}, 4 },
  { {LeftRearDoorOpenFlag_names + 57, 9}, 2 },
  { {LeftRearDoorOpenFlag_names + 66, 9}, 3 },
};

static const int LeftRearDoorOpenFlag_entries_by_number[] = {
  0, // 0 -> LeftRearDoorClosed
  1, // 1 -> LeftRearDoorOpen
  3, // 2 -> Reserve49
  4, // 3 -> Reserve50
  2, // 4 -> LeftRearDoorOpenDefault
};

const std::string& LeftRearDoorOpenFlag_Name(
    LeftRearDoorOpenFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LeftRearDoorOpenFlag_entries,
          LeftRearDoorOpenFlag_entries_by_number,
          5, LeftRearDoorOpenFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LeftRearDoorOpenFlag_entries,
      LeftRearDoorOpenFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LeftRearDoorOpenFlag_strings[idx].get();
}
bool LeftRearDoorOpenFlag_Parse(
    const std::string& name, LeftRearDoorOpenFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LeftRearDoorOpenFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<LeftRearDoorOpenFlag>(int_value);
  }
  return success;
}
bool RightRearDoorOpenFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RightRearDoorOpenFlag_strings[5] = {};

static const char RightRearDoorOpenFlag_names[] =
  "Reserve51"
  "Reserve52"
  "RightRearDoorClosed"
  "RightRearDoorOpen"
  "RightRearDoorOpenDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RightRearDoorOpenFlag_entries[] = {
  { {RightRearDoorOpenFlag_names + 0, 9}, 2 },
  { {RightRearDoorOpenFlag_names + 9, 9}, 3 },
  { {RightRearDoorOpenFlag_names + 18, 19}, 0 },
  { {RightRearDoorOpenFlag_names + 37, 17}, 1 },
  { {RightRearDoorOpenFlag_names + 54, 24}, 4 },
};

static const int RightRearDoorOpenFlag_entries_by_number[] = {
  2, // 0 -> RightRearDoorClosed
  3, // 1 -> RightRearDoorOpen
  0, // 2 -> Reserve51
  1, // 3 -> Reserve52
  4, // 4 -> RightRearDoorOpenDefault
};

const std::string& RightRearDoorOpenFlag_Name(
    RightRearDoorOpenFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RightRearDoorOpenFlag_entries,
          RightRearDoorOpenFlag_entries_by_number,
          5, RightRearDoorOpenFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RightRearDoorOpenFlag_entries,
      RightRearDoorOpenFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RightRearDoorOpenFlag_strings[idx].get();
}
bool RightRearDoorOpenFlag_Parse(
    const std::string& name, RightRearDoorOpenFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RightRearDoorOpenFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<RightRearDoorOpenFlag>(int_value);
  }
  return success;
}
bool TailGateOpenFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TailGateOpenFlag_strings[5] = {};

static const char TailGateOpenFlag_names[] =
  "Reserve53"
  "Reserve54"
  "TailGateClosed"
  "TailGateOpen"
  "TailGateOpenDefault";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TailGateOpenFlag_entries[] = {
  { {TailGateOpenFlag_names + 0, 9}, 2 },
  { {TailGateOpenFlag_names + 9, 9}, 3 },
  { {TailGateOpenFlag_names + 18, 14}, 0 },
  { {TailGateOpenFlag_names + 32, 12}, 1 },
  { {TailGateOpenFlag_names + 44, 19}, 4 },
};

static const int TailGateOpenFlag_entries_by_number[] = {
  2, // 0 -> TailGateClosed
  3, // 1 -> TailGateOpen
  0, // 2 -> Reserve53
  1, // 3 -> Reserve54
  4, // 4 -> TailGateOpenDefault
};

const std::string& TailGateOpenFlag_Name(
    TailGateOpenFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TailGateOpenFlag_entries,
          TailGateOpenFlag_entries_by_number,
          5, TailGateOpenFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TailGateOpenFlag_entries,
      TailGateOpenFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TailGateOpenFlag_strings[idx].get();
}
bool TailGateOpenFlag_Parse(
    const std::string& name, TailGateOpenFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TailGateOpenFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<TailGateOpenFlag>(int_value);
  }
  return success;
}
bool BonnetOpenFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BonnetOpenFlag_strings[5] = {};

static const char BonnetOpenFlag_names[] =
  "BonnetClosed"
  "BonnetOpen"
  "BonnetOpenDefault"
  "Reserve59"
  "Reserve60";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BonnetOpenFlag_entries[] = {
  { {BonnetOpenFlag_names + 0, 12}, 0 },
  { {BonnetOpenFlag_names + 12, 10}, 1 },
  { {BonnetOpenFlag_names + 22, 17}, 4 },
  { {BonnetOpenFlag_names + 39, 9}, 2 },
  { {BonnetOpenFlag_names + 48, 9}, 3 },
};

static const int BonnetOpenFlag_entries_by_number[] = {
  0, // 0 -> BonnetClosed
  1, // 1 -> BonnetOpen
  3, // 2 -> Reserve59
  4, // 3 -> Reserve60
  2, // 4 -> BonnetOpenDefault
};

const std::string& BonnetOpenFlag_Name(
    BonnetOpenFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BonnetOpenFlag_entries,
          BonnetOpenFlag_entries_by_number,
          5, BonnetOpenFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BonnetOpenFlag_entries,
      BonnetOpenFlag_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BonnetOpenFlag_strings[idx].get();
}
bool BonnetOpenFlag_Parse(
    const std::string& name, BonnetOpenFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BonnetOpenFlag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<BonnetOpenFlag>(int_value);
  }
  return success;
}

// ===================================================================

void TelemetryReading::InitAsDefaultInstance() {
  ::com::bosch::itrams_gen2e::_TelemetryReading_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TelemetryReading::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const TelemetryReading* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TelemetryReading::_Internal::timestamp(const TelemetryReading* msg) {
  return *msg->timestamp_;
}
void TelemetryReading::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
TelemetryReading::TelemetryReading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.bosch.itrams_gen2e.TelemetryReading)
}
TelemetryReading::TelemetryReading(const TelemetryReading& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&gpsfixstatus_, &from.gpsfixstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehiclebatterylevel_) -
    reinterpret_cast<char*>(&gpsfixstatus_)) + sizeof(vehiclebatterylevel_));
  clear_has_gpsLatProperty();
  switch (from.gpsLatProperty_case()) {
    case kGpsLat: {
      _internal_set_gpslat(from._internal_gpslat());
      break;
    }
    case GPSLATPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsLongProperty();
  switch (from.gpsLongProperty_case()) {
    case kGpsLong: {
      _internal_set_gpslong(from._internal_gpslong());
      break;
    }
    case GPSLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsAltProperty();
  switch (from.gpsAltProperty_case()) {
    case kGpsAlt: {
      _internal_set_gpsalt(from._internal_gpsalt());
      break;
    }
    case GPSALTPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsCourseAngleProperty();
  switch (from.gpsCourseAngleProperty_case()) {
    case kGpsCourseAngle: {
      _internal_set_gpscourseangle(from._internal_gpscourseangle());
      break;
    }
    case GPSCOURSEANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_accelXProperty();
  switch (from.accelXProperty_case()) {
    case kAccelX: {
      _internal_set_accelx(from._internal_accelx());
      break;
    }
    case ACCELXPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_accelYProperty();
  switch (from.accelYProperty_case()) {
    case kAccelY: {
      _internal_set_accely(from._internal_accely());
      break;
    }
    case ACCELYPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_accelZProperty();
  switch (from.accelZProperty_case()) {
    case kAccelZ: {
      _internal_set_accelz(from._internal_accelz());
      break;
    }
    case ACCELZPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsSignalQualityProperty();
  switch (from.gpsSignalQualityProperty_case()) {
    case kGpsSignalQuality: {
      _internal_set_gpssignalquality(from._internal_gpssignalquality());
      break;
    }
    case GPSSIGNALQUALITYPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsAccuracyLatProperty();
  switch (from.gpsAccuracyLatProperty_case()) {
    case kGpsAccuracyLat: {
      _internal_set_gpsaccuracylat(from._internal_gpsaccuracylat());
      break;
    }
    case GPSACCURACYLATPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsAccuracyLongProperty();
  switch (from.gpsAccuracyLongProperty_case()) {
    case kGpsAccuracyLong: {
      _internal_set_gpsaccuracylong(from._internal_gpsaccuracylong());
      break;
    }
    case GPSACCURACYLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gpsAccuracyAltProperty();
  switch (from.gpsAccuracyAltProperty_case()) {
    case kGpsAccuracyAlt: {
      _internal_set_gpsaccuracyalt(from._internal_gpsaccuracyalt());
      break;
    }
    case GPSACCURACYALTPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gsmSignalStrengthProperty();
  switch (from.gsmSignalStrengthProperty_case()) {
    case kGsmSignalStrength: {
      _internal_set_gsmsignalstrength(from._internal_gsmsignalstrength());
      break;
    }
    case GSMSIGNALSTRENGTHPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gsmMccProperty();
  switch (from.gsmMccProperty_case()) {
    case kGsmMcc: {
      _internal_set_gsmmcc(from._internal_gsmmcc());
      break;
    }
    case GSMMCCPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gsmMncProperty();
  switch (from.gsmMncProperty_case()) {
    case kGsmMnc: {
      _internal_set_gsmmnc(from._internal_gsmmnc());
      break;
    }
    case GSMMNCPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_ignitionOnProperty();
  switch (from.ignitionOnProperty_case()) {
    case kIgnitionOn: {
      _internal_set_ignitionon(from._internal_ignitionon());
      break;
    }
    case IGNITIONONPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_crankOnProperty();
  switch (from.crankOnProperty_case()) {
    case kCrankOn: {
      _internal_set_crankon(from._internal_crankon());
      break;
    }
    case CRANKONPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_vehicleSpeedProperty();
  switch (from.vehicleSpeedProperty_case()) {
    case kVehicleSpeed: {
      _internal_set_vehiclespeed(from._internal_vehiclespeed());
      break;
    }
    case VEHICLESPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_engineRpmProperty();
  switch (from.engineRpmProperty_case()) {
    case kEngineRpm: {
      _internal_set_enginerpm(from._internal_enginerpm());
      break;
    }
    case ENGINERPMPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_steeringAngleProperty();
  switch (from.steeringAngleProperty_case()) {
    case kSteeringAngle: {
      _internal_set_steeringangle(from._internal_steeringangle());
      break;
    }
    case STEERINGANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_distanceTravelledProperty();
  switch (from.distanceTravelledProperty_case()) {
    case kDistanceTravelled: {
      _internal_set_distancetravelled(from._internal_distancetravelled());
      break;
    }
    case DISTANCETRAVELLEDPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_outsideAmbientTemperatureProperty();
  switch (from.outsideAmbientTemperatureProperty_case()) {
    case kOutsideAmbientTemperature: {
      _internal_set_outsideambienttemperature(from._internal_outsideambienttemperature());
      break;
    }
    case OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_vehicleInteriorTemperatureProperty();
  switch (from.vehicleInteriorTemperatureProperty_case()) {
    case kVehicleInteriorTemperature: {
      _internal_set_vehicleinteriortemperature(from._internal_vehicleinteriortemperature());
      break;
    }
    case VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_steeringDirectionProperty();
  switch (from.steeringDirectionProperty_case()) {
    case kSteeringDirection: {
      _internal_set_steeringdirection(from._internal_steeringdirection());
      break;
    }
    case STEERINGDIRECTIONPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_acCompressorPressureProperty();
  switch (from.acCompressorPressureProperty_case()) {
    case kAcCompressorPressure: {
      _internal_set_accompressorpressure(from._internal_accompressorpressure());
      break;
    }
    case ACCOMPRESSORPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_acceleratorPedalPositionProperty();
  switch (from.acceleratorPedalPositionProperty_case()) {
    case kAcceleratorPedalPosition: {
      _internal_set_acceleratorpedalposition(from._internal_acceleratorpedalposition());
      break;
    }
    case ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_atmosphericPressureProperty();
  switch (from.atmosphericPressureProperty_case()) {
    case kAtmosphericPressure: {
      _internal_set_atmosphericpressure(from._internal_atmosphericpressure());
      break;
    }
    case ATMOSPHERICPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_transmissionOilTemperatureProperty();
  switch (from.transmissionOilTemperatureProperty_case()) {
    case kTransmissionOilTemperature: {
      _internal_set_transmissionoiltemperature(from._internal_transmissionoiltemperature());
      break;
    }
    case TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_evGearInfoProperty();
  switch (from.evGearInfoProperty_case()) {
    case kEvGearInfo: {
      _internal_set_evgearinfo(from._internal_evgearinfo());
      break;
    }
    case EVGEARINFOPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_vcuPowerModeProperty();
  switch (from.vcuPowerModeProperty_case()) {
    case kVcuPowerMode: {
      _internal_set_vcupowermode(from._internal_vcupowermode());
      break;
    }
    case VCUPOWERMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gear_InfoProperty();
  switch (from.gear_InfoProperty_case()) {
    case kGearInfo: {
      _internal_set_gear_info(from._internal_gear_info());
      break;
    }
    case GEAR_INFOPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_fuelRemainingProperty();
  switch (from.fuelRemainingProperty_case()) {
    case kFuelRemaining: {
      _internal_set_fuelremaining(from._internal_fuelremaining());
      break;
    }
    case FUELREMAININGPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_cumulativeFuelConsumptionRateProperty();
  switch (from.cumulativeFuelConsumptionRateProperty_case()) {
    case kCumulativeFuelConsumptionRate: {
      _internal_set_cumulativefuelconsumptionrate(from._internal_cumulativefuelconsumptionrate());
      break;
    }
    case CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_engineIdleSpeedTargetProperty();
  switch (from.engineIdleSpeedTargetProperty_case()) {
    case kEngineIdleSpeedTarget: {
      _internal_set_engineidlespeedtarget(from._internal_engineidlespeedtarget());
      break;
    }
    case ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_engineCoolantTemperatureProperty();
  switch (from.engineCoolantTemperatureProperty_case()) {
    case kEngineCoolantTemperature: {
      _internal_set_enginecoolanttemperature(from._internal_enginecoolanttemperature());
      break;
    }
    case ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gyroscopeXProperty();
  switch (from.gyroscopeXProperty_case()) {
    case kGyroscopeX: {
      _internal_set_gyroscopex(from._internal_gyroscopex());
      break;
    }
    case GYROSCOPEXPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gyroscopeYProperty();
  switch (from.gyroscopeYProperty_case()) {
    case kGyroscopeY: {
      _internal_set_gyroscopey(from._internal_gyroscopey());
      break;
    }
    case GYROSCOPEYPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_gyroscopeZProperty();
  switch (from.gyroscopeZProperty_case()) {
    case kGyroscopeZ: {
      _internal_set_gyroscopez(from._internal_gyroscopez());
      break;
    }
    case GYROSCOPEZPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_blowerSpeedProperty();
  switch (from.blowerSpeedProperty_case()) {
    case kBlowerSpeed: {
      _internal_set_blowerspeed(from._internal_blowerspeed());
      break;
    }
    case BLOWERSPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvAmpHrProperty();
  switch (from.hvAmpHrProperty_case()) {
    case kHvAmpHr: {
      _internal_set_hvamphr(from._internal_hvamphr());
      break;
    }
    case HVAMPHRPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvAmpHrRegenProperty();
  switch (from.hvAmpHrRegenProperty_case()) {
    case kHvAmpHrRegen: {
      _internal_set_hvamphrregen(from._internal_hvamphrregen());
      break;
    }
    case HVAMPHRREGENPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvBattMaxCellVoltageProperty();
  switch (from.hvBattMaxCellVoltageProperty_case()) {
    case kHvBattMaxCellVoltage: {
      _internal_set_hvbattmaxcellvoltage(from._internal_hvbattmaxcellvoltage());
      break;
    }
    case HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvBattMinCellVoltageProperty();
  switch (from.hvBattMinCellVoltageProperty_case()) {
    case kHvBattMinCellVoltage: {
      _internal_set_hvbattmincellvoltage(from._internal_hvbattmincellvoltage());
      break;
    }
    case HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvBattMaxCellTempProperty();
  switch (from.hvBattMaxCellTempProperty_case()) {
    case kHvBattMaxCellTemp: {
      _internal_set_hvbattmaxcelltemp(from._internal_hvbattmaxcelltemp());
      break;
    }
    case HVBATTMAXCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvBattMinCellTempProperty();
  switch (from.hvBattMinCellTempProperty_case()) {
    case kHvBattMinCellTemp: {
      _internal_set_hvbattmincelltemp(from._internal_hvbattmincelltemp());
      break;
    }
    case HVBATTMINCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_hvBattPackVoltageProperty();
  switch (from.hvBattPackVoltageProperty_case()) {
    case kHvBattPackVoltage: {
      _internal_set_hvbattpackvoltage(from._internal_hvbattpackvoltage());
      break;
    }
    case HVBATTPACKVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_brkPressStateProperty();
  switch (from.brkPressStateProperty_case()) {
    case kBrkPressState: {
      _internal_set_brkpressstate(from._internal_brkpressstate());
      break;
    }
    case BRKPRESSSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_vehicleSpeedTwoProperty();
  switch (from.vehicleSpeedTwoProperty_case()) {
    case kVehicleSpeedTwo: {
      _internal_set_vehiclespeedtwo(from._internal_vehiclespeedtwo());
      break;
    }
    case VEHICLESPEEDTWOPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_vehicleDriveModeProperty();
  switch (from.vehicleDriveModeProperty_case()) {
    case kVehicleDriveMode: {
      _internal_set_vehicledrivemode(from._internal_vehicledrivemode());
      break;
    }
    case VEHICLEDRIVEMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_clutchStateProperty();
  switch (from.clutchStateProperty_case()) {
    case kClutchState: {
      _internal_set_clutchstate(from._internal_clutchstate());
      break;
    }
    case CLUTCHSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  clear_has_acStateProperty();
  switch (from.acStateProperty_case()) {
    case kAcState: {
      _internal_set_acstate(from._internal_acstate());
      break;
    }
    case ACSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.bosch.itrams_gen2e.TelemetryReading)
}

void TelemetryReading::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryReading_common_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehiclebatterylevel_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(vehiclebatterylevel_));
  clear_has_gpsLatProperty();
  clear_has_gpsLongProperty();
  clear_has_gpsAltProperty();
  clear_has_gpsCourseAngleProperty();
  clear_has_accelXProperty();
  clear_has_accelYProperty();
  clear_has_accelZProperty();
  clear_has_gpsSignalQualityProperty();
  clear_has_gpsAccuracyLatProperty();
  clear_has_gpsAccuracyLongProperty();
  clear_has_gpsAccuracyAltProperty();
  clear_has_gsmSignalStrengthProperty();
  clear_has_gsmMccProperty();
  clear_has_gsmMncProperty();
  clear_has_ignitionOnProperty();
  clear_has_crankOnProperty();
  clear_has_vehicleSpeedProperty();
  clear_has_engineRpmProperty();
  clear_has_steeringAngleProperty();
  clear_has_distanceTravelledProperty();
  clear_has_outsideAmbientTemperatureProperty();
  clear_has_vehicleInteriorTemperatureProperty();
  clear_has_steeringDirectionProperty();
  clear_has_acCompressorPressureProperty();
  clear_has_acceleratorPedalPositionProperty();
  clear_has_atmosphericPressureProperty();
  clear_has_transmissionOilTemperatureProperty();
  clear_has_evGearInfoProperty();
  clear_has_vcuPowerModeProperty();
  clear_has_gear_InfoProperty();
  clear_has_fuelRemainingProperty();
  clear_has_cumulativeFuelConsumptionRateProperty();
  clear_has_engineIdleSpeedTargetProperty();
  clear_has_engineCoolantTemperatureProperty();
  clear_has_gyroscopeXProperty();
  clear_has_gyroscopeYProperty();
  clear_has_gyroscopeZProperty();
  clear_has_blowerSpeedProperty();
  clear_has_hvAmpHrProperty();
  clear_has_hvAmpHrRegenProperty();
  clear_has_hvBattMaxCellVoltageProperty();
  clear_has_hvBattMinCellVoltageProperty();
  clear_has_hvBattMaxCellTempProperty();
  clear_has_hvBattMinCellTempProperty();
  clear_has_hvBattPackVoltageProperty();
  clear_has_brkPressStateProperty();
  clear_has_vehicleSpeedTwoProperty();
  clear_has_vehicleDriveModeProperty();
  clear_has_clutchStateProperty();
  clear_has_acStateProperty();
}

TelemetryReading::~TelemetryReading() {
  // @@protoc_insertion_point(destructor:com.bosch.itrams_gen2e.TelemetryReading)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void TelemetryReading::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_gpsLatProperty()) {
    clear_gpsLatProperty();
  }
  if (has_gpsLongProperty()) {
    clear_gpsLongProperty();
  }
  if (has_gpsAltProperty()) {
    clear_gpsAltProperty();
  }
  if (has_gpsCourseAngleProperty()) {
    clear_gpsCourseAngleProperty();
  }
  if (has_accelXProperty()) {
    clear_accelXProperty();
  }
  if (has_accelYProperty()) {
    clear_accelYProperty();
  }
  if (has_accelZProperty()) {
    clear_accelZProperty();
  }
  if (has_gpsSignalQualityProperty()) {
    clear_gpsSignalQualityProperty();
  }
  if (has_gpsAccuracyLatProperty()) {
    clear_gpsAccuracyLatProperty();
  }
  if (has_gpsAccuracyLongProperty()) {
    clear_gpsAccuracyLongProperty();
  }
  if (has_gpsAccuracyAltProperty()) {
    clear_gpsAccuracyAltProperty();
  }
  if (has_gsmSignalStrengthProperty()) {
    clear_gsmSignalStrengthProperty();
  }
  if (has_gsmMccProperty()) {
    clear_gsmMccProperty();
  }
  if (has_gsmMncProperty()) {
    clear_gsmMncProperty();
  }
  if (has_ignitionOnProperty()) {
    clear_ignitionOnProperty();
  }
  if (has_crankOnProperty()) {
    clear_crankOnProperty();
  }
  if (has_vehicleSpeedProperty()) {
    clear_vehicleSpeedProperty();
  }
  if (has_engineRpmProperty()) {
    clear_engineRpmProperty();
  }
  if (has_steeringAngleProperty()) {
    clear_steeringAngleProperty();
  }
  if (has_distanceTravelledProperty()) {
    clear_distanceTravelledProperty();
  }
  if (has_outsideAmbientTemperatureProperty()) {
    clear_outsideAmbientTemperatureProperty();
  }
  if (has_vehicleInteriorTemperatureProperty()) {
    clear_vehicleInteriorTemperatureProperty();
  }
  if (has_steeringDirectionProperty()) {
    clear_steeringDirectionProperty();
  }
  if (has_acCompressorPressureProperty()) {
    clear_acCompressorPressureProperty();
  }
  if (has_acceleratorPedalPositionProperty()) {
    clear_acceleratorPedalPositionProperty();
  }
  if (has_atmosphericPressureProperty()) {
    clear_atmosphericPressureProperty();
  }
  if (has_transmissionOilTemperatureProperty()) {
    clear_transmissionOilTemperatureProperty();
  }
  if (has_evGearInfoProperty()) {
    clear_evGearInfoProperty();
  }
  if (has_vcuPowerModeProperty()) {
    clear_vcuPowerModeProperty();
  }
  if (has_gear_InfoProperty()) {
    clear_gear_InfoProperty();
  }
  if (has_fuelRemainingProperty()) {
    clear_fuelRemainingProperty();
  }
  if (has_cumulativeFuelConsumptionRateProperty()) {
    clear_cumulativeFuelConsumptionRateProperty();
  }
  if (has_engineIdleSpeedTargetProperty()) {
    clear_engineIdleSpeedTargetProperty();
  }
  if (has_engineCoolantTemperatureProperty()) {
    clear_engineCoolantTemperatureProperty();
  }
  if (has_gyroscopeXProperty()) {
    clear_gyroscopeXProperty();
  }
  if (has_gyroscopeYProperty()) {
    clear_gyroscopeYProperty();
  }
  if (has_gyroscopeZProperty()) {
    clear_gyroscopeZProperty();
  }
  if (has_blowerSpeedProperty()) {
    clear_blowerSpeedProperty();
  }
  if (has_hvAmpHrProperty()) {
    clear_hvAmpHrProperty();
  }
  if (has_hvAmpHrRegenProperty()) {
    clear_hvAmpHrRegenProperty();
  }
  if (has_hvBattMaxCellVoltageProperty()) {
    clear_hvBattMaxCellVoltageProperty();
  }
  if (has_hvBattMinCellVoltageProperty()) {
    clear_hvBattMinCellVoltageProperty();
  }
  if (has_hvBattMaxCellTempProperty()) {
    clear_hvBattMaxCellTempProperty();
  }
  if (has_hvBattMinCellTempProperty()) {
    clear_hvBattMinCellTempProperty();
  }
  if (has_hvBattPackVoltageProperty()) {
    clear_hvBattPackVoltageProperty();
  }
  if (has_brkPressStateProperty()) {
    clear_brkPressStateProperty();
  }
  if (has_vehicleSpeedTwoProperty()) {
    clear_vehicleSpeedTwoProperty();
  }
  if (has_vehicleDriveModeProperty()) {
    clear_vehicleDriveModeProperty();
  }
  if (has_clutchStateProperty()) {
    clear_clutchStateProperty();
  }
  if (has_acStateProperty()) {
    clear_acStateProperty();
  }
}

void TelemetryReading::ArenaDtor(void* object) {
  TelemetryReading* _this = reinterpret_cast< TelemetryReading* >(object);
  (void)_this;
}
void TelemetryReading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryReading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryReading& TelemetryReading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryReading_common_2eproto.base);
  return *internal_default_instance();
}


void TelemetryReading::clear_gpsLatProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsLatProperty_case()) {
    case kGpsLat: {
      // No need to clear
      break;
    }
    case GPSLATPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GPSLATPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsLongProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsLongProperty_case()) {
    case kGpsLong: {
      // No need to clear
      break;
    }
    case GPSLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = GPSLONGPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsAltProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsAltProperty_case()) {
    case kGpsAlt: {
      // No need to clear
      break;
    }
    case GPSALTPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = GPSALTPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsCourseAngleProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsCourseAngleProperty_case()) {
    case kGpsCourseAngle: {
      // No need to clear
      break;
    }
    case GPSCOURSEANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = GPSCOURSEANGLEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_accelXProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (accelXProperty_case()) {
    case kAccelX: {
      // No need to clear
      break;
    }
    case ACCELXPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = ACCELXPROPERTY_NOT_SET;
}

void TelemetryReading::clear_accelYProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (accelYProperty_case()) {
    case kAccelY: {
      // No need to clear
      break;
    }
    case ACCELYPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = ACCELYPROPERTY_NOT_SET;
}

void TelemetryReading::clear_accelZProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (accelZProperty_case()) {
    case kAccelZ: {
      // No need to clear
      break;
    }
    case ACCELZPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = ACCELZPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsSignalQualityProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsSignalQualityProperty_case()) {
    case kGpsSignalQuality: {
      // No need to clear
      break;
    }
    case GPSSIGNALQUALITYPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = GPSSIGNALQUALITYPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsAccuracyLatProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsAccuracyLatProperty_case()) {
    case kGpsAccuracyLat: {
      // No need to clear
      break;
    }
    case GPSACCURACYLATPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = GPSACCURACYLATPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsAccuracyLongProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsAccuracyLongProperty_case()) {
    case kGpsAccuracyLong: {
      // No need to clear
      break;
    }
    case GPSACCURACYLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = GPSACCURACYLONGPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gpsAccuracyAltProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gpsAccuracyAltProperty_case()) {
    case kGpsAccuracyAlt: {
      // No need to clear
      break;
    }
    case GPSACCURACYALTPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = GPSACCURACYALTPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gsmSignalStrengthProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gsmSignalStrengthProperty_case()) {
    case kGsmSignalStrength: {
      // No need to clear
      break;
    }
    case GSMSIGNALSTRENGTHPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[11] = GSMSIGNALSTRENGTHPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gsmMccProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gsmMccProperty_case()) {
    case kGsmMcc: {
      // No need to clear
      break;
    }
    case GSMMCCPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[12] = GSMMCCPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gsmMncProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gsmMncProperty_case()) {
    case kGsmMnc: {
      // No need to clear
      break;
    }
    case GSMMNCPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[13] = GSMMNCPROPERTY_NOT_SET;
}

void TelemetryReading::clear_ignitionOnProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (ignitionOnProperty_case()) {
    case kIgnitionOn: {
      // No need to clear
      break;
    }
    case IGNITIONONPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[14] = IGNITIONONPROPERTY_NOT_SET;
}

void TelemetryReading::clear_crankOnProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (crankOnProperty_case()) {
    case kCrankOn: {
      // No need to clear
      break;
    }
    case CRANKONPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[15] = CRANKONPROPERTY_NOT_SET;
}

void TelemetryReading::clear_vehicleSpeedProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (vehicleSpeedProperty_case()) {
    case kVehicleSpeed: {
      // No need to clear
      break;
    }
    case VEHICLESPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[16] = VEHICLESPEEDPROPERTY_NOT_SET;
}

void TelemetryReading::clear_engineRpmProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (engineRpmProperty_case()) {
    case kEngineRpm: {
      // No need to clear
      break;
    }
    case ENGINERPMPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[17] = ENGINERPMPROPERTY_NOT_SET;
}

void TelemetryReading::clear_steeringAngleProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (steeringAngleProperty_case()) {
    case kSteeringAngle: {
      // No need to clear
      break;
    }
    case STEERINGANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[18] = STEERINGANGLEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_distanceTravelledProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (distanceTravelledProperty_case()) {
    case kDistanceTravelled: {
      // No need to clear
      break;
    }
    case DISTANCETRAVELLEDPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[19] = DISTANCETRAVELLEDPROPERTY_NOT_SET;
}

void TelemetryReading::clear_outsideAmbientTemperatureProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (outsideAmbientTemperatureProperty_case()) {
    case kOutsideAmbientTemperature: {
      // No need to clear
      break;
    }
    case OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[20] = OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET;
}

void TelemetryReading::clear_vehicleInteriorTemperatureProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (vehicleInteriorTemperatureProperty_case()) {
    case kVehicleInteriorTemperature: {
      // No need to clear
      break;
    }
    case VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[21] = VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET;
}

void TelemetryReading::clear_steeringDirectionProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (steeringDirectionProperty_case()) {
    case kSteeringDirection: {
      // No need to clear
      break;
    }
    case STEERINGDIRECTIONPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[22] = STEERINGDIRECTIONPROPERTY_NOT_SET;
}

void TelemetryReading::clear_acCompressorPressureProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (acCompressorPressureProperty_case()) {
    case kAcCompressorPressure: {
      // No need to clear
      break;
    }
    case ACCOMPRESSORPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[23] = ACCOMPRESSORPRESSUREPROPERTY_NOT_SET;
}

void TelemetryReading::clear_acceleratorPedalPositionProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (acceleratorPedalPositionProperty_case()) {
    case kAcceleratorPedalPosition: {
      // No need to clear
      break;
    }
    case ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[24] = ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET;
}

void TelemetryReading::clear_atmosphericPressureProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (atmosphericPressureProperty_case()) {
    case kAtmosphericPressure: {
      // No need to clear
      break;
    }
    case ATMOSPHERICPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[25] = ATMOSPHERICPRESSUREPROPERTY_NOT_SET;
}

void TelemetryReading::clear_transmissionOilTemperatureProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (transmissionOilTemperatureProperty_case()) {
    case kTransmissionOilTemperature: {
      // No need to clear
      break;
    }
    case TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[26] = TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET;
}

void TelemetryReading::clear_evGearInfoProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (evGearInfoProperty_case()) {
    case kEvGearInfo: {
      // No need to clear
      break;
    }
    case EVGEARINFOPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[27] = EVGEARINFOPROPERTY_NOT_SET;
}

void TelemetryReading::clear_vcuPowerModeProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (vcuPowerModeProperty_case()) {
    case kVcuPowerMode: {
      // No need to clear
      break;
    }
    case VCUPOWERMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[28] = VCUPOWERMODEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gear_InfoProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gear_InfoProperty_case()) {
    case kGearInfo: {
      // No need to clear
      break;
    }
    case GEAR_INFOPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[29] = GEAR_INFOPROPERTY_NOT_SET;
}

void TelemetryReading::clear_fuelRemainingProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (fuelRemainingProperty_case()) {
    case kFuelRemaining: {
      // No need to clear
      break;
    }
    case FUELREMAININGPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[30] = FUELREMAININGPROPERTY_NOT_SET;
}

void TelemetryReading::clear_cumulativeFuelConsumptionRateProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (cumulativeFuelConsumptionRateProperty_case()) {
    case kCumulativeFuelConsumptionRate: {
      // No need to clear
      break;
    }
    case CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[31] = CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_engineIdleSpeedTargetProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (engineIdleSpeedTargetProperty_case()) {
    case kEngineIdleSpeedTarget: {
      // No need to clear
      break;
    }
    case ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[32] = ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET;
}

void TelemetryReading::clear_engineCoolantTemperatureProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (engineCoolantTemperatureProperty_case()) {
    case kEngineCoolantTemperature: {
      // No need to clear
      break;
    }
    case ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[33] = ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gyroscopeXProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gyroscopeXProperty_case()) {
    case kGyroscopeX: {
      // No need to clear
      break;
    }
    case GYROSCOPEXPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[34] = GYROSCOPEXPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gyroscopeYProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gyroscopeYProperty_case()) {
    case kGyroscopeY: {
      // No need to clear
      break;
    }
    case GYROSCOPEYPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[35] = GYROSCOPEYPROPERTY_NOT_SET;
}

void TelemetryReading::clear_gyroscopeZProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (gyroscopeZProperty_case()) {
    case kGyroscopeZ: {
      // No need to clear
      break;
    }
    case GYROSCOPEZPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[36] = GYROSCOPEZPROPERTY_NOT_SET;
}

void TelemetryReading::clear_blowerSpeedProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (blowerSpeedProperty_case()) {
    case kBlowerSpeed: {
      // No need to clear
      break;
    }
    case BLOWERSPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[37] = BLOWERSPEEDPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvAmpHrProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvAmpHrProperty_case()) {
    case kHvAmpHr: {
      // No need to clear
      break;
    }
    case HVAMPHRPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[38] = HVAMPHRPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvAmpHrRegenProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvAmpHrRegenProperty_case()) {
    case kHvAmpHrRegen: {
      // No need to clear
      break;
    }
    case HVAMPHRREGENPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[39] = HVAMPHRREGENPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvBattMaxCellVoltageProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvBattMaxCellVoltageProperty_case()) {
    case kHvBattMaxCellVoltage: {
      // No need to clear
      break;
    }
    case HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[40] = HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvBattMinCellVoltageProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvBattMinCellVoltageProperty_case()) {
    case kHvBattMinCellVoltage: {
      // No need to clear
      break;
    }
    case HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[41] = HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvBattMaxCellTempProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvBattMaxCellTempProperty_case()) {
    case kHvBattMaxCellTemp: {
      // No need to clear
      break;
    }
    case HVBATTMAXCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[42] = HVBATTMAXCELLTEMPPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvBattMinCellTempProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvBattMinCellTempProperty_case()) {
    case kHvBattMinCellTemp: {
      // No need to clear
      break;
    }
    case HVBATTMINCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[43] = HVBATTMINCELLTEMPPROPERTY_NOT_SET;
}

void TelemetryReading::clear_hvBattPackVoltageProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (hvBattPackVoltageProperty_case()) {
    case kHvBattPackVoltage: {
      // No need to clear
      break;
    }
    case HVBATTPACKVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[44] = HVBATTPACKVOLTAGEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_brkPressStateProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (brkPressStateProperty_case()) {
    case kBrkPressState: {
      // No need to clear
      break;
    }
    case BRKPRESSSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[45] = BRKPRESSSTATEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_vehicleSpeedTwoProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (vehicleSpeedTwoProperty_case()) {
    case kVehicleSpeedTwo: {
      // No need to clear
      break;
    }
    case VEHICLESPEEDTWOPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[46] = VEHICLESPEEDTWOPROPERTY_NOT_SET;
}

void TelemetryReading::clear_vehicleDriveModeProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (vehicleDriveModeProperty_case()) {
    case kVehicleDriveMode: {
      // No need to clear
      break;
    }
    case VEHICLEDRIVEMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[47] = VEHICLEDRIVEMODEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_clutchStateProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (clutchStateProperty_case()) {
    case kClutchState: {
      // No need to clear
      break;
    }
    case CLUTCHSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[48] = CLUTCHSTATEPROPERTY_NOT_SET;
}

void TelemetryReading::clear_acStateProperty() {
// @@protoc_insertion_point(one_of_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  switch (acStateProperty_case()) {
    case kAcState: {
      // No need to clear
      break;
    }
    case ACSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[49] = ACSTATEPROPERTY_NOT_SET;
}


void TelemetryReading::Clear() {
// @@protoc_insertion_point(message_clear_start:com.bosch.itrams_gen2e.TelemetryReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&gpsfixstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehiclebatterylevel_) -
      reinterpret_cast<char*>(&gpsfixstatus_)) + sizeof(vehiclebatterylevel_));
  clear_gpsLatProperty();
  clear_gpsLongProperty();
  clear_gpsAltProperty();
  clear_gpsCourseAngleProperty();
  clear_accelXProperty();
  clear_accelYProperty();
  clear_accelZProperty();
  clear_gpsSignalQualityProperty();
  clear_gpsAccuracyLatProperty();
  clear_gpsAccuracyLongProperty();
  clear_gpsAccuracyAltProperty();
  clear_gsmSignalStrengthProperty();
  clear_gsmMccProperty();
  clear_gsmMncProperty();
  clear_ignitionOnProperty();
  clear_crankOnProperty();
  clear_vehicleSpeedProperty();
  clear_engineRpmProperty();
  clear_steeringAngleProperty();
  clear_distanceTravelledProperty();
  clear_outsideAmbientTemperatureProperty();
  clear_vehicleInteriorTemperatureProperty();
  clear_steeringDirectionProperty();
  clear_acCompressorPressureProperty();
  clear_acceleratorPedalPositionProperty();
  clear_atmosphericPressureProperty();
  clear_transmissionOilTemperatureProperty();
  clear_evGearInfoProperty();
  clear_vcuPowerModeProperty();
  clear_gear_InfoProperty();
  clear_fuelRemainingProperty();
  clear_cumulativeFuelConsumptionRateProperty();
  clear_engineIdleSpeedTargetProperty();
  clear_engineCoolantTemperatureProperty();
  clear_gyroscopeXProperty();
  clear_gyroscopeYProperty();
  clear_gyroscopeZProperty();
  clear_blowerSpeedProperty();
  clear_hvAmpHrProperty();
  clear_hvAmpHrRegenProperty();
  clear_hvBattMaxCellVoltageProperty();
  clear_hvBattMinCellVoltageProperty();
  clear_hvBattMaxCellTempProperty();
  clear_hvBattMinCellTempProperty();
  clear_hvBattPackVoltageProperty();
  clear_brkPressStateProperty();
  clear_vehicleSpeedTwoProperty();
  clear_vehicleDriveModeProperty();
  clear_clutchStateProperty();
  clear_acStateProperty();
  _internal_metadata_.Clear<std::string>();
}

const char* TelemetryReading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1[json_name = "ts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpsLat = 2[json_name = "glt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_gpslat(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpsLong = 3[json_name = "gln"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_gpslong(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpsAlt = 4[json_name = "gal"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_gpsalt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gpsCourseAngle = 5[json_name = "gca"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_gpscourseangle(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accelX = 6[json_name = "acx"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_accelx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accelY = 7[json_name = "acy"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_accely(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accelZ = 8[json_name = "acz"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_accelz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gpsSignalQuality = 9[json_name = "gsq"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_gpssignalquality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gpsAccuracyLat = 10[json_name = "gacLt"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _internal_set_gpsaccuracylat(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gpsAccuracyLong = 11[json_name = "gacLn"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _internal_set_gpsaccuracylong(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gpsAccuracyAlt = 12[json_name = "gacAl"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_gpsaccuracyalt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gsmSignalStrength = 13[json_name = "gsmSig"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _internal_set_gsmsignalstrength(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gsmMcc = 14[json_name = "gsmMCC"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_gsmmcc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gsmMnc = 15[json_name = "gsmMnc"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _internal_set_gsmmnc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.IgnitionOn ignitionOn = 16[json_name = "ign"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ignitionon(static_cast<::com::bosch::itrams_gen2e::IgnitionOn>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.CrankOn crankOn = 17[json_name = "cnk"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_crankon(static_cast<::com::bosch::itrams_gen2e::CrankOn>(val));
        } else goto handle_unusual;
        continue;
      // uint32 vehicleSpeed = 18[json_name = "vsp"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _internal_set_vehiclespeed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 engineRpm = 19[json_name = "rpm"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _internal_set_enginerpm(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 steeringAngle = 20[json_name = "sta"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _internal_set_steeringangle(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distanceTravelled = 21[json_name = "tdt"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _internal_set_distancetravelled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 outsideAmbientTemperature = 22[json_name = "oat"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _internal_set_outsideambienttemperature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vehicleInteriorTemperature = 23[json_name = "vit"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _internal_set_vehicleinteriortemperature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.SteeringDirection steeringDirection = 24[json_name = "sdn"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_steeringdirection(static_cast<::com::bosch::itrams_gen2e::SteeringDirection>(val));
        } else goto handle_unusual;
        continue;
      // uint32 acCompressorPressure = 25[json_name = "acp"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _internal_set_accompressorpressure(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 acceleratorPedalPosition = 26[json_name = "app"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _internal_set_acceleratorpedalposition(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 atmosphericPressure = 27[json_name = "atp"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_atmosphericpressure(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 transmissionOilTemperature = 28[json_name = "tot"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _internal_set_transmissionoiltemperature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.EVGearState evGearInfo = 29[json_name = "egi"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evgearinfo(static_cast<::com::bosch::itrams_gen2e::EVGearState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.VCUPowerMode vcuPowerMode = 30[json_name = "vcupm"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vcupowermode(static_cast<::com::bosch::itrams_gen2e::VCUPowerMode>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.GearState gear_Info = 31[json_name = "grinfo"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear_info(static_cast<::com::bosch::itrams_gen2e::GearState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 fuelRemaining = 32[json_name = "fuel"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _internal_set_fuelremaining(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cumulativeFuelConsumptionRate = 33[json_name = "cfr"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_cumulativefuelconsumptionrate(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 engineIdleSpeedTarget = 34[json_name = "eis"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_engineidlespeedtarget(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 engineCoolantTemperature = 35[json_name = "ect"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_enginecoolanttemperature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gyroscopeX = 36[json_name = "gyroX"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_gyroscopex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gyroscopeY = 37[json_name = "gyroY"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_gyroscopey(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gyroscopeZ = 38[json_name = "gyroZ"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_gyroscopez(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.BlowerSpeed blowerSpeed = 39[json_name = "blspeed"];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_blowerspeed(static_cast<::com::bosch::itrams_gen2e::BlowerSpeed>(val));
        } else goto handle_unusual;
        continue;
      // uint32 hvAmpHr = 40[json_name = "hvamp"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_hvamphr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvAmpHrRegen = 41[json_name = "hvampreg"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_hvamphrregen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvBattMaxCellVoltage = 42[json_name = "hbmaxv"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _internal_set_hvbattmaxcellvoltage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvBattMinCellVoltage = 43[json_name = "hbminv"];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _internal_set_hvbattmincellvoltage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvBattMaxCellTemp = 44[json_name = "hbmaxtmp"];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_hvbattmaxcelltemp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvBattMinCellTemp = 45[json_name = "hbmintmp"];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _internal_set_hvbattmincelltemp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvBattPackVoltage = 46[json_name = "hbpvol"];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_hvbattpackvoltage(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.BrakePressState brkPressState = 47[json_name = "brkprs"];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brkpressstate(static_cast<::com::bosch::itrams_gen2e::BrakePressState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 vehicleSpeedTwo = 48[json_name = "vspd2"];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _internal_set_vehiclespeedtwo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.VehicleDriveMode vehicleDriveMode = 49[json_name = "vdrvmd"];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehicledrivemode(static_cast<::com::bosch::itrams_gen2e::VehicleDriveMode>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.ClutchState clutchState = 50[json_name = "clthst"];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_clutchstate(static_cast<::com::bosch::itrams_gen2e::ClutchState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.AcState acState = 51[json_name = "acst"];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acstate(static_cast<::com::bosch::itrams_gen2e::AcState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.GPsFixStatus gpsFixStatus = 52[json_name = "gpsfixSt"];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gpsfixstatus(static_cast<::com::bosch::itrams_gen2e::GPsFixStatus>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.PowerModeState powerModeState = 53[json_name = "pwrmdst"];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_powermodestate(static_cast<::com::bosch::itrams_gen2e::PowerModeState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.HornState hornState = 54[json_name = "hrnst"];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_hornstate(static_cast<::com::bosch::itrams_gen2e::HornState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.HighBeamLampOnFlag highBeamLampOnFlag = 55[json_name = "hblf"];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_highbeamlamponflag(static_cast<::com::bosch::itrams_gen2e::HighBeamLampOnFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.LowBeamLampOnFlag lowBeamLampOnFlag = 56[json_name = "lblf"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_lowbeamlamponflag(static_cast<::com::bosch::itrams_gen2e::LowBeamLampOnFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.LeftFrontDoorOpenFlag leftFrontDoorOpenFlag = 57[json_name = "lfdof"];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_leftfrontdooropenflag(static_cast<::com::bosch::itrams_gen2e::LeftFrontDoorOpenFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.RightFrontDoorOpenFlag rightFrontDoorOpenFlag = 58[json_name = "rfdof"];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rightfrontdooropenflag(static_cast<::com::bosch::itrams_gen2e::RightFrontDoorOpenFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.LeftRearDoorOpenFlag leftRearDoorOpenFlag = 59[json_name = "lrdof"];
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_leftreardooropenflag(static_cast<::com::bosch::itrams_gen2e::LeftRearDoorOpenFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.RightRearDoorOpenFlag rightRearDoorOpenFlag = 60[json_name = "rrdof"];
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rightreardooropenflag(static_cast<::com::bosch::itrams_gen2e::RightRearDoorOpenFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.TailGateOpenFlag tailGateOpenFlag = 61[json_name = "tgof"];
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tailgateopenflag(static_cast<::com::bosch::itrams_gen2e::TailGateOpenFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.BonnetOpenFlag bonnetOpenFlag = 62[json_name = "bntof"];
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bonnetopenflag(static_cast<::com::bosch::itrams_gen2e::BonnetOpenFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.VehicleARmState vehicleARmState = 63[json_name = "varm"];
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vehiclearmstate(static_cast<::com::bosch::itrams_gen2e::VehicleARmState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.CabinCoolingSolValveState cabinCoolingSolValveState = 64[json_name = "csol"];
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cabincoolingsolvalvestate(static_cast<::com::bosch::itrams_gen2e::CabinCoolingSolValveState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.AcReqDrvr acReqDrvr = 65[json_name = "acrq"];
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acreqdrvr(static_cast<::com::bosch::itrams_gen2e::AcReqDrvr>(val));
        } else goto handle_unusual;
        continue;
      // uint32 coolingPwrVCU = 66[json_name = "copwvc"];
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coolingpwrvcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 coolingPwrFATC = 67[json_name = "copwfc"];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coolingpwrfatc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 heatingPwrVCU = 68[json_name = "htpwvc"];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          heatingpwrvcu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 heatingPwrFATC = 69[json_name = "htpwfc"];
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          heatingpwrfatc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 acCmprSpd = 70[json_name = "htpwfc"];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          accmprspd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 solarLoad = 71[json_name = "slrld"];
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          solarload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.AcSetTemperature acSetTemperature = 72[json_name = "acstmp"];
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acsettemperature(static_cast<::com::bosch::itrams_gen2e::AcSetTemperature>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.BatteryCoolingSolValveState batteryCoolingSolValveState = 73[json_name = "battcl"];
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_batterycoolingsolvalvestate(static_cast<::com::bosch::itrams_gen2e::BatteryCoolingSolValveState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 brakePedalPosPercen = 74[json_name = "brkpdl"];
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          brakepedalpospercen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.ParkBrakePressStateFlag parkBrakeState = 75[json_name = "prkbrk"];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_parkbrakestate(static_cast<::com::bosch::itrams_gen2e::ParkBrakePressStateFlag>(val));
        } else goto handle_unusual;
        continue;
      // int32 electricMotorTorque = 76[json_name = "prkbrk"];
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          electricmotortorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.DriverSeatBeltFlag driverSeatBeltFlag = 77[json_name = "drvst"];
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_driverseatbeltflag(static_cast<::com::bosch::itrams_gen2e::DriverSeatBeltFlag>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.CoDriverSeatBeltFlag coDriverSeatBeltFlag = 78[json_name = "cdrvst"];
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_codriverseatbeltflag(static_cast<::com::bosch::itrams_gen2e::CoDriverSeatBeltFlag>(val));
        } else goto handle_unusual;
        continue;
      // uint32 enerConsumptionDrive = 79[json_name = "enerconsdr"];
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          enerconsumptiondrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enerConsumptionAux = 80[json_name = "enerconsax"];
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          enerconsumptionaux_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 enerConsumptionCooling = 81[json_name = "enerconscol"];
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          enerconsumptioncooling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 regenPowerConsumption = 82[json_name = "rgneff"];
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          regenpowerconsumption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.CruiseControlStatus cruiseControlStatus = 83[json_name = "crsctr"];
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cruisecontrolstatus(static_cast<::com::bosch::itrams_gen2e::CruiseControlStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint32 cruiseControlSpeed = 84[json_name = "crsctrsp"];
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cruisecontrolspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fuelLevelPercentage = 85[json_name = "flperc"];
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          fuellevelpercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 engineTorque = 86[json_name = "engtq"];
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          enginetorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.DRlState drlState = 87[json_name = "drlstokok"];
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_drlstate(static_cast<::com::bosch::itrams_gen2e::DRlState>(val));
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.WiperState wiperState = 88[json_name = "wprst"];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wiperstate(static_cast<::com::bosch::itrams_gen2e::WiperState>(val));
        } else goto handle_unusual;
        continue;
      // uint32 instantFE = 89[json_name = "instfe"];
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          instantfe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 throttleBodyPosition = 90[json_name = "thrpos"];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          throttlebodyposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 intakeManifoldTemp = 91[json_name = "intkmf"];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          intakemanifoldtemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.BiFuelMode biFuelMode = 92[json_name = "biflm"];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bifuelmode(static_cast<::com::bosch::itrams_gen2e::BiFuelMode>(val));
        } else goto handle_unusual;
        continue;
      // uint32 hvBattSocPercentage = 93[json_name = "hvbsoc"];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          hvbattsocpercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distanceToEmpty = 94[json_name = "dstEmpty"];
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          distancetoempty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 distanceToEmptyNonEV = 95[json_name = "dstEmptynv"];
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          distancetoemptynonev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.bosch.itrams_gen2e.AcMode acMode = 96[json_name = "acmd"];
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acmode(static_cast<::com::bosch::itrams_gen2e::AcMode>(val));
        } else goto handle_unusual;
        continue;
      // int32 electricMotorCurrent = 97[json_name = "elcmc"];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          electricmotorcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 electricMotorVoltage = 98[json_name = "elcmv"];
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          electricmotorvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 electricMotorSpeed = 99[json_name = "elcms"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          electricmotorspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 electricMotorTemperature = 100[json_name = "elcmv"];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          electricmotortemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hvBattCurrent = 101[json_name = "elcmc"];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hvbattcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hvBattKWh = 102[json_name = "elcmv"];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hvbattkwh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dcDcOutputVolatge = 103[json_name = "dcopvol"];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dcdcoutputvolatge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dcDcOutputCurrent = 104[json_name = "dcopcur"];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dcdcoutputcurrent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vehicleBatteryLevel = 105[json_name = "vehbattlev"];
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          vehiclebatterylevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryReading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.bosch.itrams_gen2e.TelemetryReading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1[json_name = "ts"];
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // int32 gpsLat = 2[json_name = "glt"];
  if (_internal_has_gpslat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gpslat(), target);
  }

  // int32 gpsLong = 3[json_name = "gln"];
  if (_internal_has_gpslong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gpslong(), target);
  }

  // int32 gpsAlt = 4[json_name = "gal"];
  if (_internal_has_gpsalt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gpsalt(), target);
  }

  // uint32 gpsCourseAngle = 5[json_name = "gca"];
  if (_internal_has_gpscourseangle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gpscourseangle(), target);
  }

  // int32 accelX = 6[json_name = "acx"];
  if (_internal_has_accelx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_accelx(), target);
  }

  // int32 accelY = 7[json_name = "acy"];
  if (_internal_has_accely()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_accely(), target);
  }

  // int32 accelZ = 8[json_name = "acz"];
  if (_internal_has_accelz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_accelz(), target);
  }

  // uint32 gpsSignalQuality = 9[json_name = "gsq"];
  if (_internal_has_gpssignalquality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gpssignalquality(), target);
  }

  // uint32 gpsAccuracyLat = 10[json_name = "gacLt"];
  if (_internal_has_gpsaccuracylat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_gpsaccuracylat(), target);
  }

  // uint32 gpsAccuracyLong = 11[json_name = "gacLn"];
  if (_internal_has_gpsaccuracylong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_gpsaccuracylong(), target);
  }

  // uint32 gpsAccuracyAlt = 12[json_name = "gacAl"];
  if (_internal_has_gpsaccuracyalt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_gpsaccuracyalt(), target);
  }

  // uint32 gsmSignalStrength = 13[json_name = "gsmSig"];
  if (_internal_has_gsmsignalstrength()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_gsmsignalstrength(), target);
  }

  // uint32 gsmMcc = 14[json_name = "gsmMCC"];
  if (_internal_has_gsmmcc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_gsmmcc(), target);
  }

  // uint32 gsmMnc = 15[json_name = "gsmMnc"];
  if (_internal_has_gsmmnc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_gsmmnc(), target);
  }

  // .com.bosch.itrams_gen2e.IgnitionOn ignitionOn = 16[json_name = "ign"];
  if (_internal_has_ignitionon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_ignitionon(), target);
  }

  // .com.bosch.itrams_gen2e.CrankOn crankOn = 17[json_name = "cnk"];
  if (_internal_has_crankon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_crankon(), target);
  }

  // uint32 vehicleSpeed = 18[json_name = "vsp"];
  if (_internal_has_vehiclespeed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_vehiclespeed(), target);
  }

  // uint32 engineRpm = 19[json_name = "rpm"];
  if (_internal_has_enginerpm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_enginerpm(), target);
  }

  // uint32 steeringAngle = 20[json_name = "sta"];
  if (_internal_has_steeringangle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_steeringangle(), target);
  }

  // uint32 distanceTravelled = 21[json_name = "tdt"];
  if (_internal_has_distancetravelled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_distancetravelled(), target);
  }

  // int32 outsideAmbientTemperature = 22[json_name = "oat"];
  if (_internal_has_outsideambienttemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_outsideambienttemperature(), target);
  }

  // int32 vehicleInteriorTemperature = 23[json_name = "vit"];
  if (_internal_has_vehicleinteriortemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_vehicleinteriortemperature(), target);
  }

  // .com.bosch.itrams_gen2e.SteeringDirection steeringDirection = 24[json_name = "sdn"];
  if (_internal_has_steeringdirection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_steeringdirection(), target);
  }

  // uint32 acCompressorPressure = 25[json_name = "acp"];
  if (_internal_has_accompressorpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_accompressorpressure(), target);
  }

  // uint32 acceleratorPedalPosition = 26[json_name = "app"];
  if (_internal_has_acceleratorpedalposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_acceleratorpedalposition(), target);
  }

  // uint32 atmosphericPressure = 27[json_name = "atp"];
  if (_internal_has_atmosphericpressure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_atmosphericpressure(), target);
  }

  // int32 transmissionOilTemperature = 28[json_name = "tot"];
  if (_internal_has_transmissionoiltemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_transmissionoiltemperature(), target);
  }

  // .com.bosch.itrams_gen2e.EVGearState evGearInfo = 29[json_name = "egi"];
  if (_internal_has_evgearinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_evgearinfo(), target);
  }

  // .com.bosch.itrams_gen2e.VCUPowerMode vcuPowerMode = 30[json_name = "vcupm"];
  if (_internal_has_vcupowermode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_vcupowermode(), target);
  }

  // .com.bosch.itrams_gen2e.GearState gear_Info = 31[json_name = "grinfo"];
  if (_internal_has_gear_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_gear_info(), target);
  }

  // uint32 fuelRemaining = 32[json_name = "fuel"];
  if (_internal_has_fuelremaining()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_fuelremaining(), target);
  }

  // uint32 cumulativeFuelConsumptionRate = 33[json_name = "cfr"];
  if (_internal_has_cumulativefuelconsumptionrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_cumulativefuelconsumptionrate(), target);
  }

  // uint32 engineIdleSpeedTarget = 34[json_name = "eis"];
  if (_internal_has_engineidlespeedtarget()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_engineidlespeedtarget(), target);
  }

  // int32 engineCoolantTemperature = 35[json_name = "ect"];
  if (_internal_has_enginecoolanttemperature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_enginecoolanttemperature(), target);
  }

  // uint32 gyroscopeX = 36[json_name = "gyroX"];
  if (_internal_has_gyroscopex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_gyroscopex(), target);
  }

  // uint32 gyroscopeY = 37[json_name = "gyroY"];
  if (_internal_has_gyroscopey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_gyroscopey(), target);
  }

  // uint32 gyroscopeZ = 38[json_name = "gyroZ"];
  if (_internal_has_gyroscopez()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_gyroscopez(), target);
  }

  // .com.bosch.itrams_gen2e.BlowerSpeed blowerSpeed = 39[json_name = "blspeed"];
  if (_internal_has_blowerspeed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      39, this->_internal_blowerspeed(), target);
  }

  // uint32 hvAmpHr = 40[json_name = "hvamp"];
  if (_internal_has_hvamphr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_hvamphr(), target);
  }

  // uint32 hvAmpHrRegen = 41[json_name = "hvampreg"];
  if (_internal_has_hvamphrregen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_hvamphrregen(), target);
  }

  // uint32 hvBattMaxCellVoltage = 42[json_name = "hbmaxv"];
  if (_internal_has_hvbattmaxcellvoltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_hvbattmaxcellvoltage(), target);
  }

  // uint32 hvBattMinCellVoltage = 43[json_name = "hbminv"];
  if (_internal_has_hvbattmincellvoltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_hvbattmincellvoltage(), target);
  }

  // uint32 hvBattMaxCellTemp = 44[json_name = "hbmaxtmp"];
  if (_internal_has_hvbattmaxcelltemp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_hvbattmaxcelltemp(), target);
  }

  // uint32 hvBattMinCellTemp = 45[json_name = "hbmintmp"];
  if (_internal_has_hvbattmincelltemp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_hvbattmincelltemp(), target);
  }

  // uint32 hvBattPackVoltage = 46[json_name = "hbpvol"];
  if (_internal_has_hvbattpackvoltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_hvbattpackvoltage(), target);
  }

  // .com.bosch.itrams_gen2e.BrakePressState brkPressState = 47[json_name = "brkprs"];
  if (_internal_has_brkpressstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      47, this->_internal_brkpressstate(), target);
  }

  // uint32 vehicleSpeedTwo = 48[json_name = "vspd2"];
  if (_internal_has_vehiclespeedtwo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_vehiclespeedtwo(), target);
  }

  // .com.bosch.itrams_gen2e.VehicleDriveMode vehicleDriveMode = 49[json_name = "vdrvmd"];
  if (_internal_has_vehicledrivemode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      49, this->_internal_vehicledrivemode(), target);
  }

  // .com.bosch.itrams_gen2e.ClutchState clutchState = 50[json_name = "clthst"];
  if (_internal_has_clutchstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      50, this->_internal_clutchstate(), target);
  }

  // .com.bosch.itrams_gen2e.AcState acState = 51[json_name = "acst"];
  if (_internal_has_acstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      51, this->_internal_acstate(), target);
  }

  // .com.bosch.itrams_gen2e.GPsFixStatus gpsFixStatus = 52[json_name = "gpsfixSt"];
  if (this->gpsfixstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      52, this->_internal_gpsfixstatus(), target);
  }

  // .com.bosch.itrams_gen2e.PowerModeState powerModeState = 53[json_name = "pwrmdst"];
  if (this->powermodestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      53, this->_internal_powermodestate(), target);
  }

  // .com.bosch.itrams_gen2e.HornState hornState = 54[json_name = "hrnst"];
  if (this->hornstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      54, this->_internal_hornstate(), target);
  }

  // .com.bosch.itrams_gen2e.HighBeamLampOnFlag highBeamLampOnFlag = 55[json_name = "hblf"];
  if (this->highbeamlamponflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      55, this->_internal_highbeamlamponflag(), target);
  }

  // .com.bosch.itrams_gen2e.LowBeamLampOnFlag lowBeamLampOnFlag = 56[json_name = "lblf"];
  if (this->lowbeamlamponflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      56, this->_internal_lowbeamlamponflag(), target);
  }

  // .com.bosch.itrams_gen2e.LeftFrontDoorOpenFlag leftFrontDoorOpenFlag = 57[json_name = "lfdof"];
  if (this->leftfrontdooropenflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      57, this->_internal_leftfrontdooropenflag(), target);
  }

  // .com.bosch.itrams_gen2e.RightFrontDoorOpenFlag rightFrontDoorOpenFlag = 58[json_name = "rfdof"];
  if (this->rightfrontdooropenflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      58, this->_internal_rightfrontdooropenflag(), target);
  }

  // .com.bosch.itrams_gen2e.LeftRearDoorOpenFlag leftRearDoorOpenFlag = 59[json_name = "lrdof"];
  if (this->leftreardooropenflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      59, this->_internal_leftreardooropenflag(), target);
  }

  // .com.bosch.itrams_gen2e.RightRearDoorOpenFlag rightRearDoorOpenFlag = 60[json_name = "rrdof"];
  if (this->rightreardooropenflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      60, this->_internal_rightreardooropenflag(), target);
  }

  // .com.bosch.itrams_gen2e.TailGateOpenFlag tailGateOpenFlag = 61[json_name = "tgof"];
  if (this->tailgateopenflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      61, this->_internal_tailgateopenflag(), target);
  }

  // .com.bosch.itrams_gen2e.BonnetOpenFlag bonnetOpenFlag = 62[json_name = "bntof"];
  if (this->bonnetopenflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      62, this->_internal_bonnetopenflag(), target);
  }

  // .com.bosch.itrams_gen2e.VehicleARmState vehicleARmState = 63[json_name = "varm"];
  if (this->vehiclearmstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      63, this->_internal_vehiclearmstate(), target);
  }

  // .com.bosch.itrams_gen2e.CabinCoolingSolValveState cabinCoolingSolValveState = 64[json_name = "csol"];
  if (this->cabincoolingsolvalvestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      64, this->_internal_cabincoolingsolvalvestate(), target);
  }

  // .com.bosch.itrams_gen2e.AcReqDrvr acReqDrvr = 65[json_name = "acrq"];
  if (this->acreqdrvr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      65, this->_internal_acreqdrvr(), target);
  }

  // uint32 coolingPwrVCU = 66[json_name = "copwvc"];
  if (this->coolingpwrvcu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_coolingpwrvcu(), target);
  }

  // uint32 coolingPwrFATC = 67[json_name = "copwfc"];
  if (this->coolingpwrfatc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_coolingpwrfatc(), target);
  }

  // uint32 heatingPwrVCU = 68[json_name = "htpwvc"];
  if (this->heatingpwrvcu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(68, this->_internal_heatingpwrvcu(), target);
  }

  // uint32 heatingPwrFATC = 69[json_name = "htpwfc"];
  if (this->heatingpwrfatc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(69, this->_internal_heatingpwrfatc(), target);
  }

  // uint32 acCmprSpd = 70[json_name = "htpwfc"];
  if (this->accmprspd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_accmprspd(), target);
  }

  // uint32 solarLoad = 71[json_name = "slrld"];
  if (this->solarload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_solarload(), target);
  }

  // .com.bosch.itrams_gen2e.AcSetTemperature acSetTemperature = 72[json_name = "acstmp"];
  if (this->acsettemperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      72, this->_internal_acsettemperature(), target);
  }

  // .com.bosch.itrams_gen2e.BatteryCoolingSolValveState batteryCoolingSolValveState = 73[json_name = "battcl"];
  if (this->batterycoolingsolvalvestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      73, this->_internal_batterycoolingsolvalvestate(), target);
  }

  // uint32 brakePedalPosPercen = 74[json_name = "brkpdl"];
  if (this->brakepedalpospercen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_brakepedalpospercen(), target);
  }

  // .com.bosch.itrams_gen2e.ParkBrakePressStateFlag parkBrakeState = 75[json_name = "prkbrk"];
  if (this->parkbrakestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      75, this->_internal_parkbrakestate(), target);
  }

  // int32 electricMotorTorque = 76[json_name = "prkbrk"];
  if (this->electricmotortorque() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(76, this->_internal_electricmotortorque(), target);
  }

  // .com.bosch.itrams_gen2e.DriverSeatBeltFlag driverSeatBeltFlag = 77[json_name = "drvst"];
  if (this->driverseatbeltflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      77, this->_internal_driverseatbeltflag(), target);
  }

  // .com.bosch.itrams_gen2e.CoDriverSeatBeltFlag coDriverSeatBeltFlag = 78[json_name = "cdrvst"];
  if (this->codriverseatbeltflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      78, this->_internal_codriverseatbeltflag(), target);
  }

  // uint32 enerConsumptionDrive = 79[json_name = "enerconsdr"];
  if (this->enerconsumptiondrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(79, this->_internal_enerconsumptiondrive(), target);
  }

  // uint32 enerConsumptionAux = 80[json_name = "enerconsax"];
  if (this->enerconsumptionaux() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(80, this->_internal_enerconsumptionaux(), target);
  }

  // uint32 enerConsumptionCooling = 81[json_name = "enerconscol"];
  if (this->enerconsumptioncooling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(81, this->_internal_enerconsumptioncooling(), target);
  }

  // uint32 regenPowerConsumption = 82[json_name = "rgneff"];
  if (this->regenpowerconsumption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(82, this->_internal_regenpowerconsumption(), target);
  }

  // .com.bosch.itrams_gen2e.CruiseControlStatus cruiseControlStatus = 83[json_name = "crsctr"];
  if (this->cruisecontrolstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      83, this->_internal_cruisecontrolstatus(), target);
  }

  // uint32 cruiseControlSpeed = 84[json_name = "crsctrsp"];
  if (this->cruisecontrolspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(84, this->_internal_cruisecontrolspeed(), target);
  }

  // uint32 fuelLevelPercentage = 85[json_name = "flperc"];
  if (this->fuellevelpercentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(85, this->_internal_fuellevelpercentage(), target);
  }

  // int32 engineTorque = 86[json_name = "engtq"];
  if (this->enginetorque() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(86, this->_internal_enginetorque(), target);
  }

  // .com.bosch.itrams_gen2e.DRlState drlState = 87[json_name = "drlstokok"];
  if (this->drlstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      87, this->_internal_drlstate(), target);
  }

  // .com.bosch.itrams_gen2e.WiperState wiperState = 88[json_name = "wprst"];
  if (this->wiperstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      88, this->_internal_wiperstate(), target);
  }

  // uint32 instantFE = 89[json_name = "instfe"];
  if (this->instantfe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(89, this->_internal_instantfe(), target);
  }

  // int32 throttleBodyPosition = 90[json_name = "thrpos"];
  if (this->throttlebodyposition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(90, this->_internal_throttlebodyposition(), target);
  }

  // uint32 intakeManifoldTemp = 91[json_name = "intkmf"];
  if (this->intakemanifoldtemp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_intakemanifoldtemp(), target);
  }

  // .com.bosch.itrams_gen2e.BiFuelMode biFuelMode = 92[json_name = "biflm"];
  if (this->bifuelmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      92, this->_internal_bifuelmode(), target);
  }

  // uint32 hvBattSocPercentage = 93[json_name = "hvbsoc"];
  if (this->hvbattsocpercentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(93, this->_internal_hvbattsocpercentage(), target);
  }

  // uint32 distanceToEmpty = 94[json_name = "dstEmpty"];
  if (this->distancetoempty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(94, this->_internal_distancetoempty(), target);
  }

  // uint32 distanceToEmptyNonEV = 95[json_name = "dstEmptynv"];
  if (this->distancetoemptynonev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(95, this->_internal_distancetoemptynonev(), target);
  }

  // .com.bosch.itrams_gen2e.AcMode acMode = 96[json_name = "acmd"];
  if (this->acmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      96, this->_internal_acmode(), target);
  }

  // int32 electricMotorCurrent = 97[json_name = "elcmc"];
  if (this->electricmotorcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(97, this->_internal_electricmotorcurrent(), target);
  }

  // int32 electricMotorVoltage = 98[json_name = "elcmv"];
  if (this->electricmotorvoltage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(98, this->_internal_electricmotorvoltage(), target);
  }

  // int32 electricMotorSpeed = 99[json_name = "elcms"];
  if (this->electricmotorspeed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(99, this->_internal_electricmotorspeed(), target);
  }

  // int32 electricMotorTemperature = 100[json_name = "elcmv"];
  if (this->electricmotortemperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_electricmotortemperature(), target);
  }

  // int32 hvBattCurrent = 101[json_name = "elcmc"];
  if (this->hvbattcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_hvbattcurrent(), target);
  }

  // uint32 hvBattKWh = 102[json_name = "elcmv"];
  if (this->hvbattkwh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(102, this->_internal_hvbattkwh(), target);
  }

  // uint32 dcDcOutputVolatge = 103[json_name = "dcopvol"];
  if (this->dcdcoutputvolatge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(103, this->_internal_dcdcoutputvolatge(), target);
  }

  // uint32 dcDcOutputCurrent = 104[json_name = "dcopcur"];
  if (this->dcdcoutputcurrent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(104, this->_internal_dcdcoutputcurrent(), target);
  }

  // uint32 vehicleBatteryLevel = 105[json_name = "vehbattlev"];
  if (this->vehiclebatterylevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(105, this->_internal_vehiclebatterylevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.bosch.itrams_gen2e.TelemetryReading)
  return target;
}

size_t TelemetryReading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.bosch.itrams_gen2e.TelemetryReading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1[json_name = "ts"];
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .com.bosch.itrams_gen2e.GPsFixStatus gpsFixStatus = 52[json_name = "gpsfixSt"];
  if (this->gpsfixstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gpsfixstatus());
  }

  // .com.bosch.itrams_gen2e.PowerModeState powerModeState = 53[json_name = "pwrmdst"];
  if (this->powermodestate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_powermodestate());
  }

  // .com.bosch.itrams_gen2e.HornState hornState = 54[json_name = "hrnst"];
  if (this->hornstate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_hornstate());
  }

  // .com.bosch.itrams_gen2e.HighBeamLampOnFlag highBeamLampOnFlag = 55[json_name = "hblf"];
  if (this->highbeamlamponflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_highbeamlamponflag());
  }

  // .com.bosch.itrams_gen2e.LowBeamLampOnFlag lowBeamLampOnFlag = 56[json_name = "lblf"];
  if (this->lowbeamlamponflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lowbeamlamponflag());
  }

  // .com.bosch.itrams_gen2e.LeftFrontDoorOpenFlag leftFrontDoorOpenFlag = 57[json_name = "lfdof"];
  if (this->leftfrontdooropenflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leftfrontdooropenflag());
  }

  // .com.bosch.itrams_gen2e.RightFrontDoorOpenFlag rightFrontDoorOpenFlag = 58[json_name = "rfdof"];
  if (this->rightfrontdooropenflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rightfrontdooropenflag());
  }

  // .com.bosch.itrams_gen2e.LeftRearDoorOpenFlag leftRearDoorOpenFlag = 59[json_name = "lrdof"];
  if (this->leftreardooropenflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leftreardooropenflag());
  }

  // .com.bosch.itrams_gen2e.RightRearDoorOpenFlag rightRearDoorOpenFlag = 60[json_name = "rrdof"];
  if (this->rightreardooropenflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rightreardooropenflag());
  }

  // .com.bosch.itrams_gen2e.TailGateOpenFlag tailGateOpenFlag = 61[json_name = "tgof"];
  if (this->tailgateopenflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tailgateopenflag());
  }

  // .com.bosch.itrams_gen2e.BonnetOpenFlag bonnetOpenFlag = 62[json_name = "bntof"];
  if (this->bonnetopenflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bonnetopenflag());
  }

  // .com.bosch.itrams_gen2e.VehicleARmState vehicleARmState = 63[json_name = "varm"];
  if (this->vehiclearmstate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehiclearmstate());
  }

  // .com.bosch.itrams_gen2e.CabinCoolingSolValveState cabinCoolingSolValveState = 64[json_name = "csol"];
  if (this->cabincoolingsolvalvestate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cabincoolingsolvalvestate());
  }

  // .com.bosch.itrams_gen2e.AcReqDrvr acReqDrvr = 65[json_name = "acrq"];
  if (this->acreqdrvr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_acreqdrvr());
  }

  // uint32 coolingPwrVCU = 66[json_name = "copwvc"];
  if (this->coolingpwrvcu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coolingpwrvcu());
  }

  // uint32 coolingPwrFATC = 67[json_name = "copwfc"];
  if (this->coolingpwrfatc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coolingpwrfatc());
  }

  // uint32 heatingPwrVCU = 68[json_name = "htpwvc"];
  if (this->heatingpwrvcu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heatingpwrvcu());
  }

  // uint32 heatingPwrFATC = 69[json_name = "htpwfc"];
  if (this->heatingpwrfatc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heatingpwrfatc());
  }

  // uint32 acCmprSpd = 70[json_name = "htpwfc"];
  if (this->accmprspd() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accmprspd());
  }

  // uint32 solarLoad = 71[json_name = "slrld"];
  if (this->solarload() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_solarload());
  }

  // .com.bosch.itrams_gen2e.AcSetTemperature acSetTemperature = 72[json_name = "acstmp"];
  if (this->acsettemperature() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_acsettemperature());
  }

  // .com.bosch.itrams_gen2e.BatteryCoolingSolValveState batteryCoolingSolValveState = 73[json_name = "battcl"];
  if (this->batterycoolingsolvalvestate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_batterycoolingsolvalvestate());
  }

  // uint32 brakePedalPosPercen = 74[json_name = "brkpdl"];
  if (this->brakepedalpospercen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brakepedalpospercen());
  }

  // .com.bosch.itrams_gen2e.ParkBrakePressStateFlag parkBrakeState = 75[json_name = "prkbrk"];
  if (this->parkbrakestate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_parkbrakestate());
  }

  // int32 electricMotorTorque = 76[json_name = "prkbrk"];
  if (this->electricmotortorque() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_electricmotortorque());
  }

  // .com.bosch.itrams_gen2e.DriverSeatBeltFlag driverSeatBeltFlag = 77[json_name = "drvst"];
  if (this->driverseatbeltflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driverseatbeltflag());
  }

  // .com.bosch.itrams_gen2e.CoDriverSeatBeltFlag coDriverSeatBeltFlag = 78[json_name = "cdrvst"];
  if (this->codriverseatbeltflag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_codriverseatbeltflag());
  }

  // uint32 enerConsumptionDrive = 79[json_name = "enerconsdr"];
  if (this->enerconsumptiondrive() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enerconsumptiondrive());
  }

  // uint32 enerConsumptionAux = 80[json_name = "enerconsax"];
  if (this->enerconsumptionaux() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enerconsumptionaux());
  }

  // uint32 enerConsumptionCooling = 81[json_name = "enerconscol"];
  if (this->enerconsumptioncooling() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_enerconsumptioncooling());
  }

  // uint32 regenPowerConsumption = 82[json_name = "rgneff"];
  if (this->regenpowerconsumption() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_regenpowerconsumption());
  }

  // .com.bosch.itrams_gen2e.CruiseControlStatus cruiseControlStatus = 83[json_name = "crsctr"];
  if (this->cruisecontrolstatus() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cruisecontrolstatus());
  }

  // uint32 cruiseControlSpeed = 84[json_name = "crsctrsp"];
  if (this->cruisecontrolspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cruisecontrolspeed());
  }

  // uint32 fuelLevelPercentage = 85[json_name = "flperc"];
  if (this->fuellevelpercentage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fuellevelpercentage());
  }

  // int32 engineTorque = 86[json_name = "engtq"];
  if (this->enginetorque() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enginetorque());
  }

  // .com.bosch.itrams_gen2e.DRlState drlState = 87[json_name = "drlstokok"];
  if (this->drlstate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_drlstate());
  }

  // .com.bosch.itrams_gen2e.WiperState wiperState = 88[json_name = "wprst"];
  if (this->wiperstate() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wiperstate());
  }

  // uint32 instantFE = 89[json_name = "instfe"];
  if (this->instantfe() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instantfe());
  }

  // int32 throttleBodyPosition = 90[json_name = "thrpos"];
  if (this->throttlebodyposition() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_throttlebodyposition());
  }

  // uint32 intakeManifoldTemp = 91[json_name = "intkmf"];
  if (this->intakemanifoldtemp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_intakemanifoldtemp());
  }

  // .com.bosch.itrams_gen2e.BiFuelMode biFuelMode = 92[json_name = "biflm"];
  if (this->bifuelmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bifuelmode());
  }

  // uint32 hvBattSocPercentage = 93[json_name = "hvbsoc"];
  if (this->hvbattsocpercentage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hvbattsocpercentage());
  }

  // uint32 distanceToEmpty = 94[json_name = "dstEmpty"];
  if (this->distancetoempty() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distancetoempty());
  }

  // uint32 distanceToEmptyNonEV = 95[json_name = "dstEmptynv"];
  if (this->distancetoemptynonev() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distancetoemptynonev());
  }

  // .com.bosch.itrams_gen2e.AcMode acMode = 96[json_name = "acmd"];
  if (this->acmode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_acmode());
  }

  // int32 electricMotorCurrent = 97[json_name = "elcmc"];
  if (this->electricmotorcurrent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_electricmotorcurrent());
  }

  // int32 electricMotorVoltage = 98[json_name = "elcmv"];
  if (this->electricmotorvoltage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_electricmotorvoltage());
  }

  // int32 electricMotorSpeed = 99[json_name = "elcms"];
  if (this->electricmotorspeed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_electricmotorspeed());
  }

  // int32 electricMotorTemperature = 100[json_name = "elcmv"];
  if (this->electricmotortemperature() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_electricmotortemperature());
  }

  // int32 hvBattCurrent = 101[json_name = "elcmc"];
  if (this->hvbattcurrent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hvbattcurrent());
  }

  // uint32 hvBattKWh = 102[json_name = "elcmv"];
  if (this->hvbattkwh() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hvbattkwh());
  }

  // uint32 dcDcOutputVolatge = 103[json_name = "dcopvol"];
  if (this->dcdcoutputvolatge() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dcdcoutputvolatge());
  }

  // uint32 dcDcOutputCurrent = 104[json_name = "dcopcur"];
  if (this->dcdcoutputcurrent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dcdcoutputcurrent());
  }

  // uint32 vehicleBatteryLevel = 105[json_name = "vehbattlev"];
  if (this->vehiclebatterylevel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vehiclebatterylevel());
  }

  switch (gpsLatProperty_case()) {
    // int32 gpsLat = 2[json_name = "glt"];
    case kGpsLat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpslat());
      break;
    }
    case GPSLATPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsLongProperty_case()) {
    // int32 gpsLong = 3[json_name = "gln"];
    case kGpsLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpslong());
      break;
    }
    case GPSLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsAltProperty_case()) {
    // int32 gpsAlt = 4[json_name = "gal"];
    case kGpsAlt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpsalt());
      break;
    }
    case GPSALTPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsCourseAngleProperty_case()) {
    // uint32 gpsCourseAngle = 5[json_name = "gca"];
    case kGpsCourseAngle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpscourseangle());
      break;
    }
    case GPSCOURSEANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (accelXProperty_case()) {
    // int32 accelX = 6[json_name = "acx"];
    case kAccelX: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_accelx());
      break;
    }
    case ACCELXPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (accelYProperty_case()) {
    // int32 accelY = 7[json_name = "acy"];
    case kAccelY: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_accely());
      break;
    }
    case ACCELYPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (accelZProperty_case()) {
    // int32 accelZ = 8[json_name = "acz"];
    case kAccelZ: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_accelz());
      break;
    }
    case ACCELZPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsSignalQualityProperty_case()) {
    // uint32 gpsSignalQuality = 9[json_name = "gsq"];
    case kGpsSignalQuality: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpssignalquality());
      break;
    }
    case GPSSIGNALQUALITYPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsAccuracyLatProperty_case()) {
    // uint32 gpsAccuracyLat = 10[json_name = "gacLt"];
    case kGpsAccuracyLat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsaccuracylat());
      break;
    }
    case GPSACCURACYLATPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsAccuracyLongProperty_case()) {
    // uint32 gpsAccuracyLong = 11[json_name = "gacLn"];
    case kGpsAccuracyLong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsaccuracylong());
      break;
    }
    case GPSACCURACYLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gpsAccuracyAltProperty_case()) {
    // uint32 gpsAccuracyAlt = 12[json_name = "gacAl"];
    case kGpsAccuracyAlt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpsaccuracyalt());
      break;
    }
    case GPSACCURACYALTPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gsmSignalStrengthProperty_case()) {
    // uint32 gsmSignalStrength = 13[json_name = "gsmSig"];
    case kGsmSignalStrength: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gsmsignalstrength());
      break;
    }
    case GSMSIGNALSTRENGTHPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gsmMccProperty_case()) {
    // uint32 gsmMcc = 14[json_name = "gsmMCC"];
    case kGsmMcc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gsmmcc());
      break;
    }
    case GSMMCCPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gsmMncProperty_case()) {
    // uint32 gsmMnc = 15[json_name = "gsmMnc"];
    case kGsmMnc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gsmmnc());
      break;
    }
    case GSMMNCPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (ignitionOnProperty_case()) {
    // .com.bosch.itrams_gen2e.IgnitionOn ignitionOn = 16[json_name = "ign"];
    case kIgnitionOn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ignitionon());
      break;
    }
    case IGNITIONONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (crankOnProperty_case()) {
    // .com.bosch.itrams_gen2e.CrankOn crankOn = 17[json_name = "cnk"];
    case kCrankOn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_crankon());
      break;
    }
    case CRANKONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (vehicleSpeedProperty_case()) {
    // uint32 vehicleSpeed = 18[json_name = "vsp"];
    case kVehicleSpeed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vehiclespeed());
      break;
    }
    case VEHICLESPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (engineRpmProperty_case()) {
    // uint32 engineRpm = 19[json_name = "rpm"];
    case kEngineRpm: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enginerpm());
      break;
    }
    case ENGINERPMPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (steeringAngleProperty_case()) {
    // uint32 steeringAngle = 20[json_name = "sta"];
    case kSteeringAngle: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steeringangle());
      break;
    }
    case STEERINGANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (distanceTravelledProperty_case()) {
    // uint32 distanceTravelled = 21[json_name = "tdt"];
    case kDistanceTravelled: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distancetravelled());
      break;
    }
    case DISTANCETRAVELLEDPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (outsideAmbientTemperatureProperty_case()) {
    // int32 outsideAmbientTemperature = 22[json_name = "oat"];
    case kOutsideAmbientTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_outsideambienttemperature());
      break;
    }
    case OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (vehicleInteriorTemperatureProperty_case()) {
    // int32 vehicleInteriorTemperature = 23[json_name = "vit"];
    case kVehicleInteriorTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vehicleinteriortemperature());
      break;
    }
    case VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (steeringDirectionProperty_case()) {
    // .com.bosch.itrams_gen2e.SteeringDirection steeringDirection = 24[json_name = "sdn"];
    case kSteeringDirection: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_steeringdirection());
      break;
    }
    case STEERINGDIRECTIONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (acCompressorPressureProperty_case()) {
    // uint32 acCompressorPressure = 25[json_name = "acp"];
    case kAcCompressorPressure: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accompressorpressure());
      break;
    }
    case ACCOMPRESSORPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (acceleratorPedalPositionProperty_case()) {
    // uint32 acceleratorPedalPosition = 26[json_name = "app"];
    case kAcceleratorPedalPosition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_acceleratorpedalposition());
      break;
    }
    case ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (atmosphericPressureProperty_case()) {
    // uint32 atmosphericPressure = 27[json_name = "atp"];
    case kAtmosphericPressure: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atmosphericpressure());
      break;
    }
    case ATMOSPHERICPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (transmissionOilTemperatureProperty_case()) {
    // int32 transmissionOilTemperature = 28[json_name = "tot"];
    case kTransmissionOilTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transmissionoiltemperature());
      break;
    }
    case TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (evGearInfoProperty_case()) {
    // .com.bosch.itrams_gen2e.EVGearState evGearInfo = 29[json_name = "egi"];
    case kEvGearInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evgearinfo());
      break;
    }
    case EVGEARINFOPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (vcuPowerModeProperty_case()) {
    // .com.bosch.itrams_gen2e.VCUPowerMode vcuPowerMode = 30[json_name = "vcupm"];
    case kVcuPowerMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vcupowermode());
      break;
    }
    case VCUPOWERMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gear_InfoProperty_case()) {
    // .com.bosch.itrams_gen2e.GearState gear_Info = 31[json_name = "grinfo"];
    case kGearInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_info());
      break;
    }
    case GEAR_INFOPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (fuelRemainingProperty_case()) {
    // uint32 fuelRemaining = 32[json_name = "fuel"];
    case kFuelRemaining: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fuelremaining());
      break;
    }
    case FUELREMAININGPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (cumulativeFuelConsumptionRateProperty_case()) {
    // uint32 cumulativeFuelConsumptionRate = 33[json_name = "cfr"];
    case kCumulativeFuelConsumptionRate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cumulativefuelconsumptionrate());
      break;
    }
    case CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (engineIdleSpeedTargetProperty_case()) {
    // uint32 engineIdleSpeedTarget = 34[json_name = "eis"];
    case kEngineIdleSpeedTarget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_engineidlespeedtarget());
      break;
    }
    case ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (engineCoolantTemperatureProperty_case()) {
    // int32 engineCoolantTemperature = 35[json_name = "ect"];
    case kEngineCoolantTemperature: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_enginecoolanttemperature());
      break;
    }
    case ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gyroscopeXProperty_case()) {
    // uint32 gyroscopeX = 36[json_name = "gyroX"];
    case kGyroscopeX: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gyroscopex());
      break;
    }
    case GYROSCOPEXPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gyroscopeYProperty_case()) {
    // uint32 gyroscopeY = 37[json_name = "gyroY"];
    case kGyroscopeY: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gyroscopey());
      break;
    }
    case GYROSCOPEYPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (gyroscopeZProperty_case()) {
    // uint32 gyroscopeZ = 38[json_name = "gyroZ"];
    case kGyroscopeZ: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gyroscopez());
      break;
    }
    case GYROSCOPEZPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (blowerSpeedProperty_case()) {
    // .com.bosch.itrams_gen2e.BlowerSpeed blowerSpeed = 39[json_name = "blspeed"];
    case kBlowerSpeed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_blowerspeed());
      break;
    }
    case BLOWERSPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvAmpHrProperty_case()) {
    // uint32 hvAmpHr = 40[json_name = "hvamp"];
    case kHvAmpHr: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvamphr());
      break;
    }
    case HVAMPHRPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvAmpHrRegenProperty_case()) {
    // uint32 hvAmpHrRegen = 41[json_name = "hvampreg"];
    case kHvAmpHrRegen: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvamphrregen());
      break;
    }
    case HVAMPHRREGENPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvBattMaxCellVoltageProperty_case()) {
    // uint32 hvBattMaxCellVoltage = 42[json_name = "hbmaxv"];
    case kHvBattMaxCellVoltage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvbattmaxcellvoltage());
      break;
    }
    case HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvBattMinCellVoltageProperty_case()) {
    // uint32 hvBattMinCellVoltage = 43[json_name = "hbminv"];
    case kHvBattMinCellVoltage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvbattmincellvoltage());
      break;
    }
    case HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvBattMaxCellTempProperty_case()) {
    // uint32 hvBattMaxCellTemp = 44[json_name = "hbmaxtmp"];
    case kHvBattMaxCellTemp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvbattmaxcelltemp());
      break;
    }
    case HVBATTMAXCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvBattMinCellTempProperty_case()) {
    // uint32 hvBattMinCellTemp = 45[json_name = "hbmintmp"];
    case kHvBattMinCellTemp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvbattmincelltemp());
      break;
    }
    case HVBATTMINCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (hvBattPackVoltageProperty_case()) {
    // uint32 hvBattPackVoltage = 46[json_name = "hbpvol"];
    case kHvBattPackVoltage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hvbattpackvoltage());
      break;
    }
    case HVBATTPACKVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (brkPressStateProperty_case()) {
    // .com.bosch.itrams_gen2e.BrakePressState brkPressState = 47[json_name = "brkprs"];
    case kBrkPressState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brkpressstate());
      break;
    }
    case BRKPRESSSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (vehicleSpeedTwoProperty_case()) {
    // uint32 vehicleSpeedTwo = 48[json_name = "vspd2"];
    case kVehicleSpeedTwo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vehiclespeedtwo());
      break;
    }
    case VEHICLESPEEDTWOPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (vehicleDriveModeProperty_case()) {
    // .com.bosch.itrams_gen2e.VehicleDriveMode vehicleDriveMode = 49[json_name = "vdrvmd"];
    case kVehicleDriveMode: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vehicledrivemode());
      break;
    }
    case VEHICLEDRIVEMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (clutchStateProperty_case()) {
    // .com.bosch.itrams_gen2e.ClutchState clutchState = 50[json_name = "clthst"];
    case kClutchState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_clutchstate());
      break;
    }
    case CLUTCHSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (acStateProperty_case()) {
    // .com.bosch.itrams_gen2e.AcState acState = 51[json_name = "acst"];
    case kAcState: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_acstate());
      break;
    }
    case ACSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryReading::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TelemetryReading*>(
      &from));
}

void TelemetryReading::MergeFrom(const TelemetryReading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.bosch.itrams_gen2e.TelemetryReading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.gpsfixstatus() != 0) {
    _internal_set_gpsfixstatus(from._internal_gpsfixstatus());
  }
  if (from.powermodestate() != 0) {
    _internal_set_powermodestate(from._internal_powermodestate());
  }
  if (from.hornstate() != 0) {
    _internal_set_hornstate(from._internal_hornstate());
  }
  if (from.highbeamlamponflag() != 0) {
    _internal_set_highbeamlamponflag(from._internal_highbeamlamponflag());
  }
  if (from.lowbeamlamponflag() != 0) {
    _internal_set_lowbeamlamponflag(from._internal_lowbeamlamponflag());
  }
  if (from.leftfrontdooropenflag() != 0) {
    _internal_set_leftfrontdooropenflag(from._internal_leftfrontdooropenflag());
  }
  if (from.rightfrontdooropenflag() != 0) {
    _internal_set_rightfrontdooropenflag(from._internal_rightfrontdooropenflag());
  }
  if (from.leftreardooropenflag() != 0) {
    _internal_set_leftreardooropenflag(from._internal_leftreardooropenflag());
  }
  if (from.rightreardooropenflag() != 0) {
    _internal_set_rightreardooropenflag(from._internal_rightreardooropenflag());
  }
  if (from.tailgateopenflag() != 0) {
    _internal_set_tailgateopenflag(from._internal_tailgateopenflag());
  }
  if (from.bonnetopenflag() != 0) {
    _internal_set_bonnetopenflag(from._internal_bonnetopenflag());
  }
  if (from.vehiclearmstate() != 0) {
    _internal_set_vehiclearmstate(from._internal_vehiclearmstate());
  }
  if (from.cabincoolingsolvalvestate() != 0) {
    _internal_set_cabincoolingsolvalvestate(from._internal_cabincoolingsolvalvestate());
  }
  if (from.acreqdrvr() != 0) {
    _internal_set_acreqdrvr(from._internal_acreqdrvr());
  }
  if (from.coolingpwrvcu() != 0) {
    _internal_set_coolingpwrvcu(from._internal_coolingpwrvcu());
  }
  if (from.coolingpwrfatc() != 0) {
    _internal_set_coolingpwrfatc(from._internal_coolingpwrfatc());
  }
  if (from.heatingpwrvcu() != 0) {
    _internal_set_heatingpwrvcu(from._internal_heatingpwrvcu());
  }
  if (from.heatingpwrfatc() != 0) {
    _internal_set_heatingpwrfatc(from._internal_heatingpwrfatc());
  }
  if (from.accmprspd() != 0) {
    _internal_set_accmprspd(from._internal_accmprspd());
  }
  if (from.solarload() != 0) {
    _internal_set_solarload(from._internal_solarload());
  }
  if (from.acsettemperature() != 0) {
    _internal_set_acsettemperature(from._internal_acsettemperature());
  }
  if (from.batterycoolingsolvalvestate() != 0) {
    _internal_set_batterycoolingsolvalvestate(from._internal_batterycoolingsolvalvestate());
  }
  if (from.brakepedalpospercen() != 0) {
    _internal_set_brakepedalpospercen(from._internal_brakepedalpospercen());
  }
  if (from.parkbrakestate() != 0) {
    _internal_set_parkbrakestate(from._internal_parkbrakestate());
  }
  if (from.electricmotortorque() != 0) {
    _internal_set_electricmotortorque(from._internal_electricmotortorque());
  }
  if (from.driverseatbeltflag() != 0) {
    _internal_set_driverseatbeltflag(from._internal_driverseatbeltflag());
  }
  if (from.codriverseatbeltflag() != 0) {
    _internal_set_codriverseatbeltflag(from._internal_codriverseatbeltflag());
  }
  if (from.enerconsumptiondrive() != 0) {
    _internal_set_enerconsumptiondrive(from._internal_enerconsumptiondrive());
  }
  if (from.enerconsumptionaux() != 0) {
    _internal_set_enerconsumptionaux(from._internal_enerconsumptionaux());
  }
  if (from.enerconsumptioncooling() != 0) {
    _internal_set_enerconsumptioncooling(from._internal_enerconsumptioncooling());
  }
  if (from.regenpowerconsumption() != 0) {
    _internal_set_regenpowerconsumption(from._internal_regenpowerconsumption());
  }
  if (from.cruisecontrolstatus() != 0) {
    _internal_set_cruisecontrolstatus(from._internal_cruisecontrolstatus());
  }
  if (from.cruisecontrolspeed() != 0) {
    _internal_set_cruisecontrolspeed(from._internal_cruisecontrolspeed());
  }
  if (from.fuellevelpercentage() != 0) {
    _internal_set_fuellevelpercentage(from._internal_fuellevelpercentage());
  }
  if (from.enginetorque() != 0) {
    _internal_set_enginetorque(from._internal_enginetorque());
  }
  if (from.drlstate() != 0) {
    _internal_set_drlstate(from._internal_drlstate());
  }
  if (from.wiperstate() != 0) {
    _internal_set_wiperstate(from._internal_wiperstate());
  }
  if (from.instantfe() != 0) {
    _internal_set_instantfe(from._internal_instantfe());
  }
  if (from.throttlebodyposition() != 0) {
    _internal_set_throttlebodyposition(from._internal_throttlebodyposition());
  }
  if (from.intakemanifoldtemp() != 0) {
    _internal_set_intakemanifoldtemp(from._internal_intakemanifoldtemp());
  }
  if (from.bifuelmode() != 0) {
    _internal_set_bifuelmode(from._internal_bifuelmode());
  }
  if (from.hvbattsocpercentage() != 0) {
    _internal_set_hvbattsocpercentage(from._internal_hvbattsocpercentage());
  }
  if (from.distancetoempty() != 0) {
    _internal_set_distancetoempty(from._internal_distancetoempty());
  }
  if (from.distancetoemptynonev() != 0) {
    _internal_set_distancetoemptynonev(from._internal_distancetoemptynonev());
  }
  if (from.acmode() != 0) {
    _internal_set_acmode(from._internal_acmode());
  }
  if (from.electricmotorcurrent() != 0) {
    _internal_set_electricmotorcurrent(from._internal_electricmotorcurrent());
  }
  if (from.electricmotorvoltage() != 0) {
    _internal_set_electricmotorvoltage(from._internal_electricmotorvoltage());
  }
  if (from.electricmotorspeed() != 0) {
    _internal_set_electricmotorspeed(from._internal_electricmotorspeed());
  }
  if (from.electricmotortemperature() != 0) {
    _internal_set_electricmotortemperature(from._internal_electricmotortemperature());
  }
  if (from.hvbattcurrent() != 0) {
    _internal_set_hvbattcurrent(from._internal_hvbattcurrent());
  }
  if (from.hvbattkwh() != 0) {
    _internal_set_hvbattkwh(from._internal_hvbattkwh());
  }
  if (from.dcdcoutputvolatge() != 0) {
    _internal_set_dcdcoutputvolatge(from._internal_dcdcoutputvolatge());
  }
  if (from.dcdcoutputcurrent() != 0) {
    _internal_set_dcdcoutputcurrent(from._internal_dcdcoutputcurrent());
  }
  if (from.vehiclebatterylevel() != 0) {
    _internal_set_vehiclebatterylevel(from._internal_vehiclebatterylevel());
  }
  switch (from.gpsLatProperty_case()) {
    case kGpsLat: {
      _internal_set_gpslat(from._internal_gpslat());
      break;
    }
    case GPSLATPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsLongProperty_case()) {
    case kGpsLong: {
      _internal_set_gpslong(from._internal_gpslong());
      break;
    }
    case GPSLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsAltProperty_case()) {
    case kGpsAlt: {
      _internal_set_gpsalt(from._internal_gpsalt());
      break;
    }
    case GPSALTPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsCourseAngleProperty_case()) {
    case kGpsCourseAngle: {
      _internal_set_gpscourseangle(from._internal_gpscourseangle());
      break;
    }
    case GPSCOURSEANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.accelXProperty_case()) {
    case kAccelX: {
      _internal_set_accelx(from._internal_accelx());
      break;
    }
    case ACCELXPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.accelYProperty_case()) {
    case kAccelY: {
      _internal_set_accely(from._internal_accely());
      break;
    }
    case ACCELYPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.accelZProperty_case()) {
    case kAccelZ: {
      _internal_set_accelz(from._internal_accelz());
      break;
    }
    case ACCELZPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsSignalQualityProperty_case()) {
    case kGpsSignalQuality: {
      _internal_set_gpssignalquality(from._internal_gpssignalquality());
      break;
    }
    case GPSSIGNALQUALITYPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsAccuracyLatProperty_case()) {
    case kGpsAccuracyLat: {
      _internal_set_gpsaccuracylat(from._internal_gpsaccuracylat());
      break;
    }
    case GPSACCURACYLATPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsAccuracyLongProperty_case()) {
    case kGpsAccuracyLong: {
      _internal_set_gpsaccuracylong(from._internal_gpsaccuracylong());
      break;
    }
    case GPSACCURACYLONGPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gpsAccuracyAltProperty_case()) {
    case kGpsAccuracyAlt: {
      _internal_set_gpsaccuracyalt(from._internal_gpsaccuracyalt());
      break;
    }
    case GPSACCURACYALTPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gsmSignalStrengthProperty_case()) {
    case kGsmSignalStrength: {
      _internal_set_gsmsignalstrength(from._internal_gsmsignalstrength());
      break;
    }
    case GSMSIGNALSTRENGTHPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gsmMccProperty_case()) {
    case kGsmMcc: {
      _internal_set_gsmmcc(from._internal_gsmmcc());
      break;
    }
    case GSMMCCPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gsmMncProperty_case()) {
    case kGsmMnc: {
      _internal_set_gsmmnc(from._internal_gsmmnc());
      break;
    }
    case GSMMNCPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.ignitionOnProperty_case()) {
    case kIgnitionOn: {
      _internal_set_ignitionon(from._internal_ignitionon());
      break;
    }
    case IGNITIONONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.crankOnProperty_case()) {
    case kCrankOn: {
      _internal_set_crankon(from._internal_crankon());
      break;
    }
    case CRANKONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.vehicleSpeedProperty_case()) {
    case kVehicleSpeed: {
      _internal_set_vehiclespeed(from._internal_vehiclespeed());
      break;
    }
    case VEHICLESPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.engineRpmProperty_case()) {
    case kEngineRpm: {
      _internal_set_enginerpm(from._internal_enginerpm());
      break;
    }
    case ENGINERPMPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.steeringAngleProperty_case()) {
    case kSteeringAngle: {
      _internal_set_steeringangle(from._internal_steeringangle());
      break;
    }
    case STEERINGANGLEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.distanceTravelledProperty_case()) {
    case kDistanceTravelled: {
      _internal_set_distancetravelled(from._internal_distancetravelled());
      break;
    }
    case DISTANCETRAVELLEDPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.outsideAmbientTemperatureProperty_case()) {
    case kOutsideAmbientTemperature: {
      _internal_set_outsideambienttemperature(from._internal_outsideambienttemperature());
      break;
    }
    case OUTSIDEAMBIENTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.vehicleInteriorTemperatureProperty_case()) {
    case kVehicleInteriorTemperature: {
      _internal_set_vehicleinteriortemperature(from._internal_vehicleinteriortemperature());
      break;
    }
    case VEHICLEINTERIORTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.steeringDirectionProperty_case()) {
    case kSteeringDirection: {
      _internal_set_steeringdirection(from._internal_steeringdirection());
      break;
    }
    case STEERINGDIRECTIONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.acCompressorPressureProperty_case()) {
    case kAcCompressorPressure: {
      _internal_set_accompressorpressure(from._internal_accompressorpressure());
      break;
    }
    case ACCOMPRESSORPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.acceleratorPedalPositionProperty_case()) {
    case kAcceleratorPedalPosition: {
      _internal_set_acceleratorpedalposition(from._internal_acceleratorpedalposition());
      break;
    }
    case ACCELERATORPEDALPOSITIONPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.atmosphericPressureProperty_case()) {
    case kAtmosphericPressure: {
      _internal_set_atmosphericpressure(from._internal_atmosphericpressure());
      break;
    }
    case ATMOSPHERICPRESSUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.transmissionOilTemperatureProperty_case()) {
    case kTransmissionOilTemperature: {
      _internal_set_transmissionoiltemperature(from._internal_transmissionoiltemperature());
      break;
    }
    case TRANSMISSIONOILTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.evGearInfoProperty_case()) {
    case kEvGearInfo: {
      _internal_set_evgearinfo(from._internal_evgearinfo());
      break;
    }
    case EVGEARINFOPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.vcuPowerModeProperty_case()) {
    case kVcuPowerMode: {
      _internal_set_vcupowermode(from._internal_vcupowermode());
      break;
    }
    case VCUPOWERMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gear_InfoProperty_case()) {
    case kGearInfo: {
      _internal_set_gear_info(from._internal_gear_info());
      break;
    }
    case GEAR_INFOPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.fuelRemainingProperty_case()) {
    case kFuelRemaining: {
      _internal_set_fuelremaining(from._internal_fuelremaining());
      break;
    }
    case FUELREMAININGPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.cumulativeFuelConsumptionRateProperty_case()) {
    case kCumulativeFuelConsumptionRate: {
      _internal_set_cumulativefuelconsumptionrate(from._internal_cumulativefuelconsumptionrate());
      break;
    }
    case CUMULATIVEFUELCONSUMPTIONRATEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.engineIdleSpeedTargetProperty_case()) {
    case kEngineIdleSpeedTarget: {
      _internal_set_engineidlespeedtarget(from._internal_engineidlespeedtarget());
      break;
    }
    case ENGINEIDLESPEEDTARGETPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.engineCoolantTemperatureProperty_case()) {
    case kEngineCoolantTemperature: {
      _internal_set_enginecoolanttemperature(from._internal_enginecoolanttemperature());
      break;
    }
    case ENGINECOOLANTTEMPERATUREPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gyroscopeXProperty_case()) {
    case kGyroscopeX: {
      _internal_set_gyroscopex(from._internal_gyroscopex());
      break;
    }
    case GYROSCOPEXPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gyroscopeYProperty_case()) {
    case kGyroscopeY: {
      _internal_set_gyroscopey(from._internal_gyroscopey());
      break;
    }
    case GYROSCOPEYPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.gyroscopeZProperty_case()) {
    case kGyroscopeZ: {
      _internal_set_gyroscopez(from._internal_gyroscopez());
      break;
    }
    case GYROSCOPEZPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.blowerSpeedProperty_case()) {
    case kBlowerSpeed: {
      _internal_set_blowerspeed(from._internal_blowerspeed());
      break;
    }
    case BLOWERSPEEDPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvAmpHrProperty_case()) {
    case kHvAmpHr: {
      _internal_set_hvamphr(from._internal_hvamphr());
      break;
    }
    case HVAMPHRPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvAmpHrRegenProperty_case()) {
    case kHvAmpHrRegen: {
      _internal_set_hvamphrregen(from._internal_hvamphrregen());
      break;
    }
    case HVAMPHRREGENPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvBattMaxCellVoltageProperty_case()) {
    case kHvBattMaxCellVoltage: {
      _internal_set_hvbattmaxcellvoltage(from._internal_hvbattmaxcellvoltage());
      break;
    }
    case HVBATTMAXCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvBattMinCellVoltageProperty_case()) {
    case kHvBattMinCellVoltage: {
      _internal_set_hvbattmincellvoltage(from._internal_hvbattmincellvoltage());
      break;
    }
    case HVBATTMINCELLVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvBattMaxCellTempProperty_case()) {
    case kHvBattMaxCellTemp: {
      _internal_set_hvbattmaxcelltemp(from._internal_hvbattmaxcelltemp());
      break;
    }
    case HVBATTMAXCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvBattMinCellTempProperty_case()) {
    case kHvBattMinCellTemp: {
      _internal_set_hvbattmincelltemp(from._internal_hvbattmincelltemp());
      break;
    }
    case HVBATTMINCELLTEMPPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.hvBattPackVoltageProperty_case()) {
    case kHvBattPackVoltage: {
      _internal_set_hvbattpackvoltage(from._internal_hvbattpackvoltage());
      break;
    }
    case HVBATTPACKVOLTAGEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.brkPressStateProperty_case()) {
    case kBrkPressState: {
      _internal_set_brkpressstate(from._internal_brkpressstate());
      break;
    }
    case BRKPRESSSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.vehicleSpeedTwoProperty_case()) {
    case kVehicleSpeedTwo: {
      _internal_set_vehiclespeedtwo(from._internal_vehiclespeedtwo());
      break;
    }
    case VEHICLESPEEDTWOPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.vehicleDriveModeProperty_case()) {
    case kVehicleDriveMode: {
      _internal_set_vehicledrivemode(from._internal_vehicledrivemode());
      break;
    }
    case VEHICLEDRIVEMODEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.clutchStateProperty_case()) {
    case kClutchState: {
      _internal_set_clutchstate(from._internal_clutchstate());
      break;
    }
    case CLUTCHSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
  switch (from.acStateProperty_case()) {
    case kAcState: {
      _internal_set_acstate(from._internal_acstate());
      break;
    }
    case ACSTATEPROPERTY_NOT_SET: {
      break;
    }
  }
}

void TelemetryReading::CopyFrom(const TelemetryReading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.bosch.itrams_gen2e.TelemetryReading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryReading::IsInitialized() const {
  return true;
}

void TelemetryReading::InternalSwap(TelemetryReading* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryReading, vehiclebatterylevel_)
      + sizeof(TelemetryReading::vehiclebatterylevel_)
      - PROTOBUF_FIELD_OFFSET(TelemetryReading, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(gpsLatProperty_, other->gpsLatProperty_);
  swap(gpsLongProperty_, other->gpsLongProperty_);
  swap(gpsAltProperty_, other->gpsAltProperty_);
  swap(gpsCourseAngleProperty_, other->gpsCourseAngleProperty_);
  swap(accelXProperty_, other->accelXProperty_);
  swap(accelYProperty_, other->accelYProperty_);
  swap(accelZProperty_, other->accelZProperty_);
  swap(gpsSignalQualityProperty_, other->gpsSignalQualityProperty_);
  swap(gpsAccuracyLatProperty_, other->gpsAccuracyLatProperty_);
  swap(gpsAccuracyLongProperty_, other->gpsAccuracyLongProperty_);
  swap(gpsAccuracyAltProperty_, other->gpsAccuracyAltProperty_);
  swap(gsmSignalStrengthProperty_, other->gsmSignalStrengthProperty_);
  swap(gsmMccProperty_, other->gsmMccProperty_);
  swap(gsmMncProperty_, other->gsmMncProperty_);
  swap(ignitionOnProperty_, other->ignitionOnProperty_);
  swap(crankOnProperty_, other->crankOnProperty_);
  swap(vehicleSpeedProperty_, other->vehicleSpeedProperty_);
  swap(engineRpmProperty_, other->engineRpmProperty_);
  swap(steeringAngleProperty_, other->steeringAngleProperty_);
  swap(distanceTravelledProperty_, other->distanceTravelledProperty_);
  swap(outsideAmbientTemperatureProperty_, other->outsideAmbientTemperatureProperty_);
  swap(vehicleInteriorTemperatureProperty_, other->vehicleInteriorTemperatureProperty_);
  swap(steeringDirectionProperty_, other->steeringDirectionProperty_);
  swap(acCompressorPressureProperty_, other->acCompressorPressureProperty_);
  swap(acceleratorPedalPositionProperty_, other->acceleratorPedalPositionProperty_);
  swap(atmosphericPressureProperty_, other->atmosphericPressureProperty_);
  swap(transmissionOilTemperatureProperty_, other->transmissionOilTemperatureProperty_);
  swap(evGearInfoProperty_, other->evGearInfoProperty_);
  swap(vcuPowerModeProperty_, other->vcuPowerModeProperty_);
  swap(gear_InfoProperty_, other->gear_InfoProperty_);
  swap(fuelRemainingProperty_, other->fuelRemainingProperty_);
  swap(cumulativeFuelConsumptionRateProperty_, other->cumulativeFuelConsumptionRateProperty_);
  swap(engineIdleSpeedTargetProperty_, other->engineIdleSpeedTargetProperty_);
  swap(engineCoolantTemperatureProperty_, other->engineCoolantTemperatureProperty_);
  swap(gyroscopeXProperty_, other->gyroscopeXProperty_);
  swap(gyroscopeYProperty_, other->gyroscopeYProperty_);
  swap(gyroscopeZProperty_, other->gyroscopeZProperty_);
  swap(blowerSpeedProperty_, other->blowerSpeedProperty_);
  swap(hvAmpHrProperty_, other->hvAmpHrProperty_);
  swap(hvAmpHrRegenProperty_, other->hvAmpHrRegenProperty_);
  swap(hvBattMaxCellVoltageProperty_, other->hvBattMaxCellVoltageProperty_);
  swap(hvBattMinCellVoltageProperty_, other->hvBattMinCellVoltageProperty_);
  swap(hvBattMaxCellTempProperty_, other->hvBattMaxCellTempProperty_);
  swap(hvBattMinCellTempProperty_, other->hvBattMinCellTempProperty_);
  swap(hvBattPackVoltageProperty_, other->hvBattPackVoltageProperty_);
  swap(brkPressStateProperty_, other->brkPressStateProperty_);
  swap(vehicleSpeedTwoProperty_, other->vehicleSpeedTwoProperty_);
  swap(vehicleDriveModeProperty_, other->vehicleDriveModeProperty_);
  swap(clutchStateProperty_, other->clutchStateProperty_);
  swap(acStateProperty_, other->acStateProperty_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
  swap(_oneof_case_[6], other->_oneof_case_[6]);
  swap(_oneof_case_[7], other->_oneof_case_[7]);
  swap(_oneof_case_[8], other->_oneof_case_[8]);
  swap(_oneof_case_[9], other->_oneof_case_[9]);
  swap(_oneof_case_[10], other->_oneof_case_[10]);
  swap(_oneof_case_[11], other->_oneof_case_[11]);
  swap(_oneof_case_[12], other->_oneof_case_[12]);
  swap(_oneof_case_[13], other->_oneof_case_[13]);
  swap(_oneof_case_[14], other->_oneof_case_[14]);
  swap(_oneof_case_[15], other->_oneof_case_[15]);
  swap(_oneof_case_[16], other->_oneof_case_[16]);
  swap(_oneof_case_[17], other->_oneof_case_[17]);
  swap(_oneof_case_[18], other->_oneof_case_[18]);
  swap(_oneof_case_[19], other->_oneof_case_[19]);
  swap(_oneof_case_[20], other->_oneof_case_[20]);
  swap(_oneof_case_[21], other->_oneof_case_[21]);
  swap(_oneof_case_[22], other->_oneof_case_[22]);
  swap(_oneof_case_[23], other->_oneof_case_[23]);
  swap(_oneof_case_[24], other->_oneof_case_[24]);
  swap(_oneof_case_[25], other->_oneof_case_[25]);
  swap(_oneof_case_[26], other->_oneof_case_[26]);
  swap(_oneof_case_[27], other->_oneof_case_[27]);
  swap(_oneof_case_[28], other->_oneof_case_[28]);
  swap(_oneof_case_[29], other->_oneof_case_[29]);
  swap(_oneof_case_[30], other->_oneof_case_[30]);
  swap(_oneof_case_[31], other->_oneof_case_[31]);
  swap(_oneof_case_[32], other->_oneof_case_[32]);
  swap(_oneof_case_[33], other->_oneof_case_[33]);
  swap(_oneof_case_[34], other->_oneof_case_[34]);
  swap(_oneof_case_[35], other->_oneof_case_[35]);
  swap(_oneof_case_[36], other->_oneof_case_[36]);
  swap(_oneof_case_[37], other->_oneof_case_[37]);
  swap(_oneof_case_[38], other->_oneof_case_[38]);
  swap(_oneof_case_[39], other->_oneof_case_[39]);
  swap(_oneof_case_[40], other->_oneof_case_[40]);
  swap(_oneof_case_[41], other->_oneof_case_[41]);
  swap(_oneof_case_[42], other->_oneof_case_[42]);
  swap(_oneof_case_[43], other->_oneof_case_[43]);
  swap(_oneof_case_[44], other->_oneof_case_[44]);
  swap(_oneof_case_[45], other->_oneof_case_[45]);
  swap(_oneof_case_[46], other->_oneof_case_[46]);
  swap(_oneof_case_[47], other->_oneof_case_[47]);
  swap(_oneof_case_[48], other->_oneof_case_[48]);
  swap(_oneof_case_[49], other->_oneof_case_[49]);
}

std::string TelemetryReading::GetTypeName() const {
  return "com.bosch.itrams_gen2e.TelemetryReading";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace itrams_gen2e
}  // namespace bosch
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::bosch::itrams_gen2e::TelemetryReading* Arena::CreateMaybeMessage< ::com::bosch::itrams_gen2e::TelemetryReading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::bosch::itrams_gen2e::TelemetryReading >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
